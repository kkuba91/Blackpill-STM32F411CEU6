
blackpill-STM32F411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  0800c270  0800c270  0001c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5c4  0800c5c4  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5c4  0800c5c4  0001c5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5cc  0800c5cc  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5cc  0800c5cc  0001c5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800c5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ec4  20000268  0800c83c  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000612c  0800c83c  0002612c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027d91  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000515d  00000000  00000000  00048029  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c48  00000000  00000000  0004d188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  0004edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfa3  00000000  00000000  000507e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018521  00000000  00000000  0006c783  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e2a1  00000000  00000000  00084ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00122f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a5c  00000000  00000000  00122fc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c258 	.word	0x0800c258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800c258 	.word	0x0800c258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f8fa 	bl	80007a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f00a f87c 	bl	800a6ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f00a f806 	bl	800a5c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20004bc8 	.word	0x20004bc8

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20004bc8 	.word	0x20004bc8

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f7      	bhi.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	; (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff4c 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ca:	f7ff ff61 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f7ff ffb1 	bl	800073c <NVIC_EncodePriority>
 80007da:	4602      	mov	r2, r0
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	4611      	mov	r1, r2
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff80 	bl	80006e8 <__NVIC_SetPriority>
}
 80007e8:	bf00      	nop
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff54 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
 8000826:	e159      	b.n	8000adc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000828:	2201      	movs	r2, #1
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	697a      	ldr	r2, [r7, #20]
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	429a      	cmp	r2, r3
 8000842:	f040 8148 	bne.w	8000ad6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d003      	beq.n	8000908 <HAL_GPIO_Init+0xfc>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b12      	cmp	r3, #18
 8000906:	d123      	bne.n	8000950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	220f      	movs	r2, #15
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4013      	ands	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	691a      	ldr	r2, [r3, #16]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	08da      	lsrs	r2, r3, #3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3208      	adds	r2, #8
 800094a:	69b9      	ldr	r1, [r7, #24]
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 0203 	and.w	r2, r3, #3
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 80a2 	beq.w	8000ad6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a55      	ldr	r2, [pc, #340]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_GPIO_Init+0x2e4>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ae:	4a51      	ldr	r2, [pc, #324]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3302      	adds	r3, #2
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43db      	mvns	r3, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4013      	ands	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a48      	ldr	r2, [pc, #288]	; (8000af8 <HAL_GPIO_Init+0x2ec>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x202>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a47      	ldr	r2, [pc, #284]	; (8000afc <HAL_GPIO_Init+0x2f0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x1fe>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <HAL_GPIO_Init+0x2f4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x1fa>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a45      	ldr	r2, [pc, #276]	; (8000b04 <HAL_GPIO_Init+0x2f8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x1f6>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_GPIO_Init+0x2fc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x1f2>
 80009fa:	2304      	movs	r3, #4
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x204>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x2e8>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7c:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa6:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_GPIO_Init+0x300>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f67f aea2 	bls.w	8000828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3724      	adds	r7, #36	; 0x24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40013c00 	.word	0x40013c00

08000b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b5c:	e003      	b.n	8000b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	041a      	lsls	r2, r3, #16
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	619a      	str	r2, [r3, #24]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b74:	b08f      	sub	sp, #60	; 0x3c
 8000b76:	af0a      	add	r7, sp, #40	; 0x28
 8000b78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e10f      	b.n	8000da4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f00a f88e 	bl	800acc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fe39 	bl	800383a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	687e      	ldr	r6, [r7, #4]
 8000bd0:	466d      	mov	r5, sp
 8000bd2:	f106 0410 	add.w	r4, r6, #16
 8000bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000be6:	1d33      	adds	r3, r6, #4
 8000be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f002 fd10 	bl	8003610 <USB_CoreInit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0d0      	b.n	8000da4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 fe27 	bl	800385c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e04a      	b.n	8000caa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	333d      	adds	r3, #61	; 0x3d
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c28:	7bfa      	ldrb	r2, [r7, #15]
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	333c      	adds	r3, #60	; 0x3c
 8000c38:	7bfa      	ldrb	r2, [r7, #15]
 8000c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	b298      	uxth	r0, r3
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	3342      	adds	r3, #66	; 0x42
 8000c50:	4602      	mov	r2, r0
 8000c52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	1a9b      	subs	r3, r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	440b      	add	r3, r1
 8000c62:	333f      	adds	r3, #63	; 0x3f
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	3344      	adds	r3, #68	; 0x44
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	1a9b      	subs	r3, r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	3348      	adds	r3, #72	; 0x48
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	4613      	mov	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3350      	adds	r3, #80	; 0x50
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3af      	bcc.n	8000c14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	e044      	b.n	8000d44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	1a9b      	subs	r3, r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	3301      	adds	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d3b5      	bcc.n	8000cba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	687e      	ldr	r6, [r7, #4]
 8000d56:	466d      	mov	r5, sp
 8000d58:	f106 0410 	add.w	r4, r6, #16
 8000d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d68:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d6c:	1d33      	adds	r3, r6, #4
 8000d6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f002 fd9d 	bl	80038b0 <USB_DevInit>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d005      	beq.n	8000d88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e00d      	b.n	8000da4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fde5 	bl	800496c <USB_DevDisconnect>

  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d101      	bne.n	8000dc8 <HAL_PCD_Start+0x1c>
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	e020      	b.n	8000e0a <HAL_PCD_Start+0x5e>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d109      	bne.n	8000dec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fd11 	bl	8003818 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 fd95 	bl	800492a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e12:	b590      	push	{r4, r7, lr}
 8000e14:	b08d      	sub	sp, #52	; 0x34
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fe53 	bl	8004ad4 <USB_GetMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 839d 	bne.w	8001570 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fdb7 	bl	80049ae <USB_ReadInterrupts>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8393 	beq.w	800156e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fdae 	bl	80049ae <USB_ReadInterrupts>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d107      	bne.n	8000e6c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f002 0202 	and.w	r2, r2, #2
 8000e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fd9c 	bl	80049ae <USB_ReadInterrupts>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b10      	cmp	r3, #16
 8000e7e:	d161      	bne.n	8000f44 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0210 	bic.w	r2, r2, #16
 8000e8e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	f003 020f 	and.w	r2, r3, #15
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	3304      	adds	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	0c5b      	lsrs	r3, r3, #17
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d124      	bne.n	8000f06 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d035      	beq.n	8000f34 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	6a38      	ldr	r0, [r7, #32]
 8000edc:	f003 fc02 	bl	80046e4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000eec:	441a      	add	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000efe:	441a      	add	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	619a      	str	r2, [r3, #24]
 8000f04:	e016      	b.n	8000f34 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	0c5b      	lsrs	r3, r3, #17
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d110      	bne.n	8000f34 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	6a38      	ldr	r0, [r7, #32]
 8000f1e:	f003 fbe1 	bl	80046e4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	699a      	ldr	r2, [r3, #24]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f2e:	441a      	add	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0210 	orr.w	r2, r2, #16
 8000f42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 fd30 	bl	80049ae <USB_ReadInterrupts>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f58:	d16e      	bne.n	8001038 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 fd36 	bl	80049d4 <USB_ReadDevAllOutEpInterrupt>
 8000f68:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f6a:	e062      	b.n	8001032 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d057      	beq.n	8001026 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 fd5b 	bl	8004a3c <USB_ReadDevOutEPInterrupt>
 8000f86:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00c      	beq.n	8000fac <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	015a      	lsls	r2, r3, #5
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fdb0 	bl	8001b0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00c      	beq.n	8000fd0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 feaa 	bl	8001d24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	015a      	lsls	r2, r3, #5
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2310      	movs	r3, #16
 8000fea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	f003 0320 	and.w	r3, r3, #32
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d008      	beq.n	8001008 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	015a      	lsls	r2, r3, #5
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001002:	461a      	mov	r2, r3
 8001004:	2320      	movs	r3, #32
 8001006:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d009      	beq.n	8001026 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	015a      	lsls	r2, r3, #5
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4413      	add	r3, r2
 800101a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800101e:	461a      	mov	r2, r3
 8001020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001024:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	3301      	adds	r3, #1
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102e:	085b      	lsrs	r3, r3, #1
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001034:	2b00      	cmp	r3, #0
 8001036:	d199      	bne.n	8000f6c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fcb6 	bl	80049ae <USB_ReadInterrupts>
 8001042:	4603      	mov	r3, r0
 8001044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800104c:	f040 80c0 	bne.w	80011d0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fcd7 	bl	8004a08 <USB_ReadDevAllInEpInterrupt>
 800105a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001060:	e0b2      	b.n	80011c8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a7 	beq.w	80011bc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fcfd 	bl	8004a78 <USB_ReadDevInEPInterrupt>
 800107e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d057      	beq.n	800113a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	2201      	movs	r2, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800109e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69f9      	ldr	r1, [r7, #28]
 80010a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80010aa:	4013      	ands	r3, r2
 80010ac:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	015a      	lsls	r2, r3, #5
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	4413      	add	r3, r2
 80010b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ba:	461a      	mov	r2, r3
 80010bc:	2301      	movs	r3, #1
 80010be:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d132      	bne.n	800112e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3348      	adds	r3, #72	; 0x48
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4403      	add	r3, r0
 80010e8:	3344      	adds	r3, #68	; 0x44
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4419      	add	r1, r3
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4403      	add	r3, r0
 80010fc:	3348      	adds	r3, #72	; 0x48
 80010fe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	2b00      	cmp	r3, #0
 8001104:	d113      	bne.n	800112e <HAL_PCD_IRQHandler+0x31c>
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3350      	adds	r3, #80	; 0x50
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d108      	bne.n	800112e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001126:	461a      	mov	r2, r3
 8001128:	2101      	movs	r1, #1
 800112a:	f003 fd05 	bl	8004b38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f009 fe44 	bl	800adc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	015a      	lsls	r2, r3, #5
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	4413      	add	r3, r2
 800114c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001150:	461a      	mov	r2, r3
 8001152:	2308      	movs	r3, #8
 8001154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800116c:	461a      	mov	r2, r3
 800116e:	2310      	movs	r3, #16
 8001170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	015a      	lsls	r2, r3, #5
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001188:	461a      	mov	r2, r3
 800118a:	2340      	movs	r3, #64	; 0x40
 800118c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	015a      	lsls	r2, r3, #5
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	4413      	add	r3, r2
 80011a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011a4:	461a      	mov	r2, r3
 80011a6:	2302      	movs	r3, #2
 80011a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fc1b 	bl	80019f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	3301      	adds	r3, #1
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	085b      	lsrs	r3, r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f47f af49 	bne.w	8001062 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fbea 	bl	80049ae <USB_ReadInterrupts>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80011e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011e4:	d122      	bne.n	800122c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001200:	2b01      	cmp	r3, #1
 8001202:	d108      	bne.n	8001216 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800120c:	2100      	movs	r1, #0
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fe26 	bl	8001e60 <HAL_PCDEx_LPM_Callback>
 8001214:	e002      	b.n	800121c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f009 fe40 	bl	800ae9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800122a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fbbc 	bl	80049ae <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800123c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001240:	d112      	bne.n	8001268 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f009 fdfc 	bl	800ae50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001266:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fb9e 	bl	80049ae <USB_ReadInterrupts>
 8001272:	4603      	mov	r3, r0
 8001274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800127c:	f040 80c7 	bne.w	800140e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2110      	movs	r1, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fc6c 	bl	8003b78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a4:	e056      	b.n	8001354 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012b2:	461a      	mov	r2, r3
 80012b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012bc:	015a      	lsls	r2, r3, #5
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ca:	0151      	lsls	r1, r2, #5
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	440a      	add	r2, r1
 80012d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012d8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	015a      	lsls	r2, r3, #5
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ea:	0151      	lsls	r1, r2, #5
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	440a      	add	r2, r1
 80012f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800130c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131e:	0151      	lsls	r1, r2, #5
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	440a      	add	r2, r1
 8001324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800132c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	015a      	lsls	r2, r3, #5
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133e:	0151      	lsls	r1, r2, #5
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	440a      	add	r2, r1
 8001344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001348:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800134c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	3301      	adds	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800135a:	429a      	cmp	r2, r3
 800135c:	d3a3      	bcc.n	80012a6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800136c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001370:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	2b00      	cmp	r3, #0
 8001378:	d016      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800138a:	f043 030b 	orr.w	r3, r3, #11
 800138e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a0:	f043 030b 	orr.w	r3, r3, #11
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	e015      	b.n	80013d4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ce:	f043 030b 	orr.w	r3, r3, #11
 80013d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013f8:	461a      	mov	r2, r3
 80013fa:	f003 fb9d 	bl	8004b38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800140c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 facb 	bl	80049ae <USB_ReadInterrupts>
 8001418:	4603      	mov	r3, r0
 800141a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800141e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001422:	d124      	bne.n	800146e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fb61 	bl	8004af0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f002 fc01 	bl	8003c3a <USB_GetDevSpeed>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	f001 f920 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 8001448:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4620      	mov	r0, r4
 8001454:	f002 f93e 	bl	80036d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f009 fcda 	bl	800ae12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800146c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa9b 	bl	80049ae <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b08      	cmp	r3, #8
 8001480:	d10a      	bne.n	8001498 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f009 fcb7 	bl	800adf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f002 0208 	and.w	r2, r2, #8
 8001496:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fa86 	bl	80049ae <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ac:	d10f      	bne.n	80014ce <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f009 fd0f 	bl	800aedc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80014cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f003 fa6b 	bl	80049ae <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014e2:	d10f      	bne.n	8001504 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f009 fce2 	bl	800aeb8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fa50 	bl	80049ae <USB_ReadInterrupts>
 800150e:	4603      	mov	r3, r0
 8001510:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001518:	d10a      	bne.n	8001530 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f009 fcf0 	bl	800af00 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800152e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fa3a 	bl	80049ae <USB_ReadInterrupts>
 800153a:	4603      	mov	r3, r0
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b04      	cmp	r3, #4
 8001542:	d115      	bne.n	8001570 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d002      	beq.n	800155c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f009 fce0 	bl	800af1c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e000      	b.n	8001570 <HAL_PCD_IRQHandler+0x75e>
      return;
 800156e:	bf00      	nop
    }
  }
}
 8001570:	3734      	adds	r7, #52	; 0x34
 8001572:	46bd      	mov	sp, r7
 8001574:	bd90      	pop	{r4, r7, pc}

08001576 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_PCD_SetAddress+0x1a>
 800158c:	2302      	movs	r3, #2
 800158e:	e013      	b.n	80015b8 <HAL_PCD_SetAddress+0x42>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	78fa      	ldrb	r2, [r7, #3]
 800159c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 f998 	bl	80048de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	460b      	mov	r3, r1
 80015d4:	803b      	strh	r3, [r7, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da0f      	bge.n	8001606 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 020f 	and.w	r2, r3, #15
 80015ec:	4613      	mov	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	1a9b      	subs	r3, r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	3338      	adds	r3, #56	; 0x38
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	3304      	adds	r3, #4
 80015fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	705a      	strb	r2, [r3, #1]
 8001604:	e00f      	b.n	8001626 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	f003 020f 	and.w	r2, r3, #15
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001632:	883a      	ldrh	r2, [r7, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	78ba      	ldrb	r2, [r7, #2]
 800163c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001650:	78bb      	ldrb	r3, [r7, #2]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d102      	bne.n	800165c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_PCD_EP_Open+0xaa>
 8001666:	2302      	movs	r3, #2
 8001668:	e00e      	b.n	8001688 <HAL_PCD_EP_Open+0xc8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fb03 	bl	8003c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001686:	7afb      	ldrb	r3, [r7, #11]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800169c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da0f      	bge.n	80016c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 020f 	and.w	r2, r3, #15
 80016aa:	4613      	mov	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3338      	adds	r3, #56	; 0x38
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	3304      	adds	r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	705a      	strb	r2, [r3, #1]
 80016c2:	e00f      	b.n	80016e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	f003 020f 	and.w	r2, r3, #15
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	3304      	adds	r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_PCD_EP_Close+0x6e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e00e      	b.n	800171c <HAL_PCD_EP_Close+0x8c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f002 fb41 	bl	8003d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	460b      	mov	r3, r1
 8001732:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	f003 020f 	and.w	r2, r3, #15
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	6979      	ldr	r1, [r7, #20]
 8001798:	f002 fe1c 	bl	80043d4 <USB_EP0StartXfer>
 800179c:	e008      	b.n	80017b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	6979      	ldr	r1, [r7, #20]
 80017ac:	f002 fbce 	bl	8003f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	f003 020f 	and.w	r2, r3, #15
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80017dc:	681b      	ldr	r3, [r3, #0]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	460b      	mov	r3, r1
 80017f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017fa:	7afb      	ldrb	r3, [r7, #11]
 80017fc:	f003 020f 	and.w	r2, r3, #15
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3338      	adds	r3, #56	; 0x38
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
 8001810:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2201      	movs	r2, #1
 8001828:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800182a:	7afb      	ldrb	r3, [r7, #11]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2da      	uxtb	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d102      	bne.n	8001844 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001844:	7afb      	ldrb	r3, [r7, #11]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	6979      	ldr	r1, [r7, #20]
 800185c:	f002 fdba 	bl	80043d4 <USB_EP0StartXfer>
 8001860:	e008      	b.n	8001874 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6979      	ldr	r1, [r7, #20]
 8001870:	f002 fb6c 	bl	8003f4c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	f003 020f 	and.w	r2, r3, #15
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	d901      	bls.n	800189c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e050      	b.n	800193e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800189c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	da0f      	bge.n	80018c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	f003 020f 	and.w	r2, r3, #15
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	3338      	adds	r3, #56	; 0x38
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	705a      	strb	r2, [r3, #1]
 80018c2:	e00d      	b.n	80018e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	1a9b      	subs	r3, r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_PCD_EP_SetStall+0x82>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e01e      	b.n	800193e <HAL_PCD_EP_SetStall+0xc0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 ff11 	bl	8004736 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	b2d9      	uxtb	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800192e:	461a      	mov	r2, r3
 8001930:	f003 f902 	bl	8004b38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d901      	bls.n	8001964 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e042      	b.n	80019ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da0f      	bge.n	800198c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	4613      	mov	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3338      	adds	r3, #56	; 0x38
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	3304      	adds	r3, #4
 8001982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
 800198a:	e00f      	b.n	80019ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	f003 020f 	and.w	r2, r3, #15
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_EP_ClrStall+0x86>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e00e      	b.n	80019ea <HAL_PCD_EP_ClrStall+0xa4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ff19 	bl	8004812 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	; 0x28
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3338      	adds	r3, #56	; 0x38
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d901      	bls.n	8001a2a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e06c      	b.n	8001b04 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d902      	bls.n	8001a46 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001a4e:	e02b      	b.n	8001aa8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d902      	bls.n	8001a6c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	68d9      	ldr	r1, [r3, #12]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4603      	mov	r3, r0
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f002 fdf5 	bl	800467a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	441a      	add	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d809      	bhi.n	8001ad2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d203      	bcs.n	8001ad2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1be      	bne.n	8001a50 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d811      	bhi.n	8001b02 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001afe:	4013      	ands	r3, r2
 8001b00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	333c      	adds	r3, #60	; 0x3c
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	015a      	lsls	r2, r3, #5
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f040 80a0 	bne.w	8001c84 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d015      	beq.n	8001b7a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a72      	ldr	r2, [pc, #456]	; (8001d1c <PCD_EP_OutXfrComplete_int+0x210>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	f240 80dd 	bls.w	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 80d7 	beq.w	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b70:	461a      	mov	r2, r3
 8001b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b76:	6093      	str	r3, [r2, #8]
 8001b78:	e0cb      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	015a      	lsls	r2, r3, #5
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b90:	461a      	mov	r2, r3
 8001b92:	2320      	movs	r3, #32
 8001b94:	6093      	str	r3, [r2, #8]
 8001b96:	e0bc      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 80b7 	bne.w	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <PCD_EP_OutXfrComplete_int+0x210>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d90f      	bls.n	8001bcc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	015a      	lsls	r2, r3, #5
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc8:	6093      	str	r3, [r2, #8]
 8001bca:	e0a2      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bde:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	0159      	lsls	r1, r3, #5
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	440b      	add	r3, r1
 8001be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001bf2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4403      	add	r3, r0
 8001c02:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c06:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4403      	add	r3, r0
 8001c2a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4419      	add	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4403      	add	r3, r0
 8001c40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c44:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d114      	bne.n	8001c76 <PCD_EP_OutXfrComplete_int+0x16a>
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d108      	bne.n	8001c76 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2101      	movs	r1, #1
 8001c72:	f002 ff61 	bl	8004b38 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f009 f885 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
 8001c82:	e046      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a26      	ldr	r2, [pc, #152]	; (8001d20 <PCD_EP_OutXfrComplete_int+0x214>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d124      	bne.n	8001cd6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ca8:	6093      	str	r3, [r2, #8]
 8001caa:	e032      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2320      	movs	r3, #32
 8001cc6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f009 f85c 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
 8001cd4:	e01d      	b.n	8001d12 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d114      	bne.n	8001d06 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d108      	bne.n	8001d06 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2100      	movs	r1, #0
 8001d02:	f002 ff19 	bl	8004b38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f009 f83d 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	4f54300a 	.word	0x4f54300a
 8001d20:	4f54310a 	.word	0x4f54310a

08001d24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	333c      	adds	r3, #60	; 0x3c
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4a15      	ldr	r2, [pc, #84]	; (8001dac <PCD_EP_OutSetupPacket_int+0x88>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d90e      	bls.n	8001d78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d009      	beq.n	8001d78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f008 fff5 	bl	800ad68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <PCD_EP_OutSetupPacket_int+0x88>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d90c      	bls.n	8001da0 <PCD_EP_OutSetupPacket_int+0x7c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d108      	bne.n	8001da0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	f002 fecc 	bl	8004b38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	4f54300a 	.word	0x4f54300a

08001db0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001dce:	883b      	ldrh	r3, [r7, #0]
 8001dd0:	0419      	lsls	r1, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
 8001ddc:	e028      	b.n	8001e30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e00d      	b.n	8001e0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3340      	adds	r3, #64	; 0x40
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4413      	add	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d3ec      	bcc.n	8001df2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	0418      	lsls	r0, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4302      	orrs	r2, r0
 8001e28:	3340      	adds	r3, #64	; 0x40
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	887a      	ldrh	r2, [r7, #2]
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e25b      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d112      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b99      	ldr	r3, [pc, #612]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d05b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x108>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d157      	bne.n	8001f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e236      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x74>
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a90      	ldr	r2, [pc, #576]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a87      	ldr	r2, [pc, #540]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001f10:	4b84      	ldr	r3, [pc, #528]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a83      	ldr	r2, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fb5c 	bl	80005ec <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe fb58 	bl	80005ec <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1fb      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fb48 	bl	80005ec <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7fe fb44 	bl	80005ec <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1e7      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0xe8>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1bb      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4952      	ldr	r1, [pc, #328]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe fafd 	bl	80005ec <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7fe faf9 	bl	80005ec <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e19c      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4940      	ldr	r1, [pc, #256]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fadc 	bl	80005ec <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7fe fad8 	bl	80005ec <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e17b      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d030      	beq.n	80020c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fabc 	bl	80005ec <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7fe fab8 	bl	80005ec <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e15b      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x200>
 8002096:	e015      	b.n	80020c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7fe faa5 	bl	80005ec <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7fe faa1 	bl	80005ec <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e144      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a0 	beq.w	8002212 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7fe fa67 	bl	80005ec <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e011      	b.n	8002146 <HAL_RCC_OscConfig+0x2ce>
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
 8002130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7fe fa5a 	bl	80005ec <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0fd      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_RCC_OscConfig+0x4d4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x2f0>
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a7c      	ldr	r2, [pc, #496]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 8002170:	4b77      	ldr	r3, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a76      	ldr	r2, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b74      	ldr	r3, [pc, #464]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a73      	ldr	r2, [pc, #460]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 800218a:	4b71      	ldr	r3, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a70      	ldr	r2, [pc, #448]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b6e      	ldr	r3, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a6d      	ldr	r2, [pc, #436]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7fe fa1f 	bl	80005ec <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fa1b 	bl	80005ec <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0bc      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b61      	ldr	r3, [pc, #388]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x33a>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fa09 	bl	80005ec <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fa05 	bl	80005ec <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0a6      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b56      	ldr	r3, [pc, #344]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8092 	beq.w	8002340 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221c:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d05c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d141      	bne.n	80022b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b48      	ldr	r3, [pc, #288]	; (8002354 <HAL_RCC_OscConfig+0x4dc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe f9d9 	bl	80005ec <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe f9d5 	bl	80005ec <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e078      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	4933      	ldr	r1, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002286:	4b33      	ldr	r3, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4dc>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe f9ae 	bl	80005ec <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe f9aa 	bl	80005ec <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e04d      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x41c>
 80022b2:	e045      	b.n	8002340 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x4dc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe f997 	bl	80005ec <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe f993 	bl	80005ec <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e036      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80022e0:	e02e      	b.n	8002340 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e029      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <HAL_RCC_OscConfig+0x4d8>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11c      	bne.n	800233c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d115      	bne.n	800233c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002316:	4013      	ands	r3, r2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800231c:	4293      	cmp	r3, r2
 800231e:	d10d      	bne.n	800233c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000
 8002350:	40023800 	.word	0x40023800
 8002354:	42470060 	.word	0x42470060

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe f8d0 	bl	80005ec <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe f8cc 	bl	80005ec <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	fa21 f303 	lsr.w	r3, r1, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f008 f8d4 	bl	800a6ac <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	0800c518 	.word	0x0800c518
 800251c:	20000174 	.word	0x20000174
 8002520:	20000000 	.word	0x20000000

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	2300      	movs	r3, #0
 8002534:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253a:	4b50      	ldr	r3, [pc, #320]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
 8002542:	2b04      	cmp	r3, #4
 8002544:	d007      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x32>
 8002546:	2b08      	cmp	r3, #8
 8002548:	d008      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x38>
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 808d 	bne.w	800266a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002552:	60bb      	str	r3, [r7, #8]
       break;
 8002554:	e08c      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002556:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 8002558:	60bb      	str	r3, [r7, #8]
      break;
 800255a:	e089      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002564:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002566:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d023      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	f04f 0400 	mov.w	r4, #0
 800257c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	ea03 0501 	and.w	r5, r3, r1
 8002588:	ea04 0602 	and.w	r6, r4, r2
 800258c:	4a3d      	ldr	r2, [pc, #244]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800258e:	fb02 f106 	mul.w	r1, r2, r6
 8002592:	2200      	movs	r2, #0
 8002594:	fb02 f205 	mul.w	r2, r2, r5
 8002598:	440a      	add	r2, r1
 800259a:	493a      	ldr	r1, [pc, #232]	; (8002684 <HAL_RCC_GetSysClockFreq+0x160>)
 800259c:	fba5 0101 	umull	r0, r1, r5, r1
 80025a0:	1853      	adds	r3, r2, r1
 80025a2:	4619      	mov	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4623      	mov	r3, r4
 80025ae:	f7fd fe67 	bl	8000280 <__aeabi_uldivmod>
 80025b2:	4603      	mov	r3, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e049      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	f04f 0400 	mov.w	r4, #0
 80025c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	ea03 0501 	and.w	r5, r3, r1
 80025d0:	ea04 0602 	and.w	r6, r4, r2
 80025d4:	4629      	mov	r1, r5
 80025d6:	4632      	mov	r2, r6
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f04f 0400 	mov.w	r4, #0
 80025e0:	0154      	lsls	r4, r2, #5
 80025e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025e6:	014b      	lsls	r3, r1, #5
 80025e8:	4619      	mov	r1, r3
 80025ea:	4622      	mov	r2, r4
 80025ec:	1b49      	subs	r1, r1, r5
 80025ee:	eb62 0206 	sbc.w	r2, r2, r6
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	0194      	lsls	r4, r2, #6
 80025fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002600:	018b      	lsls	r3, r1, #6
 8002602:	1a5b      	subs	r3, r3, r1
 8002604:	eb64 0402 	sbc.w	r4, r4, r2
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	00e2      	lsls	r2, r4, #3
 8002612:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002616:	00d9      	lsls	r1, r3, #3
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	195b      	adds	r3, r3, r5
 800261e:	eb44 0406 	adc.w	r4, r4, r6
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	02a2      	lsls	r2, r4, #10
 800262c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002630:	0299      	lsls	r1, r3, #10
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	4618      	mov	r0, r3
 8002638:	4621      	mov	r1, r4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 0400 	mov.w	r4, #0
 8002640:	461a      	mov	r2, r3
 8002642:	4623      	mov	r3, r4
 8002644:	f7fd fe1c 	bl	8000280 <__aeabi_uldivmod>
 8002648:	4603      	mov	r3, r0
 800264a:	460c      	mov	r4, r1
 800264c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_GetSysClockFreq+0x158>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	fbb2 f3f3 	udiv	r3, r2, r3
 8002666:	60bb      	str	r3, [r7, #8]
      break;
 8002668:	e002      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetSysClockFreq+0x15c>)
 800266c:	60bb      	str	r3, [r7, #8]
      break;
 800266e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002670:	68bb      	ldr	r3, [r7, #8]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	00f42400 	.word	0x00f42400
 8002684:	017d7840 	.word	0x017d7840

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCC_GetHCLKFreq+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000174 	.word	0x20000174

080026a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026a4:	f7ff fff0 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026a8:	4601      	mov	r1, r0
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	0b5b      	lsrs	r3, r3, #13
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	4a03      	ldr	r2, [pc, #12]	; (80026c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026bc:	4618      	mov	r0, r3
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	0800c528 	.word	0x0800c528

080026c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	220f      	movs	r2, #15
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_GetClockConfig+0x5c>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	08db      	lsrs	r3, r3, #3
 8002702:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetClockConfig+0x60>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40023c00 	.word	0x40023c00

0800272c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e056      	b.n	80027ec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f007 ff5f 	bl	800a61c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002774:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	0c1b      	lsrs	r3, r3, #16
 80027bc:	f003 0104 	and.w	r1, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_SPI_Transmit+0x22>
 8002812:	2302      	movs	r3, #2
 8002814:	e11e      	b.n	8002a54 <HAL_SPI_Transmit+0x260>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800281e:	f7fd fee5 	bl	80005ec <HAL_GetTick>
 8002822:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d002      	beq.n	800283a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002834:	2302      	movs	r3, #2
 8002836:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002838:	e103      	b.n	8002a42 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_SPI_Transmit+0x52>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800284a:	e0fa      	b.n	8002a42 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2203      	movs	r2, #3
 8002850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	88fa      	ldrh	r2, [r7, #6]
 800286a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002892:	d107      	bne.n	80028a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d007      	beq.n	80028c2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	d14b      	bne.n	8002964 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_Transmit+0xe6>
 80028d4:	8afb      	ldrh	r3, [r7, #22]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d13e      	bne.n	8002958 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	881a      	ldrh	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028fe:	e02b      	b.n	8002958 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d112      	bne.n	8002934 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	1c9a      	adds	r2, r3, #2
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002928:	b29b      	uxth	r3, r3
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	86da      	strh	r2, [r3, #54]	; 0x36
 8002932:	e011      	b.n	8002958 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002934:	f7fd fe5a 	bl	80005ec <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d803      	bhi.n	800294c <HAL_SPI_Transmit+0x158>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d102      	bne.n	8002952 <HAL_SPI_Transmit+0x15e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002956:	e074      	b.n	8002a42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ce      	bne.n	8002900 <HAL_SPI_Transmit+0x10c>
 8002962:	e04c      	b.n	80029fe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_SPI_Transmit+0x17e>
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d140      	bne.n	80029f4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002998:	e02c      	b.n	80029f4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d113      	bne.n	80029d0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80029ce:	e011      	b.n	80029f4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029d0:	f7fd fe0c 	bl	80005ec <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d803      	bhi.n	80029e8 <HAL_SPI_Transmit+0x1f4>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d102      	bne.n	80029ee <HAL_SPI_Transmit+0x1fa>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029f2:	e026      	b.n	8002a42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1cd      	bne.n	800299a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fba4 	bl	8003150 <SPI_EndRxTxTransaction>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e000      	b.n	8002a42 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002a40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a78:	d112      	bne.n	8002aa0 <HAL_SPI_Receive+0x44>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10e      	bne.n	8002aa0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2204      	movs	r2, #4
 8002a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8e9 	bl	8002c6e <HAL_SPI_TransmitReceive>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	e0e2      	b.n	8002c66 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_SPI_Receive+0x52>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e0db      	b.n	8002c66 <HAL_SPI_Receive+0x20a>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ab6:	f7fd fd99 	bl	80005ec <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d002      	beq.n	8002ace <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002acc:	e0c2      	b.n	8002c54 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_SPI_Receive+0x7e>
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ade:	e0b9      	b.n	8002c54 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b26:	d107      	bne.n	8002b38 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d007      	beq.n	8002b56 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d162      	bne.n	8002c24 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b5e:	e02e      	b.n	8002bbe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f103 020c 	add.w	r2, r3, #12
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7a:	7812      	ldrb	r2, [r2, #0]
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b98:	e011      	b.n	8002bbe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b9a:	f7fd fd27 	bl	80005ec <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d803      	bhi.n	8002bb2 <HAL_SPI_Receive+0x156>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d102      	bne.n	8002bb8 <HAL_SPI_Receive+0x15c>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bbc:	e04a      	b.n	8002c54 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1cb      	bne.n	8002b60 <HAL_SPI_Receive+0x104>
 8002bc8:	e031      	b.n	8002c2e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d113      	bne.n	8002c00 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	b292      	uxth	r2, r2
 8002be4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bfe:	e011      	b.n	8002c24 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c00:	f7fd fcf4 	bl	80005ec <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d803      	bhi.n	8002c18 <HAL_SPI_Receive+0x1bc>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d102      	bne.n	8002c1e <HAL_SPI_Receive+0x1c2>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c22:	e017      	b.n	8002c54 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1cd      	bne.n	8002bca <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	6839      	ldr	r1, [r7, #0]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa27 	bl	8003086 <SPI_EndRxTransaction>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
 8002c50:	e000      	b.n	8002c54 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08c      	sub	sp, #48	; 0x30
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x26>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e18a      	b.n	8002faa <HAL_SPI_TransmitReceive+0x33c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c9c:	f7fd fca6 	bl	80005ec <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00f      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x70>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc4:	d107      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x68>
 8002cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d003      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cdc:	e15b      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x82>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x82>
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d103      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cf6:	e14e      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d003      	beq.n	8002d0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2205      	movs	r2, #5
 8002d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	887a      	ldrh	r2, [r7, #2]
 8002d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d007      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d68:	d178      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_SPI_TransmitReceive+0x10a>
 8002d72:	8b7b      	ldrh	r3, [r7, #26]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d166      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d9c:	e053      	b.n	8002e46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d11b      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x176>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x176>
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d113      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d119      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x1b8>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d014      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	b292      	uxth	r2, r2
 8002e08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	1c9a      	adds	r2, r3, #2
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e22:	2301      	movs	r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e26:	f7fd fbe1 	bl	80005ec <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d807      	bhi.n	8002e46 <HAL_SPI_TransmitReceive+0x1d8>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d003      	beq.n	8002e46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e44:	e0a7      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1a6      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x130>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1a1      	bne.n	8002d9e <HAL_SPI_TransmitReceive+0x130>
 8002e5a:	e07c      	b.n	8002f56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_SPI_TransmitReceive+0x1fc>
 8002e64:	8b7b      	ldrh	r3, [r7, #26]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d16b      	bne.n	8002f42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	7812      	ldrb	r2, [r2, #0]
 8002e76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e90:	e057      	b.n	8002f42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d11c      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x26c>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x26c>
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d114      	bne.n	8002eda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d119      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x2ae>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d014      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f1c:	f7fd fb66 	bl	80005ec <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d803      	bhi.n	8002f34 <HAL_SPI_TransmitReceive+0x2c6>
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d102      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x2cc>
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f40:	e029      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1a2      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x224>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d19d      	bne.n	8002e92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f8f8 	bl	8003150 <SPI_EndRxTxTransaction>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f72:	e010      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	e000      	b.n	8002f96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3730      	adds	r7, #48	; 0x30
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc2:	e04c      	b.n	800305e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d048      	beq.n	800305e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fcc:	f7fd fb0e 	bl	80005ec <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d902      	bls.n	8002fe2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d13d      	bne.n	800305e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffa:	d111      	bne.n	8003020 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003004:	d004      	beq.n	8003010 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d107      	bne.n	8003020 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003028:	d10f      	bne.n	800304a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	429a      	cmp	r2, r3
 800307a:	d1a3      	bne.n	8002fc4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af02      	add	r7, sp, #8
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309a:	d111      	bne.n	80030c0 <SPI_EndRxTransaction+0x3a>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a4:	d004      	beq.n	80030b0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d107      	bne.n	80030c0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c8:	d12a      	bne.n	8003120 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d012      	beq.n	80030fa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff67 	bl	8002fb2 <SPI_WaitFlagStateUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02d      	beq.n	8003146 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e026      	b.n	8003148 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2200      	movs	r2, #0
 8003102:	2101      	movs	r1, #1
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ff54 	bl	8002fb2 <SPI_WaitFlagStateUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01a      	beq.n	8003146 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e013      	b.n	8003148 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	2101      	movs	r1, #1
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff41 	bl	8002fb2 <SPI_WaitFlagStateUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313a:	f043 0220 	orr.w	r2, r3, #32
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e000      	b.n	8003148 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800315c:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <SPI_EndRxTxTransaction+0x7c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <SPI_EndRxTxTransaction+0x80>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0d5b      	lsrs	r3, r3, #21
 8003168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800317a:	d112      	bne.n	80031a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2200      	movs	r2, #0
 8003184:	2180      	movs	r1, #128	; 0x80
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff ff13 	bl	8002fb2 <SPI_WaitFlagStateUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e00f      	b.n	80031c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d0f2      	beq.n	80031a2 <SPI_EndRxTxTransaction+0x52>
 80031bc:	e000      	b.n	80031c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80031be:	bf00      	nop
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000174 	.word	0x20000174
 80031d0:	165e9f81 	.word	0x165e9f81

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e01d      	b.n	8003222 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f815 	bl	800322a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 f968 	bl	80034e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b06      	cmp	r3, #6
 8003266:	d007      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0201 	orr.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d122      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d11b      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f06f 0202 	mvn.w	r2, #2
 80032b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f8ee 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80032ce:	e005      	b.n	80032dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8e0 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8f1 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d122      	bne.n	8003336 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d11b      	bne.n	8003336 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0204 	mvn.w	r2, #4
 8003306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f8c4 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 8003322:	e005      	b.n	8003330 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8b6 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8c7 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b08      	cmp	r3, #8
 8003342:	d122      	bne.n	800338a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b08      	cmp	r3, #8
 8003350:	d11b      	bne.n	800338a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0208 	mvn.w	r2, #8
 800335a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f89a 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 8003376:	e005      	b.n	8003384 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f88c 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f89d 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d122      	bne.n	80033de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0310 	and.w	r3, r3, #16
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d11b      	bne.n	80033de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f06f 0210 	mvn.w	r2, #16
 80033ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2208      	movs	r2, #8
 80033b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f870 	bl	80034aa <HAL_TIM_IC_CaptureCallback>
 80033ca:	e005      	b.n	80033d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f862 	bl	8003496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f873 	bl	80034be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d10e      	bne.n	800340a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f06f 0201 	mvn.w	r2, #1
 8003402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f006 fcbf 	bl	8009d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b80      	cmp	r3, #128	; 0x80
 8003416:	d10e      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b80      	cmp	r3, #128	; 0x80
 8003424:	d107      	bne.n	8003436 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800342e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f8e3 	bl	80035fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d10e      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d107      	bne.n	8003462 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800345a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f838 	bl	80034d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b20      	cmp	r3, #32
 800346e:	d10e      	bne.n	800348e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d107      	bne.n	800348e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0220 	mvn.w	r2, #32
 8003486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8ad 	bl	80035e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a34      	ldr	r2, [pc, #208]	; (80035cc <TIM_Base_SetConfig+0xe4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00f      	beq.n	8003520 <TIM_Base_SetConfig+0x38>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0x38>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a31      	ldr	r2, [pc, #196]	; (80035d0 <TIM_Base_SetConfig+0xe8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x38>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <TIM_Base_SetConfig+0xec>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x38>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <TIM_Base_SetConfig+0xf0>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d108      	bne.n	8003532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a25      	ldr	r2, [pc, #148]	; (80035cc <TIM_Base_SetConfig+0xe4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01b      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003540:	d017      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <TIM_Base_SetConfig+0xe8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a21      	ldr	r2, [pc, #132]	; (80035d4 <TIM_Base_SetConfig+0xec>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00f      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <TIM_Base_SetConfig+0xf0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00b      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <TIM_Base_SetConfig+0xf4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <TIM_Base_SetConfig+0xf8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <TIM_Base_SetConfig+0xfc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d108      	bne.n	8003584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <TIM_Base_SetConfig+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d103      	bne.n	80035b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	615a      	str	r2, [r3, #20]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000
 80035e0:	40014400 	.word	0x40014400
 80035e4:	40014800 	.word	0x40014800

080035e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003610:	b084      	sub	sp, #16
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	f107 001c 	add.w	r0, r7, #28
 800361e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	d122      	bne.n	800366e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800363c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f001 fac6 	bl	8004bf4 <USB_CoreReset>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e01a      	b.n	80036a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f001 faba 	bl	8004bf4 <USB_CoreReset>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
 8003696:	e005      	b.n	80036a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10b      	bne.n	80036c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f043 0206 	orr.w	r2, r3, #6
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036ce:	b004      	add	sp, #16
 80036d0:	4770      	bx	lr
	...

080036d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d165      	bne.n	80037b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4a41      	ldr	r2, [pc, #260]	; (80037f0 <USB_SetTurnaroundTime+0x11c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d906      	bls.n	80036fe <USB_SetTurnaroundTime+0x2a>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <USB_SetTurnaroundTime+0x120>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d802      	bhi.n	80036fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80036f8:	230f      	movs	r3, #15
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e062      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4a3c      	ldr	r2, [pc, #240]	; (80037f4 <USB_SetTurnaroundTime+0x120>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d906      	bls.n	8003714 <USB_SetTurnaroundTime+0x40>
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4a3b      	ldr	r2, [pc, #236]	; (80037f8 <USB_SetTurnaroundTime+0x124>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d802      	bhi.n	8003714 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800370e:	230e      	movs	r3, #14
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e057      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4a38      	ldr	r2, [pc, #224]	; (80037f8 <USB_SetTurnaroundTime+0x124>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d906      	bls.n	800372a <USB_SetTurnaroundTime+0x56>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4a37      	ldr	r2, [pc, #220]	; (80037fc <USB_SetTurnaroundTime+0x128>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d802      	bhi.n	800372a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003724:	230d      	movs	r3, #13
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e04c      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a33      	ldr	r2, [pc, #204]	; (80037fc <USB_SetTurnaroundTime+0x128>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d906      	bls.n	8003740 <USB_SetTurnaroundTime+0x6c>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4a32      	ldr	r2, [pc, #200]	; (8003800 <USB_SetTurnaroundTime+0x12c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d802      	bhi.n	8003740 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800373a:	230c      	movs	r3, #12
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e041      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <USB_SetTurnaroundTime+0x12c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d906      	bls.n	8003756 <USB_SetTurnaroundTime+0x82>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4a2e      	ldr	r2, [pc, #184]	; (8003804 <USB_SetTurnaroundTime+0x130>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d802      	bhi.n	8003756 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003750:	230b      	movs	r3, #11
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	e036      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <USB_SetTurnaroundTime+0x130>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d906      	bls.n	800376c <USB_SetTurnaroundTime+0x98>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <USB_SetTurnaroundTime+0x134>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d802      	bhi.n	800376c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003766:	230a      	movs	r3, #10
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e02b      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a26      	ldr	r2, [pc, #152]	; (8003808 <USB_SetTurnaroundTime+0x134>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d906      	bls.n	8003782 <USB_SetTurnaroundTime+0xae>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4a25      	ldr	r2, [pc, #148]	; (800380c <USB_SetTurnaroundTime+0x138>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d802      	bhi.n	8003782 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800377c:	2309      	movs	r3, #9
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e020      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a21      	ldr	r2, [pc, #132]	; (800380c <USB_SetTurnaroundTime+0x138>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d906      	bls.n	8003798 <USB_SetTurnaroundTime+0xc4>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	4a20      	ldr	r2, [pc, #128]	; (8003810 <USB_SetTurnaroundTime+0x13c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d802      	bhi.n	8003798 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003792:	2308      	movs	r3, #8
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e015      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <USB_SetTurnaroundTime+0x13c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d906      	bls.n	80037ae <USB_SetTurnaroundTime+0xda>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <USB_SetTurnaroundTime+0x140>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d802      	bhi.n	80037ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037a8:	2307      	movs	r3, #7
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e00a      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037ae:	2306      	movs	r3, #6
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e007      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80037ba:	2309      	movs	r3, #9
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e001      	b.n	80037c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037c0:	2309      	movs	r3, #9
 80037c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037dc:	431a      	orrs	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	00d8acbf 	.word	0x00d8acbf
 80037f4:	00e4e1bf 	.word	0x00e4e1bf
 80037f8:	00f423ff 	.word	0x00f423ff
 80037fc:	0106737f 	.word	0x0106737f
 8003800:	011a499f 	.word	0x011a499f
 8003804:	01312cff 	.word	0x01312cff
 8003808:	014ca43f 	.word	0x014ca43f
 800380c:	016e35ff 	.word	0x016e35ff
 8003810:	01a6ab1f 	.word	0x01a6ab1f
 8003814:	01e847ff 	.word	0x01e847ff

08003818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 0201 	bic.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d106      	bne.n	8003888 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	e00b      	b.n	80038a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	e001      	b.n	80038a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e003      	b.n	80038a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038a0:	2032      	movs	r0, #50	; 0x32
 80038a2:	f7fc feaf 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b0:	b084      	sub	sp, #16
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e009      	b.n	80038e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3340      	adds	r3, #64	; 0x40
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	2200      	movs	r2, #0
 80038dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	3301      	adds	r3, #1
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b0e      	cmp	r3, #14
 80038e8:	d9f2      	bls.n	80038d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d11c      	bne.n	800392a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
 8003928:	e00b      	b.n	8003942 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003948:	461a      	mov	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	4619      	mov	r1, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800395c:	461a      	mov	r2, r3
 800395e:	680b      	ldr	r3, [r1, #0]
 8003960:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	2b01      	cmp	r3, #1
 8003966:	d10c      	bne.n	8003982 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f949 	bl	8003c08 <USB_SetDevSpeed>
 8003976:	e008      	b.n	800398a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003978:	2101      	movs	r1, #1
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f944 	bl	8003c08 <USB_SetDevSpeed>
 8003980:	e003      	b.n	800398a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003982:	2103      	movs	r1, #3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f93f 	bl	8003c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800398a:	2110      	movs	r1, #16
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8f3 	bl	8003b78 <USB_FlushTxFifo>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f911 	bl	8003bc4 <USB_FlushRxFifo>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	461a      	mov	r2, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ca:	461a      	mov	r2, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e043      	b.n	8003a5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ec:	d118      	bne.n	8003a20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	461a      	mov	r2, r3
 8003a02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e013      	b.n	8003a32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a16:	461a      	mov	r2, r3
 8003a18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e008      	b.n	8003a32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3e:	461a      	mov	r2, r3
 8003a40:	2300      	movs	r3, #0
 8003a42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d3b7      	bcc.n	80039d6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	e043      	b.n	8003af4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a82:	d118      	bne.n	8003ab6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	461a      	mov	r2, r3
 8003a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e013      	b.n	8003ac8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e008      	b.n	8003ac8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3301      	adds	r3, #1
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d3b7      	bcc.n	8003a6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	699a      	ldr	r2, [r3, #24]
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <USB_DevInit+0x2c4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f043 0208 	orr.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b5c:	f043 0304 	orr.w	r3, r3, #4
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b70:	b004      	add	sp, #16
 8003b72:	4770      	bx	lr
 8003b74:	803c3800 	.word	0x803c3800

08003b78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	f043 0220 	orr.w	r2, r3, #32
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a09      	ldr	r2, [pc, #36]	; (8003bc0 <USB_FlushTxFifo+0x48>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e006      	b.n	8003bb2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d0f0      	beq.n	8003b92 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3714      	adds	r7, #20
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	00030d40 	.word	0x00030d40

08003bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <USB_FlushRxFifo+0x40>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d901      	bls.n	8003be8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e006      	b.n	8003bf6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d0f0      	beq.n	8003bd6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	00030d40 	.word	0x00030d40

08003c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0306 	and.w	r3, r3, #6
 8003c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	e00a      	b.n	8003c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d002      	beq.n	8003c6c <USB_GetDevSpeed+0x32>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b06      	cmp	r3, #6
 8003c6a:	d102      	bne.n	8003c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	75fb      	strb	r3, [r7, #23]
 8003c70:	e001      	b.n	8003c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003c72:	230f      	movs	r3, #15
 8003c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d13a      	bne.n	8003d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	68f9      	ldr	r1, [r7, #12]
 8003cba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d155      	bne.n	8003d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	78db      	ldrb	r3, [r3, #3]
 8003cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	059b      	lsls	r3, r3, #22
 8003cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	e036      	b.n	8003d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	68f9      	ldr	r1, [r7, #12]
 8003d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11a      	bne.n	8003d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	78db      	ldrb	r3, [r3, #3]
 8003d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d161      	bne.n	8003e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dc6:	d11f      	bne.n	8003e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e28:	4013      	ands	r3, r2
 8003e2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	0159      	lsls	r1, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <USB_DeactivateEndpoint+0x1b0>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
 8003e72:	e060      	b.n	8003f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8a:	d11f      	bne.n	8003ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	0151      	lsls	r1, r2, #5
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	440a      	add	r2, r1
 8003ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee2:	041b      	lsls	r3, r3, #16
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eec:	4013      	ands	r3, r2
 8003eee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f10:	4013      	ands	r3, r2
 8003f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0159      	lsls	r1, r3, #5
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <USB_DeactivateEndpoint+0x1b4>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	ec337800 	.word	0xec337800
 8003f48:	eff37800 	.word	0xeff37800

08003f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	f040 815c 	bne.w	8004226 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d132      	bne.n	8003fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	0151      	lsls	r1, r2, #5
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	0151      	lsls	r1, r2, #5
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	440a      	add	r2, r1
 8003fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	0cdb      	lsrs	r3, r3, #19
 8003fd6:	04db      	lsls	r3, r3, #19
 8003fd8:	6113      	str	r3, [r2, #16]
 8003fda:	e074      	b.n	80040c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	0cdb      	lsrs	r3, r3, #19
 8003ff8:	04db      	lsls	r3, r3, #19
 8003ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800401a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800401e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6959      	ldr	r1, [r3, #20]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	440b      	add	r3, r1
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004042:	04d9      	lsls	r1, r3, #19
 8004044:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <USB_EPStartXfer+0x370>)
 8004046:	400b      	ands	r3, r1
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	0148      	lsls	r0, r1, #5
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	4401      	add	r1, r0
 8004050:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004054:	4313      	orrs	r3, r2
 8004056:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	691a      	ldr	r2, [r3, #16]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	69b9      	ldr	r1, [r7, #24]
 8004070:	0148      	lsls	r0, r1, #5
 8004072:	69f9      	ldr	r1, [r7, #28]
 8004074:	4401      	add	r1, r0
 8004076:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800407a:	4313      	orrs	r3, r2
 800407c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	78db      	ldrb	r3, [r3, #3]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11f      	bne.n	80040c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	0151      	lsls	r1, r2, #5
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	440a      	add	r2, r1
 800409c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	0151      	lsls	r1, r2, #5
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	440a      	add	r2, r1
 80040bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d14b      	bne.n	8004164 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d009      	beq.n	80040e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	78db      	ldrb	r3, [r3, #3]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d128      	bne.n	8004142 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d110      	bne.n	8004122 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	0151      	lsls	r1, r2, #5
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	440a      	add	r2, r1
 8004116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e00f      	b.n	8004142 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	e12f      	b.n	80043c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004182:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	78db      	ldrb	r3, [r3, #3]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d015      	beq.n	80041b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8117 	beq.w	80043c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	2101      	movs	r1, #1
 80041a8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ac:	69f9      	ldr	r1, [r7, #28]
 80041ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b2:	4313      	orrs	r3, r2
 80041b4:	634b      	str	r3, [r1, #52]	; 0x34
 80041b6:	e105      	b.n	80043c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e00f      	b.n	800420a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	68d9      	ldr	r1, [r3, #12]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	b298      	uxth	r0, r3
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	4603      	mov	r3, r0
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fa2b 	bl	800467a <USB_WritePacket>
 8004224:	e0ce      	b.n	80043c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	0cdb      	lsrs	r3, r3, #19
 8004242:	04db      	lsls	r3, r3, #19
 8004244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	0151      	lsls	r1, r2, #5
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	440a      	add	r2, r1
 800425c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004268:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d126      	bne.n	80042c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004288:	69b9      	ldr	r1, [r7, #24]
 800428a:	0148      	lsls	r0, r1, #5
 800428c:	69f9      	ldr	r1, [r7, #28]
 800428e:	4401      	add	r1, r0
 8004290:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004294:	4313      	orrs	r3, r2
 8004296:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b6:	6113      	str	r3, [r2, #16]
 80042b8:	e036      	b.n	8004328 <USB_EPStartXfer+0x3dc>
 80042ba:	bf00      	nop
 80042bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	695a      	ldr	r2, [r3, #20]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	1e5a      	subs	r2, r3, #1
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	8afb      	ldrh	r3, [r7, #22]
 80042e6:	04d9      	lsls	r1, r3, #19
 80042e8:	4b39      	ldr	r3, [pc, #228]	; (80043d0 <USB_EPStartXfer+0x484>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	0148      	lsls	r0, r1, #5
 80042f0:	69f9      	ldr	r1, [r7, #28]
 80042f2:	4401      	add	r1, r0
 80042f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042f8:	4313      	orrs	r3, r2
 80042fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	8af9      	ldrh	r1, [r7, #22]
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004318:	69b9      	ldr	r1, [r7, #24]
 800431a:	0148      	lsls	r0, r1, #5
 800431c:	69f9      	ldr	r1, [r7, #28]
 800431e:	4401      	add	r1, r0
 8004320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004324:	4313      	orrs	r3, r2
 8004326:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d10d      	bne.n	800434a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	68d9      	ldr	r1, [r3, #12]
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	460a      	mov	r2, r1
 8004348:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	78db      	ldrb	r3, [r3, #3]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d128      	bne.n	80043a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d110      	bne.n	8004384 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e00f      	b.n	80043a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	0151      	lsls	r1, r2, #5
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	440a      	add	r2, r1
 800439a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800439e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	1ff80000 	.word	0x1ff80000

080043d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	4613      	mov	r3, r2
 80043e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	f040 80cd 	bne.w	8004590 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d132      	bne.n	8004464 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	440a      	add	r2, r1
 8004414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004418:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800441c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	0151      	lsls	r1, r2, #5
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	440a      	add	r2, r1
 8004438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	0151      	lsls	r1, r2, #5
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	440a      	add	r2, r1
 8004458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445c:	0cdb      	lsrs	r3, r3, #19
 800445e:	04db      	lsls	r3, r3, #19
 8004460:	6113      	str	r3, [r2, #16]
 8004462:	e04e      	b.n	8004502 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	440a      	add	r2, r1
 800447a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800447e:	0cdb      	lsrs	r3, r3, #19
 8004480:	04db      	lsls	r3, r3, #19
 8004482:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	0151      	lsls	r1, r2, #5
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	440a      	add	r2, r1
 80044d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	6939      	ldr	r1, [r7, #16]
 80044f4:	0148      	lsls	r0, r1, #5
 80044f6:	6979      	ldr	r1, [r7, #20]
 80044f8:	4401      	add	r1, r0
 80044fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044fe:	4313      	orrs	r3, r2
 8004500:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d11e      	bne.n	8004546 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e092      	b.n	800466c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004564:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07e      	beq.n	800466c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	2101      	movs	r1, #1
 8004580:	fa01 f303 	lsl.w	r3, r1, r3
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800458a:	4313      	orrs	r3, r2
 800458c:	634b      	str	r3, [r1, #52]	; 0x34
 800458e:	e06d      	b.n	800466c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045aa:	0cdb      	lsrs	r3, r3, #19
 80045ac:	04db      	lsls	r3, r3, #19
 80045ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004602:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	6939      	ldr	r1, [r7, #16]
 800461c:	0148      	lsls	r0, r1, #5
 800461e:	6979      	ldr	r1, [r7, #20]
 8004620:	4401      	add	r1, r0
 8004622:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004626:	4313      	orrs	r3, r2
 8004628:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10d      	bne.n	800464c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d009      	beq.n	800464c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	68d9      	ldr	r1, [r3, #12]
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	460a      	mov	r2, r1
 800464a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004666:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800466a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800467a:	b480      	push	{r7}
 800467c:	b089      	sub	sp, #36	; 0x24
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	4611      	mov	r1, r2
 8004686:	461a      	mov	r2, r3
 8004688:	460b      	mov	r3, r1
 800468a:	71fb      	strb	r3, [r7, #7]
 800468c:	4613      	mov	r3, r2
 800468e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004698:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11a      	bne.n	80046d6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046a0:	88bb      	ldrh	r3, [r7, #4]
 80046a2:	3303      	adds	r3, #3
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e00f      	b.n	80046ce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	031a      	lsls	r2, r3, #12
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ba:	461a      	mov	r2, r3
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3304      	adds	r3, #4
 80046c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3eb      	bcc.n	80046ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3724      	adds	r7, #36	; 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b089      	sub	sp, #36	; 0x24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	3303      	adds	r3, #3
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e00b      	b.n	8004720 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	601a      	str	r2, [r3, #0]
    pDest++;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3304      	adds	r3, #4
 8004718:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	3301      	adds	r3, #1
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	429a      	cmp	r2, r3
 8004726:	d3ef      	bcc.n	8004708 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004728:	69fb      	ldr	r3, [r7, #28]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	; 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	785b      	ldrb	r3, [r3, #1]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d12c      	bne.n	80047ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	db12      	blt.n	800478a <USB_EPSetStall+0x54>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00f      	beq.n	800478a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	440a      	add	r2, r1
 8004780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004784:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004788:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e02b      	b.n	8004804 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db12      	blt.n	80047e4 <USB_EPSetStall+0xae>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00f      	beq.n	80047e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	0151      	lsls	r1, r2, #5
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	440a      	add	r2, r1
 80047da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004802:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d128      	bne.n	8004880 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004848:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800484c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d003      	beq.n	800485e <USB_EPClearStall+0x4c>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	78db      	ldrb	r3, [r3, #3]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d138      	bne.n	80048d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	0151      	lsls	r1, r2, #5
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	440a      	add	r2, r1
 8004874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e027      	b.n	80048d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800489e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	78db      	ldrb	r3, [r3, #3]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d003      	beq.n	80048b0 <USB_EPClearStall+0x9e>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	78db      	ldrb	r3, [r3, #3]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d10f      	bne.n	80048d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004900:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004958:	f023 0302 	bic.w	r3, r3, #2
 800495c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049c6:	68fb      	ldr	r3, [r7, #12]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	0c1b      	lsrs	r3, r3, #16
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	b29b      	uxth	r3, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3714      	adds	r7, #20
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	4013      	ands	r3, r2
 8004a68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	01db      	lsls	r3, r3, #7
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b0e:	f023 0307 	bic.w	r3, r3, #7
 8004b12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	460b      	mov	r3, r1
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	333c      	adds	r3, #60	; 0x3c
 8004b4e:	3304      	adds	r3, #4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <USB_EP0_OutStart+0xb8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d90a      	bls.n	8004b72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6c:	d101      	bne.n	8004b72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e037      	b.n	8004be2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f043 0318 	orr.w	r3, r3, #24
 8004ba4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004bb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004bba:	7afb      	ldrb	r3, [r7, #11]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10f      	bne.n	8004be0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	4f54300a 	.word	0x4f54300a

08004bf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <USB_CoreReset+0x64>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e01b      	b.n	8004c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	daf2      	bge.n	8004c00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <USB_CoreReset+0x64>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e006      	b.n	8004c4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d0f0      	beq.n	8004c2a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	00030d40 	.word	0x00030d40

08004c5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004c68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004c6c:	f006 feac 	bl	800b9c8 <malloc>
 8004c70:	4603      	mov	r3, r0
 8004c72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e066      	b.n	8004d54 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	7c1b      	ldrb	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d119      	bne.n	8004cca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	2181      	movs	r1, #129	; 0x81
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f006 f9b1 	bl	800b006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cae:	2202      	movs	r2, #2
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f006 f9a7 	bl	800b006 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004cc8:	e016      	b.n	8004cf8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cca:	2340      	movs	r3, #64	; 0x40
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2181      	movs	r1, #129	; 0x81
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f006 f998 	bl	800b006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	2202      	movs	r2, #2
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f006 f98f 	bl	800b006 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2210      	movs	r2, #16
 8004cf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	2182      	movs	r1, #130	; 0x82
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f006 f981 	bl	800b006 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	7c1b      	ldrb	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d109      	bne.n	8004d42 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d38:	2101      	movs	r1, #1
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f006 fa52 	bl	800b1e4 <USBD_LL_PrepareReceive>
 8004d40:	e007      	b.n	8004d52 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d48:	2340      	movs	r3, #64	; 0x40
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f006 fa49 	bl	800b1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004d6c:	2181      	movs	r1, #129	; 0x81
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f006 f96f 	bl	800b052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f006 f968 	bl	800b052 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004d8a:	2182      	movs	r1, #130	; 0x82
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f006 f960 	bl	800b052 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f006 fe0b 	bl	800b9d8 <free>
    pdev->pClassData = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004de4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03a      	beq.n	8004e74 <USBD_CDC_Setup+0xa0>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	f040 8097 	bne.w	8004f32 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	88db      	ldrh	r3, [r3, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d029      	beq.n	8004e60 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da11      	bge.n	8004e3a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004e22:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	88d2      	ldrh	r2, [r2, #6]
 8004e28:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e2a:	6939      	ldr	r1, [r7, #16]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	88db      	ldrh	r3, [r3, #6]
 8004e30:	461a      	mov	r2, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 fa9d 	bl	8006372 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004e38:	e082      	b.n	8004f40 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	785a      	ldrb	r2, [r3, #1]
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	88db      	ldrh	r3, [r3, #6]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004e50:	6939      	ldr	r1, [r7, #16]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	88db      	ldrh	r3, [r3, #6]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fab6 	bl	80063ca <USBD_CtlPrepareRx>
    break;
 8004e5e:	e06f      	b.n	8004f40 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	7850      	ldrb	r0, [r2, #1]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	6839      	ldr	r1, [r7, #0]
 8004e70:	4798      	blx	r3
    break;
 8004e72:	e065      	b.n	8004f40 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b0b      	cmp	r3, #11
 8004e7a:	d84f      	bhi.n	8004f1c <USBD_CDC_Setup+0x148>
 8004e7c:	a201      	add	r2, pc, #4	; (adr r2, 8004e84 <USBD_CDC_Setup+0xb0>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004eb5 	.word	0x08004eb5
 8004e88:	08004f2b 	.word	0x08004f2b
 8004e8c:	08004f1d 	.word	0x08004f1d
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f1d 	.word	0x08004f1d
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08004f1d 	.word	0x08004f1d
 8004ea0:	08004f1d 	.word	0x08004f1d
 8004ea4:	08004f1d 	.word	0x08004f1d
 8004ea8:	08004f1d 	.word	0x08004f1d
 8004eac:	08004edd 	.word	0x08004edd
 8004eb0:	08004f05 	.word	0x08004f05
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d107      	bne.n	8004ece <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 fa53 	bl	8006372 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ecc:	e030      	b.n	8004f30 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 f9dd 	bl	8006290 <USBD_CtlError>
        ret = USBD_FAIL;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eda:	e029      	b.n	8004f30 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d107      	bne.n	8004ef6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004ee6:	f107 030f 	add.w	r3, r7, #15
 8004eea:	2201      	movs	r2, #1
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 fa3f 	bl	8006372 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004ef4:	e01c      	b.n	8004f30 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 f9c9 	bl	8006290 <USBD_CtlError>
        ret = USBD_FAIL;
 8004efe:	2303      	movs	r3, #3
 8004f00:	75fb      	strb	r3, [r7, #23]
      break;
 8004f02:	e015      	b.n	8004f30 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d00f      	beq.n	8004f2e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f9bd 	bl	8006290 <USBD_CtlError>
        ret = USBD_FAIL;
 8004f16:	2303      	movs	r3, #3
 8004f18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004f1a:	e008      	b.n	8004f2e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 f9b6 	bl	8006290 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	75fb      	strb	r3, [r7, #23]
      break;
 8004f28:	e002      	b.n	8004f30 <USBD_CDC_Setup+0x15c>
      break;
 8004f2a:	bf00      	nop
 8004f2c:	e008      	b.n	8004f40 <USBD_CDC_Setup+0x16c>
      break;
 8004f2e:	bf00      	nop
    }
    break;
 8004f30:	e006      	b.n	8004f40 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004f32:	6839      	ldr	r1, [r7, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f9ab 	bl	8006290 <USBD_CtlError>
    ret = USBD_FAIL;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	75fb      	strb	r3, [r7, #23]
    break;
 8004f3e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004f5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e049      	b.n	8005002 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3318      	adds	r3, #24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d029      	beq.n	8004fe0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	3318      	adds	r3, #24
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	78f9      	ldrb	r1, [r7, #3]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	1a5b      	subs	r3, r3, r1
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4403      	add	r3, r0
 8004fac:	3344      	adds	r3, #68	; 0x44
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fb4:	fb03 f301 	mul.w	r3, r3, r1
 8004fb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3318      	adds	r3, #24
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004fd2:	78f9      	ldrb	r1, [r7, #3]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f006 f8e2 	bl	800b1a2 <USBD_LL_Transmit>
 8004fde:	e00f      	b.n	8005000 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800501c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005028:	2303      	movs	r3, #3
 800502a:	e015      	b.n	8005058 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f006 f8f8 	bl	800b226 <USBD_LL_GetRxDataSize>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005052:	4611      	mov	r1, r2
 8005054:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800506e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d015      	beq.n	80050a6 <USBD_CDC_EP0_RxReady+0x46>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005080:	2bff      	cmp	r3, #255	; 0xff
 8005082:	d010      	beq.n	80050a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005092:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800509a:	b292      	uxth	r2, r2
 800509c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2243      	movs	r2, #67	; 0x43
 80050bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000090 	.word	0x20000090

080050d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2243      	movs	r2, #67	; 0x43
 80050dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80050de:	4b03      	ldr	r3, [pc, #12]	; (80050ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000004c 	.word	0x2000004c

080050f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2243      	movs	r2, #67	; 0x43
 80050fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80050fe:	4b03      	ldr	r3, [pc, #12]	; (800510c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	200000d4 	.word	0x200000d4

08005110 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	220a      	movs	r2, #10
 800511c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000008 	.word	0x20000008

08005130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005140:	2303      	movs	r3, #3
 8005142:	e004      	b.n	800514e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800515a:	b480      	push	{r7}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800516c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800519c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e01a      	b.n	800520c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d114      	bne.n	800520a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80051fe:	2181      	movs	r1, #129	; 0x81
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f005 ffce 	bl	800b1a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005222:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800522e:	2303      	movs	r3, #3
 8005230:	e016      	b.n	8005260 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7c1b      	ldrb	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005244:	2101      	movs	r1, #1
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f005 ffcc 	bl	800b1e4 <USBD_LL_PrepareReceive>
 800524c:	e007      	b.n	800525e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005254:	2340      	movs	r3, #64	; 0x40
 8005256:	2101      	movs	r1, #1
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f005 ffc3 	bl	800b1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800527c:	2303      	movs	r3, #3
 800527e:	e025      	b.n	80052cc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	79fa      	ldrb	r2, [r7, #7]
 80052be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f005 fe39 	bl	800af38 <USBD_LL_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e010      	b.n	800530e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f107 020e 	add.w	r2, r7, #14
 8005300:	4610      	mov	r0, r2
 8005302:	4798      	blx	r3
 8005304:	4602      	mov	r2, r0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f005 fe56 	bl	800afd0 <USBD_LL_Start>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005350:	2303      	movs	r3, #3
 8005352:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	4611      	mov	r1, r2
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4798      	blx	r3
 800536e:	4603      	mov	r3, r0
 8005370:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	4611      	mov	r1, r2
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
  }

  return USBD_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 ff2c 	bl	800621c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053d2:	461a      	mov	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d00e      	beq.n	8005406 <USBD_LL_SetupStage+0x5a>
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d302      	bcc.n	80053f2 <USBD_LL_SetupStage+0x46>
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d014      	beq.n	800541a <USBD_LL_SetupStage+0x6e>
 80053f0:	e01d      	b.n	800542e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fa18 	bl	8005830 <USBD_StdDevReq>
 8005400:	4603      	mov	r3, r0
 8005402:	73fb      	strb	r3, [r7, #15]
      break;
 8005404:	e020      	b.n	8005448 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fa7c 	bl	800590c <USBD_StdItfReq>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	e016      	b.n	8005448 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fab8 	bl	8005998 <USBD_StdEPReq>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e00c      	b.n	8005448 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f005 fe27 	bl	800b090 <USBD_LL_StallEP>
 8005442:	4603      	mov	r3, r0
 8005444:	73fb      	strb	r3, [r7, #15]
      break;
 8005446:	bf00      	nop
  }

  return ret;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	460b      	mov	r3, r1
 800545c:	607a      	str	r2, [r7, #4]
 800545e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d137      	bne.n	80054d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800546c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005474:	2b03      	cmp	r3, #3
 8005476:	d14a      	bne.n	800550e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d913      	bls.n	80054ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4293      	cmp	r3, r2
 800549c:	bf28      	it	cs
 800549e:	4613      	movcs	r3, r2
 80054a0:	461a      	mov	r2, r3
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 ffad 	bl	8006404 <USBD_CtlContinueRx>
 80054aa:	e030      	b.n	800550e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d105      	bne.n	80054ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 ffa9 	bl	8006426 <USBD_CtlSendStatus>
 80054d4:	e01b      	b.n	800550e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d10e      	bne.n	800550a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	7afa      	ldrb	r2, [r7, #11]
 80054f6:	4611      	mov	r1, r2
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	4798      	blx	r3
 80054fc:	4603      	mov	r3, r0
 80054fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	e002      	b.n	8005510 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800550a:	2303      	movs	r3, #3
 800550c:	e000      	b.n	8005510 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	460b      	mov	r3, r1
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d16a      	bne.n	8005602 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3314      	adds	r3, #20
 8005530:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005538:	2b02      	cmp	r3, #2
 800553a:	d155      	bne.n	80055e8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	429a      	cmp	r2, r3
 8005546:	d914      	bls.n	8005572 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	461a      	mov	r2, r3
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 ff22 	bl	80063a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005564:	2300      	movs	r3, #0
 8005566:	2200      	movs	r2, #0
 8005568:	2100      	movs	r1, #0
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f005 fe3a 	bl	800b1e4 <USBD_LL_PrepareReceive>
 8005570:	e03a      	b.n	80055e8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	429a      	cmp	r2, r3
 800557c:	d11c      	bne.n	80055b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005586:	429a      	cmp	r2, r3
 8005588:	d316      	bcc.n	80055b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005594:	429a      	cmp	r2, r3
 8005596:	d20f      	bcs.n	80055b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005598:	2200      	movs	r2, #0
 800559a:	2100      	movs	r1, #0
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 ff03 	bl	80063a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055aa:	2300      	movs	r3, #0
 80055ac:	2200      	movs	r2, #0
 80055ae:	2100      	movs	r1, #0
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f005 fe17 	bl	800b1e4 <USBD_LL_PrepareReceive>
 80055b6:	e017      	b.n	80055e8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d105      	bne.n	80055da <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055da:	2180      	movs	r1, #128	; 0x80
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f005 fd57 	bl	800b090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 ff32 	bl	800644c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d123      	bne.n	800563a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff fe9b 	bl	800532e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005600:	e01b      	b.n	800563a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d013      	beq.n	8005636 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005614:	2b03      	cmp	r3, #3
 8005616:	d10e      	bne.n	8005636 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	7afa      	ldrb	r2, [r7, #11]
 8005622:	4611      	mov	r1, r2
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	4798      	blx	r3
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	e002      	b.n	800563c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005636:	2303      	movs	r3, #3
 8005638:	e000      	b.n	800563c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6852      	ldr	r2, [r2, #4]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	4611      	mov	r1, r2
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f005 fcb9 	bl	800b006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2240      	movs	r2, #64	; 0x40
 80056a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056a4:	2340      	movs	r3, #64	; 0x40
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f005 fcab 	bl	800b006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800571e:	2b04      	cmp	r3, #4
 8005720:	d105      	bne.n	800572e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	2b03      	cmp	r3, #3
 800574c:	d10b      	bne.n	8005766 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800578a:	b480      	push	{r7}
 800578c:	b083      	sub	sp, #12
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6852      	ldr	r2, [r2, #4]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	4611      	mov	r1, r2
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
  }

  return USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	3301      	adds	r3, #1
 8005808:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005810:	8a3b      	ldrh	r3, [r7, #16]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	b21a      	sxth	r2, r3
 8005816:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800581a:	4313      	orrs	r3, r2
 800581c:	b21b      	sxth	r3, r3
 800581e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005820:	89fb      	ldrh	r3, [r7, #14]
}
 8005822:	4618      	mov	r0, r3
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
	...

08005830 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005846:	2b20      	cmp	r3, #32
 8005848:	d004      	beq.n	8005854 <USBD_StdDevReq+0x24>
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d002      	beq.n	8005854 <USBD_StdDevReq+0x24>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <USBD_StdDevReq+0x38>
 8005852:	e050      	b.n	80058f6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]
    break;
 8005866:	e04b      	b.n	8005900 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b09      	cmp	r3, #9
 800586e:	d83c      	bhi.n	80058ea <USBD_StdDevReq+0xba>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <USBD_StdDevReq+0x48>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058cd 	.word	0x080058cd
 800587c:	080058e1 	.word	0x080058e1
 8005880:	080058eb 	.word	0x080058eb
 8005884:	080058d7 	.word	0x080058d7
 8005888:	080058eb 	.word	0x080058eb
 800588c:	080058ab 	.word	0x080058ab
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058eb 	.word	0x080058eb
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058b5 	.word	0x080058b5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9ce 	bl	8005c44 <USBD_GetDescriptor>
      break;
 80058a8:	e024      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fb33 	bl	8005f18 <USBD_SetAddress>
      break;
 80058b2:	e01f      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fb70 	bl	8005f9c <USBD_SetConfig>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	e018      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc0d 	bl	80060e4 <USBD_GetConfig>
      break;
 80058ca:	e013      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fc3c 	bl	800614c <USBD_GetStatus>
      break;
 80058d4:	e00e      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fc6a 	bl	80061b2 <USBD_SetFeature>
      break;
 80058de:	e009      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fc79 	bl	80061da <USBD_ClrFeature>
      break;
 80058e8:	e004      	b.n	80058f4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fccf 	bl	8006290 <USBD_CtlError>
      break;
 80058f2:	bf00      	nop
    }
    break;
 80058f4:	e004      	b.n	8005900 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fcc9 	bl	8006290 <USBD_CtlError>
    break;
 80058fe:	bf00      	nop
  }

  return ret;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005922:	2b20      	cmp	r3, #32
 8005924:	d003      	beq.n	800592e <USBD_StdItfReq+0x22>
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d001      	beq.n	800592e <USBD_StdItfReq+0x22>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d12a      	bne.n	8005984 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005934:	3b01      	subs	r3, #1
 8005936:	2b02      	cmp	r3, #2
 8005938:	d81d      	bhi.n	8005976 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	889b      	ldrh	r3, [r3, #4]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b01      	cmp	r3, #1
 8005942:	d813      	bhi.n	800596c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	88db      	ldrh	r3, [r3, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d110      	bne.n	8005980 <USBD_StdItfReq+0x74>
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fd5e 	bl	8006426 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800596a:	e009      	b.n	8005980 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fc8e 	bl	8006290 <USBD_CtlError>
      break;
 8005974:	e004      	b.n	8005980 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fc89 	bl	8006290 <USBD_CtlError>
      break;
 800597e:	e000      	b.n	8005982 <USBD_StdItfReq+0x76>
      break;
 8005980:	bf00      	nop
    }
    break;
 8005982:	e004      	b.n	800598e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fc82 	bl	8006290 <USBD_CtlError>
    break;
 800598c:	bf00      	nop
  }

  return ret;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	889b      	ldrh	r3, [r3, #4]
 80059aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d004      	beq.n	80059c2 <USBD_StdEPReq+0x2a>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d002      	beq.n	80059c2 <USBD_StdEPReq+0x2a>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <USBD_StdEPReq+0x3e>
 80059c0:	e135      	b.n	8005c2e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	4798      	blx	r3
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
    break;
 80059d4:	e130      	b.n	8005c38 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d03e      	beq.n	8005a5c <USBD_StdEPReq+0xc4>
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d002      	beq.n	80059e8 <USBD_StdEPReq+0x50>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d077      	beq.n	8005ad6 <USBD_StdEPReq+0x13e>
 80059e6:	e11c      	b.n	8005c22 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d002      	beq.n	80059f8 <USBD_StdEPReq+0x60>
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d015      	beq.n	8005a22 <USBD_StdEPReq+0x8a>
 80059f6:	e02b      	b.n	8005a50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <USBD_StdEPReq+0x80>
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d009      	beq.n	8005a18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f005 fb41 	bl	800b090 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f005 fb3d 	bl	800b090 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a16:	e020      	b.n	8005a5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fc38 	bl	8006290 <USBD_CtlError>
        break;
 8005a20:	e01b      	b.n	8005a5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	885b      	ldrh	r3, [r3, #2]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10e      	bne.n	8005a48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USBD_StdEPReq+0xb0>
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b80      	cmp	r3, #128	; 0x80
 8005a34:	d008      	beq.n	8005a48 <USBD_StdEPReq+0xb0>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	88db      	ldrh	r3, [r3, #6]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	4619      	mov	r1, r3
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f005 fb24 	bl	800b090 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fcec 	bl	8006426 <USBD_CtlSendStatus>

        break;
 8005a4e:	e004      	b.n	8005a5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fc1c 	bl	8006290 <USBD_CtlError>
        break;
 8005a58:	bf00      	nop
      }
      break;
 8005a5a:	e0e7      	b.n	8005c2c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d002      	beq.n	8005a6c <USBD_StdEPReq+0xd4>
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d015      	beq.n	8005a96 <USBD_StdEPReq+0xfe>
 8005a6a:	e02d      	b.n	8005ac8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <USBD_StdEPReq+0xf4>
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d009      	beq.n	8005a8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f005 fb07 	bl	800b090 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 fb03 	bl	800b090 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005a8a:	e023      	b.n	8005ad4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fbfe 	bl	8006290 <USBD_CtlError>
        break;
 8005a94:	e01e      	b.n	8005ad4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	885b      	ldrh	r3, [r3, #2]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d119      	bne.n	8005ad2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f005 fb0e 	bl	800b0ce <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fcb7 	bl	8006426 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
        }
        break;
 8005ac6:	e004      	b.n	8005ad2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fbe0 	bl	8006290 <USBD_CtlError>
        break;
 8005ad0:	e000      	b.n	8005ad4 <USBD_StdEPReq+0x13c>
        break;
 8005ad2:	bf00      	nop
      }
      break;
 8005ad4:	e0aa      	b.n	8005c2c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d002      	beq.n	8005ae6 <USBD_StdEPReq+0x14e>
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d032      	beq.n	8005b4a <USBD_StdEPReq+0x1b2>
 8005ae4:	e097      	b.n	8005c16 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <USBD_StdEPReq+0x164>
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d004      	beq.n	8005afc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fbcb 	bl	8006290 <USBD_CtlError>
          break;
 8005afa:	e091      	b.n	8005c20 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da0b      	bge.n	8005b1c <USBD_StdEPReq+0x184>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3310      	adds	r3, #16
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	e00b      	b.n	8005b34 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fc15 	bl	8006372 <USBD_CtlSendData>
        break;
 8005b48:	e06a      	b.n	8005c20 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da11      	bge.n	8005b76 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d117      	bne.n	8005b9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fb8e 	bl	8006290 <USBD_CtlError>
            break;
 8005b74:	e054      	b.n	8005c20 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fb7b 	bl	8006290 <USBD_CtlError>
            break;
 8005b9a:	e041      	b.n	8005c20 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da0b      	bge.n	8005bbc <USBD_StdEPReq+0x224>
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	e00b      	b.n	8005bd4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <USBD_StdEPReq+0x24a>
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d103      	bne.n	8005bea <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e00e      	b.n	8005c08 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f005 fa8c 	bl	800b10c <USBD_LL_IsStallEP>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fbaf 	bl	8006372 <USBD_CtlSendData>
          break;
 8005c14:	e004      	b.n	8005c20 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb39 	bl	8006290 <USBD_CtlError>
        break;
 8005c1e:	bf00      	nop
      }
      break;
 8005c20:	e004      	b.n	8005c2c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb33 	bl	8006290 <USBD_CtlError>
      break;
 8005c2a:	bf00      	nop
    }
    break;
 8005c2c:	e004      	b.n	8005c38 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb2d 	bl	8006290 <USBD_CtlError>
    break;
 8005c36:	bf00      	nop
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	f200 8128 	bhi.w	8005eba <USBD_GetDescriptor+0x276>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USBD_GetDescriptor+0x2c>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005ca5 	.word	0x08005ca5
 8005c78:	08005ce5 	.word	0x08005ce5
 8005c7c:	08005ebb 	.word	0x08005ebb
 8005c80:	08005ebb 	.word	0x08005ebb
 8005c84:	08005e5b 	.word	0x08005e5b
 8005c88:	08005e87 	.word	0x08005e87
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	7c12      	ldrb	r2, [r2, #16]
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
 8005ca0:	60f8      	str	r0, [r7, #12]
    break;
 8005ca2:	e112      	b.n	8005eca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c1b      	ldrb	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f107 0208 	add.w	r2, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005cc6:	e100      	b.n	8005eca <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f107 0208 	add.w	r2, r7, #8
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
 8005cd8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	2202      	movs	r2, #2
 8005ce0:	701a      	strb	r2, [r3, #0]
    break;
 8005ce2:	e0f2      	b.n	8005eca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	f200 80ac 	bhi.w	8005e48 <USBD_GetDescriptor+0x204>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBD_GetDescriptor+0xb4>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d79 	.word	0x08005d79
 8005d04:	08005dad 	.word	0x08005dad
 8005d08:	08005de1 	.word	0x08005de1
 8005d0c:	08005e15 	.word	0x08005e15
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7c12      	ldrb	r2, [r2, #16]
 8005d28:	f107 0108 	add.w	r1, r7, #8
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d32:	e091      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 faaa 	bl	8006290 <USBD_CtlError>
        err++;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	72fb      	strb	r3, [r7, #11]
      break;
 8005d42:	e089      	b.n	8005e58 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d66:	e077      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa90 	bl	8006290 <USBD_CtlError>
        err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
      break;
 8005d76:	e06f      	b.n	8005e58 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d9a:	e05d      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa76 	bl	8006290 <USBD_CtlError>
        err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
      break;
 8005daa:	e055      	b.n	8005e58 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dce:	e043      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa5c 	bl	8006290 <USBD_CtlError>
        err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
      break;
 8005dde:	e03b      	b.n	8005e58 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e02:	e029      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa42 	bl	8006290 <USBD_CtlError>
        err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
      break;
 8005e12:	e021      	b.n	8005e58 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e36:	e00f      	b.n	8005e58 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa28 	bl	8006290 <USBD_CtlError>
        err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
      break;
 8005e46:	e007      	b.n	8005e58 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa20 	bl	8006290 <USBD_CtlError>
      err++;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	3301      	adds	r3, #1
 8005e54:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005e56:	bf00      	nop
    }
    break;
 8005e58:	e037      	b.n	8005eca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7c1b      	ldrb	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	f107 0208 	add.w	r2, r7, #8
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e74:	e029      	b.n	8005eca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fa09 	bl	8006290 <USBD_CtlError>
      err++;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	3301      	adds	r3, #1
 8005e82:	72fb      	strb	r3, [r7, #11]
    break;
 8005e84:	e021      	b.n	8005eca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	7c1b      	ldrb	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f107 0208 	add.w	r2, r7, #8
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
 8005e9e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	2207      	movs	r2, #7
 8005ea6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005ea8:	e00f      	b.n	8005eca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9ef 	bl	8006290 <USBD_CtlError>
      err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8005eb8:	e007      	b.n	8005eca <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f9e7 	bl	8006290 <USBD_CtlError>
    err++;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	72fb      	strb	r3, [r7, #11]
    break;
 8005ec8:	bf00      	nop
  }

  if (err != 0U)
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11e      	bne.n	8005f0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	88db      	ldrh	r3, [r3, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d016      	beq.n	8005f06 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	88da      	ldrh	r2, [r3, #6]
 8005ee2:	893b      	ldrh	r3, [r7, #8]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bf28      	it	cs
 8005ee8:	4613      	movcs	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa3c 	bl	8006372 <USBD_CtlSendData>
 8005efa:	e009      	b.n	8005f10 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f9c6 	bl	8006290 <USBD_CtlError>
 8005f04:	e004      	b.n	8005f10 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa8d 	bl	8006426 <USBD_CtlSendStatus>
 8005f0c:	e000      	b.n	8005f10 <USBD_GetDescriptor+0x2cc>
    return;
 8005f0e:	bf00      	nop
    }
  }
}
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop

08005f18 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	889b      	ldrh	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d130      	bne.n	8005f8c <USBD_SetAddress+0x74>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	88db      	ldrh	r3, [r3, #6]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d12c      	bne.n	8005f8c <USBD_SetAddress+0x74>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	885b      	ldrh	r3, [r3, #2]
 8005f36:	2b7f      	cmp	r3, #127	; 0x7f
 8005f38:	d828      	bhi.n	8005f8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	885b      	ldrh	r3, [r3, #2]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d104      	bne.n	8005f5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f99c 	bl	8006290 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f58:	e01c      	b.n	8005f94 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7bfa      	ldrb	r2, [r7, #15]
 8005f5e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f005 f8fc 	bl	800b164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa5a 	bl	8006426 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f80:	e008      	b.n	8005f94 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f8a:	e003      	b.n	8005f94 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f97e 	bl	8006290 <USBD_CtlError>
  }
}
 8005f94:	bf00      	nop
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	885b      	ldrh	r3, [r3, #2]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b4b      	ldr	r3, [pc, #300]	; (80060e0 <USBD_SetConfig+0x144>)
 8005fb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fb4:	4b4a      	ldr	r3, [pc, #296]	; (80060e0 <USBD_SetConfig+0x144>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d905      	bls.n	8005fc8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f966 	bl	8006290 <USBD_CtlError>
    return USBD_FAIL;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e087      	b.n	80060d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d002      	beq.n	8005fd8 <USBD_SetConfig+0x3c>
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d025      	beq.n	8006022 <USBD_SetConfig+0x86>
 8005fd6:	e071      	b.n	80060bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005fd8:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <USBD_SetConfig+0x144>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01c      	beq.n	800601a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005fe0:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <USBD_SetConfig+0x144>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fea:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <USBD_SetConfig+0x144>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff f9a7 	bl	8005344 <USBD_SetClassConfig>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f944 	bl	8006290 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006008:	e065      	b.n	80060d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa0b 	bl	8006426 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2203      	movs	r2, #3
 8006014:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006018:	e05d      	b.n	80060d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa03 	bl	8006426 <USBD_CtlSendStatus>
    break;
 8006020:	e059      	b.n	80060d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006022:	4b2f      	ldr	r3, [pc, #188]	; (80060e0 <USBD_SetConfig+0x144>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d112      	bne.n	8006050 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006032:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <USBD_SetConfig+0x144>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800603c:	4b28      	ldr	r3, [pc, #160]	; (80060e0 <USBD_SetConfig+0x144>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff f99a 	bl	800537c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9ec 	bl	8006426 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800604e:	e042      	b.n	80060d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006050:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <USBD_SetConfig+0x144>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d02a      	beq.n	80060b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff f988 	bl	800537c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800606c:	4b1c      	ldr	r3, [pc, #112]	; (80060e0 <USBD_SetConfig+0x144>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006076:	4b1a      	ldr	r3, [pc, #104]	; (80060e0 <USBD_SetConfig+0x144>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff f961 	bl	8005344 <USBD_SetClassConfig>
 8006082:	4603      	mov	r3, r0
 8006084:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00f      	beq.n	80060ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8fe 	bl	8006290 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	b2db      	uxtb	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff f96d 	bl	800537c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80060aa:	e014      	b.n	80060d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f9ba 	bl	8006426 <USBD_CtlSendStatus>
    break;
 80060b2:	e010      	b.n	80060d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f9b6 	bl	8006426 <USBD_CtlSendStatus>
    break;
 80060ba:	e00c      	b.n	80060d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8e6 	bl	8006290 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <USBD_SetConfig+0x144>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff f956 	bl	800537c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80060d0:	2303      	movs	r3, #3
 80060d2:	73fb      	strb	r3, [r7, #15]
    break;
 80060d4:	bf00      	nop
  }

  return ret;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000284 	.word	0x20000284

080060e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d004      	beq.n	8006100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f8c9 	bl	8006290 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80060fe:	e021      	b.n	8006144 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006106:	2b01      	cmp	r3, #1
 8006108:	db17      	blt.n	800613a <USBD_GetConfig+0x56>
 800610a:	2b02      	cmp	r3, #2
 800610c:	dd02      	ble.n	8006114 <USBD_GetConfig+0x30>
 800610e:	2b03      	cmp	r3, #3
 8006110:	d00b      	beq.n	800612a <USBD_GetConfig+0x46>
 8006112:	e012      	b.n	800613a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3308      	adds	r3, #8
 800611e:	2201      	movs	r2, #1
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f925 	bl	8006372 <USBD_CtlSendData>
      break;
 8006128:	e00c      	b.n	8006144 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3304      	adds	r3, #4
 800612e:	2201      	movs	r2, #1
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f91d 	bl	8006372 <USBD_CtlSendData>
      break;
 8006138:	e004      	b.n	8006144 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f8a7 	bl	8006290 <USBD_CtlError>
      break;
 8006142:	bf00      	nop
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615c:	3b01      	subs	r3, #1
 800615e:	2b02      	cmp	r3, #2
 8006160:	d81e      	bhi.n	80061a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	88db      	ldrh	r3, [r3, #6]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d004      	beq.n	8006174 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f88f 	bl	8006290 <USBD_CtlError>
      break;
 8006172:	e01a      	b.n	80061aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f043 0202 	orr.w	r2, r3, #2
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	330c      	adds	r3, #12
 8006194:	2202      	movs	r2, #2
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8ea 	bl	8006372 <USBD_CtlSendData>
    break;
 800619e:	e004      	b.n	80061aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f874 	bl	8006290 <USBD_CtlError>
    break;
 80061a8:	bf00      	nop
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	885b      	ldrh	r3, [r3, #2]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d106      	bne.n	80061d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f92a 	bl	8006426 <USBD_CtlSendStatus>
  }
}
 80061d2:	bf00      	nop
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ea:	3b01      	subs	r3, #1
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d80b      	bhi.n	8006208 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	885b      	ldrh	r3, [r3, #2]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d10c      	bne.n	8006212 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f910 	bl	8006426 <USBD_CtlSendStatus>
      }
      break;
 8006206:	e004      	b.n	8006212 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f840 	bl	8006290 <USBD_CtlError>
      break;
 8006210:	e000      	b.n	8006214 <USBD_ClrFeature+0x3a>
      break;
 8006212:	bf00      	nop
  }
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	781a      	ldrb	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fad3 	bl	80057f2 <SWAPBYTE>
 800624c:	4603      	mov	r3, r0
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff fac6 	bl	80057f2 <SWAPBYTE>
 8006266:	4603      	mov	r3, r0
 8006268:	461a      	mov	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3301      	adds	r3, #1
 8006272:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fab9 	bl	80057f2 <SWAPBYTE>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	80da      	strh	r2, [r3, #6]
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800629a:	2180      	movs	r1, #128	; 0x80
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f004 fef7 	bl	800b090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062a2:	2100      	movs	r1, #0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f004 fef3 	bl	800b090 <USBD_LL_StallEP>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d036      	beq.n	8006336 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062cc:	6938      	ldr	r0, [r7, #16]
 80062ce:	f000 f836 	bl	800633e <USBD_GetLen>
 80062d2:	4603      	mov	r3, r0
 80062d4:	3301      	adds	r3, #1
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	7812      	ldrb	r2, [r2, #0]
 80062ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
 80062ee:	3301      	adds	r3, #1
 80062f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	4413      	add	r3, r2
 80062f8:	2203      	movs	r2, #3
 80062fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	3301      	adds	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006302:	e013      	b.n	800632c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	4413      	add	r3, r2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	7812      	ldrb	r2, [r2, #0]
 800630e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	3301      	adds	r3, #1
 8006314:	613b      	str	r3, [r7, #16]
    idx++;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	3301      	adds	r3, #1
 800631a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	4413      	add	r3, r2
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
    idx++;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	3301      	adds	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1e7      	bne.n	8006304 <USBD_GetString+0x52>
 8006334:	e000      	b.n	8006338 <USBD_GetString+0x86>
    return;
 8006336:	bf00      	nop
  }
}
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800634e:	e005      	b.n	800635c <USBD_GetLen+0x1e>
  {
    len++;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	3301      	adds	r3, #1
 8006354:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3301      	adds	r3, #1
 800635a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f5      	bne.n	8006350 <USBD_GetLen+0x12>
  }

  return len;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b084      	sub	sp, #16
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	2100      	movs	r1, #0
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f004 ff02 	bl	800b1a2 <USBD_LL_Transmit>

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	2100      	movs	r1, #0
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f004 fef1 	bl	800b1a2 <USBD_LL_Transmit>

  return USBD_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2203      	movs	r2, #3
 80063da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	2100      	movs	r1, #0
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f004 fef5 	bl	800b1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f004 fee4 	bl	800b1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2204      	movs	r2, #4
 8006432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006436:	2300      	movs	r3, #0
 8006438:	2200      	movs	r2, #0
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f004 feb0 	bl	800b1a2 <USBD_LL_Transmit>

  return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2205      	movs	r2, #5
 8006458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800645c:	2300      	movs	r3, #0
 800645e:	2200      	movs	r2, #0
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f004 febe 	bl	800b1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006486:	f3ef 8305 	mrs	r3, IPSR
 800648a:	60bb      	str	r3, [r7, #8]
  return(result);
 800648c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10f      	bne.n	80064b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006492:	f3ef 8310 	mrs	r3, PRIMASK
 8006496:	607b      	str	r3, [r7, #4]
  return(result);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	603b      	str	r3, [r7, #0]
  return(result);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <osKernelInitialize+0x3a>
 80064aa:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <osKernelInitialize+0x64>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d103      	bne.n	80064ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064b2:	f06f 0305 	mvn.w	r3, #5
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e00c      	b.n	80064d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064ba:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <osKernelInitialize+0x64>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <osKernelInitialize+0x64>)
 80064c4:	2201      	movs	r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e002      	b.n	80064d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000288 	.word	0x20000288

080064e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ee:	f3ef 8305 	mrs	r3, IPSR
 80064f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80064f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10f      	bne.n	800651a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064fa:	f3ef 8310 	mrs	r3, PRIMASK
 80064fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006506:	f3ef 8311 	mrs	r3, BASEPRI
 800650a:	603b      	str	r3, [r7, #0]
  return(result);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <osKernelStart+0x3a>
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <osKernelStart+0x68>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d103      	bne.n	8006522 <osKernelStart+0x3a>
    stat = osErrorISR;
 800651a:	f06f 0305 	mvn.w	r3, #5
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e010      	b.n	8006544 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006522:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <osKernelStart+0x68>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d109      	bne.n	800653e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800652a:	f7ff ffa2 	bl	8006472 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <osKernelStart+0x68>)
 8006530:	2202      	movs	r2, #2
 8006532:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006534:	f001 f870 	bl	8007618 <vTaskStartScheduler>
      stat = osOK;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
 800653c:	e002      	b.n	8006544 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800653e:	f04f 33ff 	mov.w	r3, #4294967295
 8006542:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006544:	68fb      	ldr	r3, [r7, #12]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000288 	.word	0x20000288

08006554 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b090      	sub	sp, #64	; 0x40
 8006558:	af04      	add	r7, sp, #16
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006564:	f3ef 8305 	mrs	r3, IPSR
 8006568:	61fb      	str	r3, [r7, #28]
  return(result);
 800656a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800656c:	2b00      	cmp	r3, #0
 800656e:	f040 808f 	bne.w	8006690 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	61bb      	str	r3, [r7, #24]
  return(result);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800657e:	f3ef 8311 	mrs	r3, BASEPRI
 8006582:	617b      	str	r3, [r7, #20]
  return(result);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <osThreadNew+0x3e>
 800658a:	4b44      	ldr	r3, [pc, #272]	; (800669c <osThreadNew+0x148>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b02      	cmp	r3, #2
 8006590:	d07e      	beq.n	8006690 <osThreadNew+0x13c>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d07b      	beq.n	8006690 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800659c:	2318      	movs	r3, #24
 800659e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d045      	beq.n	800663c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <osThreadNew+0x6a>
        name = attr->name;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <osThreadNew+0x90>
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	2b38      	cmp	r3, #56	; 0x38
 80065d6:	d805      	bhi.n	80065e4 <osThreadNew+0x90>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <osThreadNew+0x94>
        return (NULL);
 80065e4:	2300      	movs	r3, #0
 80065e6:	e054      	b.n	8006692 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	089b      	lsrs	r3, r3, #2
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <osThreadNew+0xca>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2b5b      	cmp	r3, #91	; 0x5b
 8006606:	d90a      	bls.n	800661e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <osThreadNew+0xca>
        mem = 1;
 8006618:	2301      	movs	r3, #1
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	e010      	b.n	8006640 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <osThreadNew+0xec>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <osThreadNew+0xec>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <osThreadNew+0xec>
          mem = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	e001      	b.n	8006640 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d110      	bne.n	8006668 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800664e:	9202      	str	r2, [sp, #8]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 fe09 	bl	8007274 <xTaskCreateStatic>
 8006662:	4603      	mov	r3, r0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	e013      	b.n	8006690 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d110      	bne.n	8006690 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	b29a      	uxth	r2, r3
 8006672:	f107 0310 	add.w	r3, r7, #16
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fe51 	bl	8007328 <xTaskCreate>
 8006686:	4603      	mov	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <osThreadNew+0x13c>
          hTask = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006690:	693b      	ldr	r3, [r7, #16]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3730      	adds	r7, #48	; 0x30
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000288 	.word	0x20000288

080066a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a8:	f3ef 8305 	mrs	r3, IPSR
 80066ac:	613b      	str	r3, [r7, #16]
  return(result);
 80066ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10f      	bne.n	80066d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066b4:	f3ef 8310 	mrs	r3, PRIMASK
 80066b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066c0:	f3ef 8311 	mrs	r3, BASEPRI
 80066c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <osDelay+0x3c>
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <osDelay+0x58>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d103      	bne.n	80066dc <osDelay+0x3c>
    stat = osErrorISR;
 80066d4:	f06f 0305 	mvn.w	r3, #5
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e007      	b.n	80066ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 ff62 	bl	80075b0 <vTaskDelay>
    }
  }

  return (stat);
 80066ec:	697b      	ldr	r3, [r7, #20]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000288 	.word	0x20000288

080066fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a07      	ldr	r2, [pc, #28]	; (8006728 <vApplicationGetIdleTaskMemory+0x2c>)
 800670c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4a06      	ldr	r2, [pc, #24]	; (800672c <vApplicationGetIdleTaskMemory+0x30>)
 8006712:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2280      	movs	r2, #128	; 0x80
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	2000028c 	.word	0x2000028c
 800672c:	200002e8 	.word	0x200002e8

08006730 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a07      	ldr	r2, [pc, #28]	; (800675c <vApplicationGetTimerTaskMemory+0x2c>)
 8006740:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4a06      	ldr	r2, [pc, #24]	; (8006760 <vApplicationGetTimerTaskMemory+0x30>)
 8006746:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800674e:	601a      	str	r2, [r3, #0]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	200004e8 	.word	0x200004e8
 8006760:	20000544 	.word	0x20000544

08006764 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f103 0208 	add.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f04f 32ff 	mov.w	r2, #4294967295
 800677c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f103 0208 	add.w	r2, r3, #8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f103 0208 	add.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	683a      	ldr	r2, [r7, #0]
 80067e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d103      	bne.n	8006826 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e00c      	b.n	8006840 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3308      	adds	r3, #8
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e002      	b.n	8006834 <vListInsert+0x2e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d2f6      	bcs.n	800682e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6892      	ldr	r2, [r2, #8]
 800688e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6852      	ldr	r2, [r2, #4]
 8006898:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d103      	bne.n	80068ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	e7fe      	b.n	80068f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068f4:	f002 f812 	bl	800891c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006904:	fb01 f303 	mul.w	r3, r1, r3
 8006908:	441a      	add	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	3b01      	subs	r3, #1
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	441a      	add	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	22ff      	movs	r2, #255	; 0xff
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	22ff      	movs	r2, #255	; 0xff
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d114      	bne.n	8006974 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01a      	beq.n	8006988 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3310      	adds	r3, #16
 8006956:	4618      	mov	r0, r3
 8006958:	f001 f8de 	bl	8007b18 <xTaskRemoveFromEventList>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006962:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <xQueueGenericReset+0xcc>)
 8006964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	e009      	b.n	8006988 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3310      	adds	r3, #16
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fef3 	bl	8006764 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3324      	adds	r3, #36	; 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff feee 	bl	8006764 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006988:	f001 fff6 	bl	8008978 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800698c:	2301      	movs	r3, #1
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08e      	sub	sp, #56	; 0x38
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d109      	bne.n	80069c4 <xQueueGenericCreateStatic+0x28>
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c2:	e7fe      	b.n	80069c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d109      	bne.n	80069de <xQueueGenericCreateStatic+0x42>
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
 80069dc:	e7fe      	b.n	80069dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <xQueueGenericCreateStatic+0x4e>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <xQueueGenericCreateStatic+0x52>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericCreateStatic+0x54>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <xQueueGenericCreateStatic+0x6c>
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	e7fe      	b.n	8006a06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <xQueueGenericCreateStatic+0x78>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <xQueueGenericCreateStatic+0x7c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <xQueueGenericCreateStatic+0x7e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <xQueueGenericCreateStatic+0x96>
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a32:	2350      	movs	r3, #80	; 0x50
 8006a34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d009      	beq.n	8006a50 <xQueueGenericCreateStatic+0xb4>
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	e7fe      	b.n	8006a4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f805 	bl	8006a82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3730      	adds	r7, #48	; 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e002      	b.n	8006aa4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	69b8      	ldr	r0, [r7, #24]
 8006ab4:	f7ff ff0a 	bl	80068cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ac0:	bf00      	nop
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08e      	sub	sp, #56	; 0x38
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <xQueueGenericSend+0x30>
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af6:	e7fe      	b.n	8006af6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <xQueueGenericSend+0x3e>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <xQueueGenericSend+0x42>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <xQueueGenericSend+0x44>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <xQueueGenericSend+0x5c>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
 8006b22:	e7fe      	b.n	8006b22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x6a>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSend+0x6e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSend+0x70>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <xQueueGenericSend+0x88>
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	e7fe      	b.n	8006b4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b50:	f001 f998 	bl	8007e84 <xTaskGetSchedulerState>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <xQueueGenericSend+0x98>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSend+0x9c>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueGenericSend+0x9e>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <xQueueGenericSend+0xb6>
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e7fe      	b.n	8006b7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b7e:	f001 fecd 	bl	800891c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <xQueueGenericSend+0xcc>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d129      	bne.n	8006be8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9a:	f000 f9ff 	bl	8006f9c <prvCopyDataToQueue>
 8006b9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	3324      	adds	r3, #36	; 0x24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 ffb3 	bl	8007b18 <xTaskRemoveFromEventList>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bb8:	4b3f      	ldr	r3, [pc, #252]	; (8006cb8 <xQueueGenericSend+0x1f0>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	e00a      	b.n	8006be0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <xQueueGenericSend+0x1f0>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006be0:	f001 feca 	bl	8008978 <vPortExitCritical>
				return pdPASS;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e063      	b.n	8006cb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bee:	f001 fec3 	bl	8008978 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e05c      	b.n	8006cb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d106      	bne.n	8006c0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 ffeb 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c06:	2301      	movs	r3, #1
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c0a:	f001 feb5 	bl	8008978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c0e:	f000 fd67 	bl	80076e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c12:	f001 fe83 	bl	800891c <vPortEnterCritical>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <xQueueGenericSend+0x164>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d103      	bne.n	8006c42 <xQueueGenericSend+0x17a>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c42:	f001 fe99 	bl	8008978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c46:	1d3a      	adds	r2, r7, #4
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 ffda 	bl	8007c08 <xTaskCheckForTimeOut>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d124      	bne.n	8006ca4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5c:	f000 fa96 	bl	800718c <prvIsQueueFull>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d018      	beq.n	8006c98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	3310      	adds	r3, #16
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ff04 	bl	8007a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c76:	f000 fa21 	bl	80070bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c7a:	f000 fd3f 	bl	80076fc <xTaskResumeAll>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af7c 	bne.w	8006b7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006c86:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xQueueGenericSend+0x1f0>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	e772      	b.n	8006b7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c9a:	f000 fa0f 	bl	80070bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c9e:	f000 fd2d 	bl	80076fc <xTaskResumeAll>
 8006ca2:	e76c      	b.n	8006b7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca6:	f000 fa09 	bl	80070bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006caa:	f000 fd27 	bl	80076fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3738      	adds	r7, #56	; 0x38
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <xQueueGenericSendFromISR+0x2c>
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <xQueueGenericSendFromISR+0x3a>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <xQueueGenericSendFromISR+0x3e>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <xQueueGenericSendFromISR+0x40>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <xQueueGenericSendFromISR+0x58>
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSendFromISR+0x66>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSendFromISR+0x6a>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSendFromISR+0x6c>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <xQueueGenericSendFromISR+0x84>
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e7fe      	b.n	8006d3e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d40:	f001 fec8 	bl	8008ad4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d44:	f3ef 8211 	mrs	r2, BASEPRI
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	61ba      	str	r2, [r7, #24]
 8006d5a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d302      	bcc.n	8006d72 <xQueueGenericSendFromISR+0xb6>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d12c      	bne.n	8006dcc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	68b9      	ldr	r1, [r7, #8]
 8006d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d82:	f000 f90b 	bl	8006f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d86:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d112      	bne.n	8006db6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d016      	beq.n	8006dc6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 febb 	bl	8007b18 <xTaskRemoveFromEventList>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	e007      	b.n	8006dc6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dba:	3301      	adds	r3, #1
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	b25a      	sxtb	r2, r3
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dca:	e001      	b.n	8006dd0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3738      	adds	r7, #56	; 0x38
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <xQueueReceive+0x2e>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	623b      	str	r3, [r7, #32]
 8006e10:	e7fe      	b.n	8006e10 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <xQueueReceive+0x3c>
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <xQueueReceive+0x40>
 8006e20:	2301      	movs	r3, #1
 8006e22:	e000      	b.n	8006e26 <xQueueReceive+0x42>
 8006e24:	2300      	movs	r3, #0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <xQueueReceive+0x5a>
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e7fe      	b.n	8006e3c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3e:	f001 f821 	bl	8007e84 <xTaskGetSchedulerState>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xQueueReceive+0x6a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <xQueueReceive+0x6e>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueReceive+0x70>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d109      	bne.n	8006e6c <xQueueReceive+0x88>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	e7fe      	b.n	8006e6a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e6c:	f001 fd56 	bl	800891c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01f      	beq.n	8006ebc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e80:	f000 f8f6 	bl	8007070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	1e5a      	subs	r2, r3, #1
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	3310      	adds	r3, #16
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fe3d 	bl	8007b18 <xTaskRemoveFromEventList>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ea4:	4b3c      	ldr	r3, [pc, #240]	; (8006f98 <xQueueReceive+0x1b4>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006eb4:	f001 fd60 	bl	8008978 <vPortExitCritical>
				return pdPASS;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e069      	b.n	8006f90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d103      	bne.n	8006eca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ec2:	f001 fd59 	bl	8008978 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e062      	b.n	8006f90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d106      	bne.n	8006ede <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ed0:	f107 0310 	add.w	r3, r7, #16
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe81 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ede:	f001 fd4b 	bl	8008978 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ee2:	f000 fbfd 	bl	80076e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ee6:	f001 fd19 	bl	800891c <vPortEnterCritical>
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d103      	bne.n	8006f00 <xQueueReceive+0x11c>
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d103      	bne.n	8006f16 <xQueueReceive+0x132>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f16:	f001 fd2f 	bl	8008978 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f1a:	1d3a      	adds	r2, r7, #4
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fe70 	bl	8007c08 <xTaskCheckForTimeOut>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d123      	bne.n	8006f76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f30:	f000 f916 	bl	8007160 <prvIsQueueEmpty>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d017      	beq.n	8006f6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	3324      	adds	r3, #36	; 0x24
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fd9a 	bl	8007a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4a:	f000 f8b7 	bl	80070bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f4e:	f000 fbd5 	bl	80076fc <xTaskResumeAll>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d189      	bne.n	8006e6c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f58:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <xQueueReceive+0x1b4>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	e780      	b.n	8006e6c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6c:	f000 f8a6 	bl	80070bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f70:	f000 fbc4 	bl	80076fc <xTaskResumeAll>
 8006f74:	e77a      	b.n	8006e6c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f78:	f000 f8a0 	bl	80070bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f7c:	f000 fbbe 	bl	80076fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f000 f8ed 	bl	8007160 <prvIsQueueEmpty>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f43f af6f 	beq.w	8006e6c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3730      	adds	r7, #48	; 0x30
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d14d      	bne.n	800705e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ff7a 	bl	8007ec0 <xTaskPriorityDisinherit>
 8006fcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	e043      	b.n	800705e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d119      	bne.n	8007010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6858      	ldr	r0, [r3, #4]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	f004 fcfe 	bl	800b9e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d32b      	bcc.n	800705e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	e026      	b.n	800705e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68d8      	ldr	r0, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	f004 fce4 	bl	800b9e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	425b      	negs	r3, r3
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d207      	bcs.n	800704c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	425b      	negs	r3, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d105      	bne.n	800705e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	3b01      	subs	r3, #1
 800705c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	429a      	cmp	r2, r3
 800709a:	d303      	bcc.n	80070a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68d9      	ldr	r1, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	461a      	mov	r2, r3
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f004 fc9a 	bl	800b9e8 <memcpy>
	}
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070c4:	f001 fc2a 	bl	800891c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070d0:	e011      	b.n	80070f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fd1a 	bl	8007b18 <xTaskRemoveFromEventList>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ea:	f000 fded 	bl	8007cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dce9      	bgt.n	80070d2 <prvUnlockQueue+0x16>
 80070fe:	e000      	b.n	8007102 <prvUnlockQueue+0x46>
					break;
 8007100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800710a:	f001 fc35 	bl	8008978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800710e:	f001 fc05 	bl	800891c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800711a:	e011      	b.n	8007140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d012      	beq.n	800714a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3310      	adds	r3, #16
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fcf5 	bl	8007b18 <xTaskRemoveFromEventList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007134:	f000 fdc8 	bl	8007cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	3b01      	subs	r3, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dce9      	bgt.n	800711c <prvUnlockQueue+0x60>
 8007148:	e000      	b.n	800714c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800714a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007154:	f001 fc10 	bl	8008978 <vPortExitCritical>
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007168:	f001 fbd8 	bl	800891c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e001      	b.n	800717e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800717e:	f001 fbfb 	bl	8008978 <vPortExitCritical>

	return xReturn;
 8007182:	68fb      	ldr	r3, [r7, #12]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007194:	f001 fbc2 	bl	800891c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d102      	bne.n	80071aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e001      	b.n	80071ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ae:	f001 fbe3 	bl	8008978 <vPortExitCritical>

	return xReturn;
 80071b2:	68fb      	ldr	r3, [r7, #12]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e014      	b.n	80071f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071cc:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071d8:	490b      	ldr	r1, [pc, #44]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4413      	add	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071ee:	e005      	b.n	80071fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b07      	cmp	r3, #7
 80071fa:	d9e7      	bls.n	80071cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	20004bcc 	.word	0x20004bcc

0800720c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800721c:	f001 fb7e 	bl	800891c <vPortEnterCritical>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007226:	b25b      	sxtb	r3, r3
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d103      	bne.n	8007236 <vQueueWaitForMessageRestricted+0x2a>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723c:	b25b      	sxtb	r3, r3
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007242:	d103      	bne.n	800724c <vQueueWaitForMessageRestricted+0x40>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800724c:	f001 fb94 	bl	8008978 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fc2f 	bl	8007ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	f7ff ff28 	bl	80070bc <prvUnlockQueue>
	}
 800726c:	bf00      	nop
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	; 0x38
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d109      	bne.n	800729c <xTaskCreateStatic+0x28>
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	623b      	str	r3, [r7, #32]
 800729a:	e7fe      	b.n	800729a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <xTaskCreateStatic+0x42>
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e7fe      	b.n	80072b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072b6:	235c      	movs	r3, #92	; 0x5c
 80072b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b5c      	cmp	r3, #92	; 0x5c
 80072be:	d009      	beq.n	80072d4 <xTaskCreateStatic+0x60>
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e7fe      	b.n	80072d2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01e      	beq.n	800731a <xTaskCreateStatic+0xa6>
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d01b      	beq.n	800731a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072f4:	2300      	movs	r3, #0
 80072f6:	9303      	str	r3, [sp, #12]
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	f107 0314 	add.w	r3, r7, #20
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f850 	bl	80073b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007314:	f000 f8dc 	bl	80074d0 <prvAddNewTaskToReadyList>
 8007318:	e001      	b.n	800731e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800731e:	697b      	ldr	r3, [r7, #20]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08c      	sub	sp, #48	; 0x30
 800732c:	af04      	add	r7, sp, #16
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fc07 	bl	8008b50 <pvPortMalloc>
 8007342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800734a:	205c      	movs	r0, #92	; 0x5c
 800734c:	f001 fc00 	bl	8008b50 <pvPortMalloc>
 8007350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
 800735e:	e005      	b.n	800736c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007360:	6978      	ldr	r0, [r7, #20]
 8007362:	f001 fcb7 	bl	8008cd4 <vPortFree>
 8007366:	e001      	b.n	800736c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d017      	beq.n	80073a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	2300      	movs	r3, #0
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	9302      	str	r3, [sp, #8]
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	9301      	str	r3, [sp, #4]
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f80e 	bl	80073b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007396:	69f8      	ldr	r0, [r7, #28]
 8007398:	f000 f89a 	bl	80074d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800739c:	2301      	movs	r3, #1
 800739e:	61bb      	str	r3, [r7, #24]
 80073a0:	e002      	b.n	80073a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295
 80073a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073a8:	69bb      	ldr	r3, [r7, #24]
	}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b088      	sub	sp, #32
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	461a      	mov	r2, r3
 80073ca:	21a5      	movs	r1, #165	; 0xa5
 80073cc:	f004 fb17 	bl	800b9fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073da:	3b01      	subs	r3, #1
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	f023 0307 	bic.w	r3, r3, #7
 80073e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d009      	beq.n	8007408 <prvInitialiseNewTask+0x56>
 80073f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	e7fe      	b.n	8007406 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01f      	beq.n	800744e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e012      	b.n	800743a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	7819      	ldrb	r1, [r3, #0]
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	3334      	adds	r3, #52	; 0x34
 8007424:	460a      	mov	r2, r1
 8007426:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3301      	adds	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d9e9      	bls.n	8007414 <prvInitialiseNewTask+0x62>
 8007440:	e000      	b.n	8007444 <prvInitialiseNewTask+0x92>
			{
				break;
 8007442:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800744c:	e003      	b.n	8007456 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	2b37      	cmp	r3, #55	; 0x37
 800745a:	d901      	bls.n	8007460 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800745c:	2337      	movs	r3, #55	; 0x37
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	2200      	movs	r2, #0
 8007470:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	3304      	adds	r3, #4
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff f994 	bl	80067a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	3318      	adds	r3, #24
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff f98f 	bl	80067a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	2200      	movs	r2, #0
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	69b8      	ldr	r0, [r7, #24]
 80074b0:	f001 f90c 	bl	80086cc <pxPortInitialiseStack>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074c6:	bf00      	nop
 80074c8:	3720      	adds	r7, #32
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074d8:	f001 fa20 	bl	800891c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074dc:	4b2d      	ldr	r3, [pc, #180]	; (8007594 <prvAddNewTaskToReadyList+0xc4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a2c      	ldr	r2, [pc, #176]	; (8007594 <prvAddNewTaskToReadyList+0xc4>)
 80074e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074e6:	4b2c      	ldr	r3, [pc, #176]	; (8007598 <prvAddNewTaskToReadyList+0xc8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074ee:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <prvAddNewTaskToReadyList+0xc8>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074f4:	4b27      	ldr	r3, [pc, #156]	; (8007594 <prvAddNewTaskToReadyList+0xc4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d110      	bne.n	800751e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074fc:	f000 fc08 	bl	8007d10 <prvInitialiseTaskLists>
 8007500:	e00d      	b.n	800751e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007502:	4b26      	ldr	r3, [pc, #152]	; (800759c <prvAddNewTaskToReadyList+0xcc>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800750a:	4b23      	ldr	r3, [pc, #140]	; (8007598 <prvAddNewTaskToReadyList+0xc8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	429a      	cmp	r2, r3
 8007516:	d802      	bhi.n	800751e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007518:	4a1f      	ldr	r2, [pc, #124]	; (8007598 <prvAddNewTaskToReadyList+0xc8>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800751e:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <prvAddNewTaskToReadyList+0xd0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	4a1e      	ldr	r2, [pc, #120]	; (80075a0 <prvAddNewTaskToReadyList+0xd0>)
 8007526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <prvAddNewTaskToReadyList+0xd0>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <prvAddNewTaskToReadyList+0xd4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d903      	bls.n	8007544 <prvAddNewTaskToReadyList+0x74>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	4a18      	ldr	r2, [pc, #96]	; (80075a4 <prvAddNewTaskToReadyList+0xd4>)
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4a15      	ldr	r2, [pc, #84]	; (80075a8 <prvAddNewTaskToReadyList+0xd8>)
 8007552:	441a      	add	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f7ff f92f 	bl	80067be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007560:	f001 fa0a 	bl	8008978 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007564:	4b0d      	ldr	r3, [pc, #52]	; (800759c <prvAddNewTaskToReadyList+0xcc>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00e      	beq.n	800758a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <prvAddNewTaskToReadyList+0xc8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	429a      	cmp	r2, r3
 8007578:	d207      	bcs.n	800758a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800757a:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <prvAddNewTaskToReadyList+0xdc>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000e18 	.word	0x20000e18
 8007598:	20000944 	.word	0x20000944
 800759c:	20000e24 	.word	0x20000e24
 80075a0:	20000e34 	.word	0x20000e34
 80075a4:	20000e20 	.word	0x20000e20
 80075a8:	20000948 	.word	0x20000948
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d016      	beq.n	80075f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <vTaskDelay+0x60>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <vTaskDelay+0x2e>
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	60bb      	str	r3, [r7, #8]
 80075dc:	e7fe      	b.n	80075dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80075de:	f000 f87f 	bl	80076e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fcd7 	bl	8007f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075ea:	f000 f887 	bl	80076fc <xTaskResumeAll>
 80075ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d107      	bne.n	8007606 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <vTaskDelay+0x64>)
 80075f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20000e40 	.word	0x20000e40
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	; 0x28
 800761c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007626:	463a      	mov	r2, r7
 8007628:	1d39      	adds	r1, r7, #4
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f864 	bl	80066fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007634:	6839      	ldr	r1, [r7, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	9202      	str	r2, [sp, #8]
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2300      	movs	r3, #0
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	460a      	mov	r2, r1
 8007646:	4920      	ldr	r1, [pc, #128]	; (80076c8 <vTaskStartScheduler+0xb0>)
 8007648:	4820      	ldr	r0, [pc, #128]	; (80076cc <vTaskStartScheduler+0xb4>)
 800764a:	f7ff fe13 	bl	8007274 <xTaskCreateStatic>
 800764e:	4602      	mov	r2, r0
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <vTaskStartScheduler+0xb8>)
 8007652:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007654:	4b1e      	ldr	r3, [pc, #120]	; (80076d0 <vTaskStartScheduler+0xb8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800765c:	2301      	movs	r3, #1
 800765e:	617b      	str	r3, [r7, #20]
 8007660:	e001      	b.n	8007666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d102      	bne.n	8007672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800766c:	f000 fce8 	bl	8008040 <xTimerCreateTimerTask>
 8007670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d115      	bne.n	80076a4 <vTaskStartScheduler+0x8c>
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <vTaskStartScheduler+0xbc>)
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007692:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <vTaskStartScheduler+0xc0>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007698:	4b10      	ldr	r3, [pc, #64]	; (80076dc <vTaskStartScheduler+0xc4>)
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800769e:	f001 f89f 	bl	80087e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076a2:	e00d      	b.n	80076c0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d109      	bne.n	80076c0 <vTaskStartScheduler+0xa8>
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	e7fe      	b.n	80076be <vTaskStartScheduler+0xa6>
}
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0800c270 	.word	0x0800c270
 80076cc:	08007ce1 	.word	0x08007ce1
 80076d0:	20000e3c 	.word	0x20000e3c
 80076d4:	20000e38 	.word	0x20000e38
 80076d8:	20000e24 	.word	0x20000e24
 80076dc:	20000e1c 	.word	0x20000e1c

080076e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076e4:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <vTaskSuspendAll+0x18>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a03      	ldr	r2, [pc, #12]	; (80076f8 <vTaskSuspendAll+0x18>)
 80076ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80076ee:	bf00      	nop
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	20000e40 	.word	0x20000e40

080076fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800770a:	4b41      	ldr	r3, [pc, #260]	; (8007810 <xTaskResumeAll+0x114>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <xTaskResumeAll+0x2a>
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	e7fe      	b.n	8007724 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007726:	f001 f8f9 	bl	800891c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800772a:	4b39      	ldr	r3, [pc, #228]	; (8007810 <xTaskResumeAll+0x114>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3b01      	subs	r3, #1
 8007730:	4a37      	ldr	r2, [pc, #220]	; (8007810 <xTaskResumeAll+0x114>)
 8007732:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007734:	4b36      	ldr	r3, [pc, #216]	; (8007810 <xTaskResumeAll+0x114>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d162      	bne.n	8007802 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800773c:	4b35      	ldr	r3, [pc, #212]	; (8007814 <xTaskResumeAll+0x118>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d05e      	beq.n	8007802 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007744:	e02f      	b.n	80077a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007746:	4b34      	ldr	r3, [pc, #208]	; (8007818 <xTaskResumeAll+0x11c>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3318      	adds	r3, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f890 	bl	8006878 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff f88b 	bl	8006878 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007766:	4b2d      	ldr	r3, [pc, #180]	; (800781c <xTaskResumeAll+0x120>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d903      	bls.n	8007776 <xTaskResumeAll+0x7a>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <xTaskResumeAll+0x120>)
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a27      	ldr	r2, [pc, #156]	; (8007820 <xTaskResumeAll+0x124>)
 8007784:	441a      	add	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7ff f816 	bl	80067be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <xTaskResumeAll+0x128>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077a0:	4b21      	ldr	r3, [pc, #132]	; (8007828 <xTaskResumeAll+0x12c>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077a6:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <xTaskResumeAll+0x11c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1cb      	bne.n	8007746 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077b4:	f000 fb46 	bl	8007e44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077b8:	4b1c      	ldr	r3, [pc, #112]	; (800782c <xTaskResumeAll+0x130>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d010      	beq.n	80077e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077c4:	f000 f846 	bl	8007854 <xTaskIncrementTick>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077ce:	4b16      	ldr	r3, [pc, #88]	; (8007828 <xTaskResumeAll+0x12c>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f1      	bne.n	80077c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80077e0:	4b12      	ldr	r3, [pc, #72]	; (800782c <xTaskResumeAll+0x130>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xTaskResumeAll+0x12c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <xTaskResumeAll+0x134>)
 80077f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007802:	f001 f8b9 	bl	8008978 <vPortExitCritical>

	return xAlreadyYielded;
 8007806:	68bb      	ldr	r3, [r7, #8]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000e40 	.word	0x20000e40
 8007814:	20000e18 	.word	0x20000e18
 8007818:	20000dd8 	.word	0x20000dd8
 800781c:	20000e20 	.word	0x20000e20
 8007820:	20000948 	.word	0x20000948
 8007824:	20000944 	.word	0x20000944
 8007828:	20000e2c 	.word	0x20000e2c
 800782c:	20000e28 	.word	0x20000e28
 8007830:	e000ed04 	.word	0xe000ed04

08007834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <xTaskGetTickCount+0x1c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007840:	687b      	ldr	r3, [r7, #4]
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000e1c 	.word	0x20000e1c

08007854 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785e:	4b4e      	ldr	r3, [pc, #312]	; (8007998 <xTaskIncrementTick+0x144>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f040 8088 	bne.w	8007978 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007868:	4b4c      	ldr	r3, [pc, #304]	; (800799c <xTaskIncrementTick+0x148>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007870:	4a4a      	ldr	r2, [pc, #296]	; (800799c <xTaskIncrementTick+0x148>)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11f      	bne.n	80078bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800787c:	4b48      	ldr	r3, [pc, #288]	; (80079a0 <xTaskIncrementTick+0x14c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <xTaskIncrementTick+0x46>
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	e7fe      	b.n	8007898 <xTaskIncrementTick+0x44>
 800789a:	4b41      	ldr	r3, [pc, #260]	; (80079a0 <xTaskIncrementTick+0x14c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	4b40      	ldr	r3, [pc, #256]	; (80079a4 <xTaskIncrementTick+0x150>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a3e      	ldr	r2, [pc, #248]	; (80079a0 <xTaskIncrementTick+0x14c>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	4a3e      	ldr	r2, [pc, #248]	; (80079a4 <xTaskIncrementTick+0x150>)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	4b3e      	ldr	r3, [pc, #248]	; (80079a8 <xTaskIncrementTick+0x154>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <xTaskIncrementTick+0x154>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	f000 fac4 	bl	8007e44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078bc:	4b3b      	ldr	r3, [pc, #236]	; (80079ac <xTaskIncrementTick+0x158>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d349      	bcc.n	800795a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c6:	4b36      	ldr	r3, [pc, #216]	; (80079a0 <xTaskIncrementTick+0x14c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d0:	4b36      	ldr	r3, [pc, #216]	; (80079ac <xTaskIncrementTick+0x158>)
 80078d2:	f04f 32ff 	mov.w	r2, #4294967295
 80078d6:	601a      	str	r2, [r3, #0]
					break;
 80078d8:	e03f      	b.n	800795a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078da:	4b31      	ldr	r3, [pc, #196]	; (80079a0 <xTaskIncrementTick+0x14c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078f2:	4a2e      	ldr	r2, [pc, #184]	; (80079ac <xTaskIncrementTick+0x158>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078f8:	e02f      	b.n	800795a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe ffba 	bl	8006878 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3318      	adds	r3, #24
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe ffb1 	bl	8006878 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <xTaskIncrementTick+0x15c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d903      	bls.n	800792a <xTaskIncrementTick+0xd6>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a22      	ldr	r2, [pc, #136]	; (80079b0 <xTaskIncrementTick+0x15c>)
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <xTaskIncrementTick+0x160>)
 8007938:	441a      	add	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fe ff3c 	bl	80067be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4b1b      	ldr	r3, [pc, #108]	; (80079b8 <xTaskIncrementTick+0x164>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	429a      	cmp	r2, r3
 8007952:	d3b8      	bcc.n	80078c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007954:	2301      	movs	r3, #1
 8007956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007958:	e7b5      	b.n	80078c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800795a:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <xTaskIncrementTick+0x164>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4914      	ldr	r1, [pc, #80]	; (80079b4 <xTaskIncrementTick+0x160>)
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d907      	bls.n	8007982 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007972:	2301      	movs	r3, #1
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	e004      	b.n	8007982 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <xTaskIncrementTick+0x168>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	3301      	adds	r3, #1
 800797e:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <xTaskIncrementTick+0x168>)
 8007980:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <xTaskIncrementTick+0x16c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800798a:	2301      	movs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800798e:	697b      	ldr	r3, [r7, #20]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000e40 	.word	0x20000e40
 800799c:	20000e1c 	.word	0x20000e1c
 80079a0:	20000dd0 	.word	0x20000dd0
 80079a4:	20000dd4 	.word	0x20000dd4
 80079a8:	20000e30 	.word	0x20000e30
 80079ac:	20000e38 	.word	0x20000e38
 80079b0:	20000e20 	.word	0x20000e20
 80079b4:	20000948 	.word	0x20000948
 80079b8:	20000944 	.word	0x20000944
 80079bc:	20000e28 	.word	0x20000e28
 80079c0:	20000e2c 	.word	0x20000e2c

080079c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ca:	4b27      	ldr	r3, [pc, #156]	; (8007a68 <vTaskSwitchContext+0xa4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079d2:	4b26      	ldr	r3, [pc, #152]	; (8007a6c <vTaskSwitchContext+0xa8>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079d8:	e040      	b.n	8007a5c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <vTaskSwitchContext+0xa8>)
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e0:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <vTaskSwitchContext+0xac>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e00f      	b.n	8007a08 <vTaskSwitchContext+0x44>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <vTaskSwitchContext+0x3e>
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
 8007a00:	e7fe      	b.n	8007a00 <vTaskSwitchContext+0x3c>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	491a      	ldr	r1, [pc, #104]	; (8007a74 <vTaskSwitchContext+0xb0>)
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0e5      	beq.n	80079e8 <vTaskSwitchContext+0x24>
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4a13      	ldr	r2, [pc, #76]	; (8007a74 <vTaskSwitchContext+0xb0>)
 8007a28:	4413      	add	r3, r2
 8007a2a:	60bb      	str	r3, [r7, #8]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d104      	bne.n	8007a4c <vTaskSwitchContext+0x88>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	605a      	str	r2, [r3, #4]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	4a09      	ldr	r2, [pc, #36]	; (8007a78 <vTaskSwitchContext+0xb4>)
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	4a06      	ldr	r2, [pc, #24]	; (8007a70 <vTaskSwitchContext+0xac>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6013      	str	r3, [r2, #0]
}
 8007a5c:	bf00      	nop
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	20000e40 	.word	0x20000e40
 8007a6c:	20000e2c 	.word	0x20000e2c
 8007a70:	20000e20 	.word	0x20000e20
 8007a74:	20000948 	.word	0x20000948
 8007a78:	20000944 	.word	0x20000944

08007a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <vTaskPlaceOnEventList+0x24>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e7fe      	b.n	8007a9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aa0:	4b07      	ldr	r3, [pc, #28]	; (8007ac0 <vTaskPlaceOnEventList+0x44>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3318      	adds	r3, #24
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fe feac 	bl	8006806 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aae:	2101      	movs	r1, #1
 8007ab0:	6838      	ldr	r0, [r7, #0]
 8007ab2:	f000 fa71 	bl	8007f98 <prvAddCurrentTaskToDelayedList>
}
 8007ab6:	bf00      	nop
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000944 	.word	0x20000944

08007ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <vTaskPlaceOnEventListRestricted+0x26>
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e7fe      	b.n	8007ae8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aea:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <vTaskPlaceOnEventListRestricted+0x50>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3318      	adds	r3, #24
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7fe fe63 	bl	80067be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	68b8      	ldr	r0, [r7, #8]
 8007b08:	f000 fa46 	bl	8007f98 <prvAddCurrentTaskToDelayedList>
	}
 8007b0c:	bf00      	nop
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000944 	.word	0x20000944

08007b18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <xTaskRemoveFromEventList+0x2a>
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e7fe      	b.n	8007b40 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3318      	adds	r3, #24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fe96 	bl	8006878 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4c:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <xTaskRemoveFromEventList+0xac>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d11d      	bne.n	8007b90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fe8d 	bl	8006878 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <xTaskRemoveFromEventList+0xb0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <xTaskRemoveFromEventList+0x5a>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	4a16      	ldr	r2, [pc, #88]	; (8007bc8 <xTaskRemoveFromEventList+0xb0>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <xTaskRemoveFromEventList+0xb4>)
 8007b80:	441a      	add	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe fe18 	bl	80067be <vListInsertEnd>
 8007b8e:	e005      	b.n	8007b9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	3318      	adds	r3, #24
 8007b94:	4619      	mov	r1, r3
 8007b96:	480e      	ldr	r0, [pc, #56]	; (8007bd0 <xTaskRemoveFromEventList+0xb8>)
 8007b98:	f7fe fe11 	bl	80067be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <xTaskRemoveFromEventList+0xbc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d905      	bls.n	8007bb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bae:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <xTaskRemoveFromEventList+0xc0>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e001      	b.n	8007bba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bba:	697b      	ldr	r3, [r7, #20]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000e40 	.word	0x20000e40
 8007bc8:	20000e20 	.word	0x20000e20
 8007bcc:	20000948 	.word	0x20000948
 8007bd0:	20000dd8 	.word	0x20000dd8
 8007bd4:	20000944 	.word	0x20000944
 8007bd8:	20000e2c 	.word	0x20000e2c

08007bdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <vTaskInternalSetTimeOutState+0x24>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <vTaskInternalSetTimeOutState+0x28>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	20000e30 	.word	0x20000e30
 8007c04:	20000e1c 	.word	0x20000e1c

08007c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <xTaskCheckForTimeOut+0x24>
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	613b      	str	r3, [r7, #16]
 8007c2a:	e7fe      	b.n	8007c2a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <xTaskCheckForTimeOut+0x3e>
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e7fe      	b.n	8007c44 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c46:	f000 fe69 	bl	800891c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <xTaskCheckForTimeOut+0xb8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d102      	bne.n	8007c6a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e023      	b.n	8007cb2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <xTaskCheckForTimeOut+0xbc>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d007      	beq.n	8007c86 <xTaskCheckForTimeOut+0x7e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	e015      	b.n	8007cb2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d20b      	bcs.n	8007ca8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff ff9d 	bl	8007bdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e004      	b.n	8007cb2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cb2:	f000 fe61 	bl	8008978 <vPortExitCritical>

	return xReturn;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000e1c 	.word	0x20000e1c
 8007cc4:	20000e30 	.word	0x20000e30

08007cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <vTaskMissedYield+0x14>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20000e2c 	.word	0x20000e2c

08007ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ce8:	f000 f852 	bl	8007d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <prvIdleTask+0x28>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d9f9      	bls.n	8007ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cf4:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <prvIdleTask+0x2c>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d04:	e7f0      	b.n	8007ce8 <prvIdleTask+0x8>
 8007d06:	bf00      	nop
 8007d08:	20000948 	.word	0x20000948
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	e00c      	b.n	8007d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <prvInitialiseTaskLists+0x60>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fd1a 	bl	8006764 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3301      	adds	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b37      	cmp	r3, #55	; 0x37
 8007d3a:	d9ef      	bls.n	8007d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d3c:	480d      	ldr	r0, [pc, #52]	; (8007d74 <prvInitialiseTaskLists+0x64>)
 8007d3e:	f7fe fd11 	bl	8006764 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d42:	480d      	ldr	r0, [pc, #52]	; (8007d78 <prvInitialiseTaskLists+0x68>)
 8007d44:	f7fe fd0e 	bl	8006764 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d48:	480c      	ldr	r0, [pc, #48]	; (8007d7c <prvInitialiseTaskLists+0x6c>)
 8007d4a:	f7fe fd0b 	bl	8006764 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d4e:	480c      	ldr	r0, [pc, #48]	; (8007d80 <prvInitialiseTaskLists+0x70>)
 8007d50:	f7fe fd08 	bl	8006764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d54:	480b      	ldr	r0, [pc, #44]	; (8007d84 <prvInitialiseTaskLists+0x74>)
 8007d56:	f7fe fd05 	bl	8006764 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <prvInitialiseTaskLists+0x78>)
 8007d5c:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <prvInitialiseTaskLists+0x64>)
 8007d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <prvInitialiseTaskLists+0x7c>)
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <prvInitialiseTaskLists+0x68>)
 8007d64:	601a      	str	r2, [r3, #0]
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000948 	.word	0x20000948
 8007d74:	20000da8 	.word	0x20000da8
 8007d78:	20000dbc 	.word	0x20000dbc
 8007d7c:	20000dd8 	.word	0x20000dd8
 8007d80:	20000dec 	.word	0x20000dec
 8007d84:	20000e04 	.word	0x20000e04
 8007d88:	20000dd0 	.word	0x20000dd0
 8007d8c:	20000dd4 	.word	0x20000dd4

08007d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d96:	e019      	b.n	8007dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d98:	f000 fdc0 	bl	800891c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9c:	4b0f      	ldr	r3, [pc, #60]	; (8007ddc <prvCheckTasksWaitingTermination+0x4c>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fd65 	bl	8006878 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <prvCheckTasksWaitingTermination+0x50>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a0a      	ldr	r2, [pc, #40]	; (8007de0 <prvCheckTasksWaitingTermination+0x50>)
 8007db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <prvCheckTasksWaitingTermination+0x54>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <prvCheckTasksWaitingTermination+0x54>)
 8007dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dc2:	f000 fdd9 	bl	8008978 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f80e 	bl	8007de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <prvCheckTasksWaitingTermination+0x54>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e1      	bne.n	8007d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000dec 	.word	0x20000dec
 8007de0:	20000e18 	.word	0x20000e18
 8007de4:	20000e00 	.word	0x20000e00

08007de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d108      	bne.n	8007e0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 ff68 	bl	8008cd4 <vPortFree>
				vPortFree( pxTCB );
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 ff65 	bl	8008cd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e0a:	e017      	b.n	8007e3c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d103      	bne.n	8007e1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 ff5c 	bl	8008cd4 <vPortFree>
	}
 8007e1c:	e00e      	b.n	8007e3c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d009      	beq.n	8007e3c <prvDeleteTCB+0x54>
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e7fe      	b.n	8007e3a <prvDeleteTCB+0x52>
	}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <prvResetNextTaskUnblockTime+0x38>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e54:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <prvResetNextTaskUnblockTime+0x3c>)
 8007e56:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e5c:	e008      	b.n	8007e70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <prvResetNextTaskUnblockTime+0x38>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <prvResetNextTaskUnblockTime+0x3c>)
 8007e6e:	6013      	str	r3, [r2, #0]
}
 8007e70:	bf00      	nop
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000dd0 	.word	0x20000dd0
 8007e80:	20000e38 	.word	0x20000e38

08007e84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <xTaskGetSchedulerState+0x34>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d102      	bne.n	8007e98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e92:	2301      	movs	r3, #1
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	e008      	b.n	8007eaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <xTaskGetSchedulerState+0x38>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d102      	bne.n	8007ea6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	e001      	b.n	8007eaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007eaa:	687b      	ldr	r3, [r7, #4]
	}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	20000e24 	.word	0x20000e24
 8007ebc:	20000e40 	.word	0x20000e40

08007ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d054      	beq.n	8007f80 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ed6:	4b2d      	ldr	r3, [pc, #180]	; (8007f8c <xTaskPriorityDisinherit+0xcc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d009      	beq.n	8007ef4 <xTaskPriorityDisinherit+0x34>
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e7fe      	b.n	8007ef2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <xTaskPriorityDisinherit+0x50>
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	e7fe      	b.n	8007f0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f14:	1e5a      	subs	r2, r3, #1
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d02c      	beq.n	8007f80 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d128      	bne.n	8007f80 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	3304      	adds	r3, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fca0 	bl	8006878 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <xTaskPriorityDisinherit+0xd0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d903      	bls.n	8007f60 <xTaskPriorityDisinherit+0xa0>
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	4a0c      	ldr	r2, [pc, #48]	; (8007f90 <xTaskPriorityDisinherit+0xd0>)
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f64:	4613      	mov	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <xTaskPriorityDisinherit+0xd4>)
 8007f6e:	441a      	add	r2, r3
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4619      	mov	r1, r3
 8007f76:	4610      	mov	r0, r2
 8007f78:	f7fe fc21 	bl	80067be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f80:	697b      	ldr	r3, [r7, #20]
	}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000944 	.word	0x20000944
 8007f90:	20000e20 	.word	0x20000e20
 8007f94:	20000948 	.word	0x20000948

08007f98 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fa2:	4b21      	ldr	r3, [pc, #132]	; (8008028 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <prvAddCurrentTaskToDelayedList+0x94>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3304      	adds	r3, #4
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fc62 	bl	8006878 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d10a      	bne.n	8007fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d007      	beq.n	8007fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fc2:	4b1a      	ldr	r3, [pc, #104]	; (800802c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4819      	ldr	r0, [pc, #100]	; (8008030 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fcc:	f7fe fbf7 	bl	80067be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fd0:	e026      	b.n	8008020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fda:	4b14      	ldr	r3, [pc, #80]	; (800802c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d209      	bcs.n	8007ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fea:	4b12      	ldr	r3, [pc, #72]	; (8008034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	f7fe fc05 	bl	8006806 <vListInsert>
}
 8007ffc:	e010      	b.n	8008020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <prvAddCurrentTaskToDelayedList+0x94>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f7fe fbfb 	bl	8006806 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	429a      	cmp	r2, r3
 8008018:	d202      	bcs.n	8008020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800801a:	4a08      	ldr	r2, [pc, #32]	; (800803c <prvAddCurrentTaskToDelayedList+0xa4>)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6013      	str	r3, [r2, #0]
}
 8008020:	bf00      	nop
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20000e1c 	.word	0x20000e1c
 800802c:	20000944 	.word	0x20000944
 8008030:	20000e04 	.word	0x20000e04
 8008034:	20000dd4 	.word	0x20000dd4
 8008038:	20000dd0 	.word	0x20000dd0
 800803c:	20000e38 	.word	0x20000e38

08008040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008046:	2300      	movs	r3, #0
 8008048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800804a:	f000 faff 	bl	800864c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800804e:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <xTimerCreateTimerTask+0x80>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d021      	beq.n	800809a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800805e:	1d3a      	adds	r2, r7, #4
 8008060:	f107 0108 	add.w	r1, r7, #8
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fb61 	bl	8006730 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	9202      	str	r2, [sp, #8]
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	2302      	movs	r3, #2
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	460a      	mov	r2, r1
 8008080:	4910      	ldr	r1, [pc, #64]	; (80080c4 <xTimerCreateTimerTask+0x84>)
 8008082:	4811      	ldr	r0, [pc, #68]	; (80080c8 <xTimerCreateTimerTask+0x88>)
 8008084:	f7ff f8f6 	bl	8007274 <xTaskCreateStatic>
 8008088:	4602      	mov	r2, r0
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <xTimerCreateTimerTask+0x8c>)
 800808c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <xTimerCreateTimerTask+0x8c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008096:	2301      	movs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <xTimerCreateTimerTask+0x74>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	613b      	str	r3, [r7, #16]
 80080b2:	e7fe      	b.n	80080b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80080b4:	697b      	ldr	r3, [r7, #20]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000e74 	.word	0x20000e74
 80080c4:	0800c278 	.word	0x0800c278
 80080c8:	08008201 	.word	0x08008201
 80080cc:	20000e78 	.word	0x20000e78

080080d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08a      	sub	sp, #40	; 0x28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080de:	2300      	movs	r3, #0
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <xTimerGenericCommand+0x2c>
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	623b      	str	r3, [r7, #32]
 80080fa:	e7fe      	b.n	80080fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <xTimerGenericCommand+0x94>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02a      	beq.n	800815a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b05      	cmp	r3, #5
 8008114:	dc18      	bgt.n	8008148 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008116:	f7ff feb5 	bl	8007e84 <xTaskGetSchedulerState>
 800811a:	4603      	mov	r3, r0
 800811c:	2b02      	cmp	r3, #2
 800811e:	d109      	bne.n	8008134 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008120:	4b10      	ldr	r3, [pc, #64]	; (8008164 <xTimerGenericCommand+0x94>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	f107 0110 	add.w	r1, r7, #16
 8008128:	2300      	movs	r3, #0
 800812a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800812c:	f7fe fccc 	bl	8006ac8 <xQueueGenericSend>
 8008130:	6278      	str	r0, [r7, #36]	; 0x24
 8008132:	e012      	b.n	800815a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008134:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <xTimerGenericCommand+0x94>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	f107 0110 	add.w	r1, r7, #16
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	f7fe fcc2 	bl	8006ac8 <xQueueGenericSend>
 8008144:	6278      	str	r0, [r7, #36]	; 0x24
 8008146:	e008      	b.n	800815a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008148:	4b06      	ldr	r3, [pc, #24]	; (8008164 <xTimerGenericCommand+0x94>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	f107 0110 	add.w	r1, r7, #16
 8008150:	2300      	movs	r3, #0
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	f7fe fdb2 	bl	8006cbc <xQueueGenericSendFromISR>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800815c:	4618      	mov	r0, r3
 800815e:	3728      	adds	r7, #40	; 0x28
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20000e74 	.word	0x20000e74

08008168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b22      	ldr	r3, [pc, #136]	; (80081fc <prvProcessExpiredTimer+0x94>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fb79 	bl	8006878 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d021      	beq.n	80081d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	18d1      	adds	r1, r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	f000 f8d1 	bl	8008348 <prvInsertTimerInActiveList>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01e      	beq.n	80081ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081ac:	2300      	movs	r3, #0
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2300      	movs	r3, #0
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	2100      	movs	r1, #0
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f7ff ff8a 	bl	80080d0 <xTimerGenericCommand>
 80081bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d112      	bne.n	80081ea <prvProcessExpiredTimer+0x82>
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e7fe      	b.n	80081d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	4798      	blx	r3
}
 80081f2:	bf00      	nop
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000e6c 	.word	0x20000e6c

08008200 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008208:	f107 0308 	add.w	r3, r7, #8
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f857 	bl	80082c0 <prvGetNextExpireTime>
 8008212:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4619      	mov	r1, r3
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 f803 	bl	8008224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800821e:	f000 f8d5 	bl	80083cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008222:	e7f1      	b.n	8008208 <prvTimerTask+0x8>

08008224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800822e:	f7ff fa57 	bl	80076e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008232:	f107 0308 	add.w	r3, r7, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f866 	bl	8008308 <prvSampleTimeNow>
 800823c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d130      	bne.n	80082a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <prvProcessTimerOrBlockTask+0x3c>
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	429a      	cmp	r2, r3
 8008250:	d806      	bhi.n	8008260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008252:	f7ff fa53 	bl	80076fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ff85 	bl	8008168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800825e:	e024      	b.n	80082aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d008      	beq.n	8008278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008266:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <prvProcessTimerOrBlockTask+0x90>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <prvProcessTimerOrBlockTask+0x50>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <prvProcessTimerOrBlockTask+0x52>
 8008274:	2300      	movs	r3, #0
 8008276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <prvProcessTimerOrBlockTask+0x94>)
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	f7fe ffc1 	bl	800720c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800828a:	f7ff fa37 	bl	80076fc <xTaskResumeAll>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <prvProcessTimerOrBlockTask+0x98>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
}
 80082a4:	e001      	b.n	80082aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082a6:	f7ff fa29 	bl	80076fc <xTaskResumeAll>
}
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000e70 	.word	0x20000e70
 80082b8:	20000e74 	.word	0x20000e74
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082c8:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <prvGetNextExpireTime+0x44>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <prvGetNextExpireTime+0x16>
 80082d2:	2201      	movs	r2, #1
 80082d4:	e000      	b.n	80082d8 <prvGetNextExpireTime+0x18>
 80082d6:	2200      	movs	r2, #0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082e4:	4b07      	ldr	r3, [pc, #28]	; (8008304 <prvGetNextExpireTime+0x44>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e001      	b.n	80082f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082f4:	68fb      	ldr	r3, [r7, #12]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000e6c 	.word	0x20000e6c

08008308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008310:	f7ff fa90 	bl	8007834 <xTaskGetTickCount>
 8008314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008316:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <prvSampleTimeNow+0x3c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	d205      	bcs.n	800832c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008320:	f000 f930 	bl	8008584 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e002      	b.n	8008332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008332:	4a04      	ldr	r2, [pc, #16]	; (8008344 <prvSampleTimeNow+0x3c>)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008338:	68fb      	ldr	r3, [r7, #12]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000e7c 	.word	0x20000e7c

08008348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d812      	bhi.n	8008394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e01b      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <prvInsertTimerInActiveList+0x7c>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3304      	adds	r3, #4
 800838a:	4619      	mov	r1, r3
 800838c:	4610      	mov	r0, r2
 800838e:	f7fe fa3a 	bl	8006806 <vListInsert>
 8008392:	e012      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d206      	bcs.n	80083aa <prvInsertTimerInActiveList+0x62>
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d302      	bcc.n	80083aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e007      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083aa:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <prvInsertTimerInActiveList+0x80>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f7fe fa26 	bl	8006806 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083ba:	697b      	ldr	r3, [r7, #20]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20000e70 	.word	0x20000e70
 80083c8:	20000e6c 	.word	0x20000e6c

080083cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	; 0x38
 80083d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d2:	e0c6      	b.n	8008562 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da17      	bge.n	800840a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	3304      	adds	r3, #4
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <prvProcessReceivedCommands+0x2e>
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	e7fe      	b.n	80083f8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008400:	6850      	ldr	r0, [r2, #4]
 8008402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008404:	6892      	ldr	r2, [r2, #8]
 8008406:	4611      	mov	r1, r2
 8008408:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f2c0 80a7 	blt.w	8008560 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d004      	beq.n	8008428 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	3304      	adds	r3, #4
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fa28 	bl	8006878 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008428:	463b      	mov	r3, r7
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff ff6c 	bl	8008308 <prvSampleTimeNow>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b09      	cmp	r3, #9
 8008436:	f200 8094 	bhi.w	8008562 <prvProcessReceivedCommands+0x196>
 800843a:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <prvProcessReceivedCommands+0x74>)
 800843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008440:	08008469 	.word	0x08008469
 8008444:	08008469 	.word	0x08008469
 8008448:	08008469 	.word	0x08008469
 800844c:	080084db 	.word	0x080084db
 8008450:	080084ef 	.word	0x080084ef
 8008454:	08008537 	.word	0x08008537
 8008458:	08008469 	.word	0x08008469
 800845c:	08008469 	.word	0x08008469
 8008460:	080084db 	.word	0x080084db
 8008464:	080084ef 	.word	0x080084ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	b2da      	uxtb	r2, r3
 8008474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	18d1      	adds	r1, r2, r3
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008488:	f7ff ff5e 	bl	8008348 <prvInsertTimerInActiveList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d067      	beq.n	8008562 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008498:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d05c      	beq.n	8008562 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	441a      	add	r2, r3
 80084b0:	2300      	movs	r3, #0
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	f7ff fe09 	bl	80080d0 <xTimerGenericCommand>
 80084be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d14d      	bne.n	8008562 <prvProcessReceivedCommands+0x196>
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	61bb      	str	r3, [r7, #24]
 80084d8:	e7fe      	b.n	80084d8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80084ec:	e039      	b.n	8008562 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <prvProcessReceivedCommands+0x156>
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e7fe      	b.n	8008520 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	699a      	ldr	r2, [r3, #24]
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	18d1      	adds	r1, r2, r3
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008530:	f7ff ff0a 	bl	8008348 <prvInsertTimerInActiveList>
					break;
 8008534:	e015      	b.n	8008562 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008546:	f000 fbc5 	bl	8008cd4 <vPortFree>
 800854a:	e00a      	b.n	8008562 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800855e:	e000      	b.n	8008562 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008560:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <prvProcessReceivedCommands+0x1b4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	1d39      	adds	r1, r7, #4
 8008568:	2200      	movs	r2, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fc3a 	bl	8006de4 <xQueueReceive>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	f47f af2e 	bne.w	80083d4 <prvProcessReceivedCommands+0x8>
	}
}
 8008578:	bf00      	nop
 800857a:	3730      	adds	r7, #48	; 0x30
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000e74 	.word	0x20000e74

08008584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800858a:	e047      	b.n	800861c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800858c:	4b2d      	ldr	r3, [pc, #180]	; (8008644 <prvSwitchTimerLists+0xc0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008596:	4b2b      	ldr	r3, [pc, #172]	; (8008644 <prvSwitchTimerLists+0xc0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3304      	adds	r3, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe f967 	bl	8006878 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d02d      	beq.n	800861c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d90e      	bls.n	80085f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085de:	4b19      	ldr	r3, [pc, #100]	; (8008644 <prvSwitchTimerLists+0xc0>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	4610      	mov	r0, r2
 80085ea:	f7fe f90c 	bl	8006806 <vListInsert>
 80085ee:	e015      	b.n	800861c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	2300      	movs	r3, #0
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	2100      	movs	r1, #0
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff fd68 	bl	80080d0 <xTimerGenericCommand>
 8008600:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <prvSwitchTimerLists+0x98>
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	603b      	str	r3, [r7, #0]
 800861a:	e7fe      	b.n	800861a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800861c:	4b09      	ldr	r3, [pc, #36]	; (8008644 <prvSwitchTimerLists+0xc0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1b2      	bne.n	800858c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <prvSwitchTimerLists+0xc0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <prvSwitchTimerLists+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a04      	ldr	r2, [pc, #16]	; (8008644 <prvSwitchTimerLists+0xc0>)
 8008632:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008634:	4a04      	ldr	r2, [pc, #16]	; (8008648 <prvSwitchTimerLists+0xc4>)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6013      	str	r3, [r2, #0]
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000e6c 	.word	0x20000e6c
 8008648:	20000e70 	.word	0x20000e70

0800864c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008652:	f000 f963 	bl	800891c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008656:	4b15      	ldr	r3, [pc, #84]	; (80086ac <prvCheckForValidListAndQueue+0x60>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d120      	bne.n	80086a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800865e:	4814      	ldr	r0, [pc, #80]	; (80086b0 <prvCheckForValidListAndQueue+0x64>)
 8008660:	f7fe f880 	bl	8006764 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008664:	4813      	ldr	r0, [pc, #76]	; (80086b4 <prvCheckForValidListAndQueue+0x68>)
 8008666:	f7fe f87d 	bl	8006764 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800866a:	4b13      	ldr	r3, [pc, #76]	; (80086b8 <prvCheckForValidListAndQueue+0x6c>)
 800866c:	4a10      	ldr	r2, [pc, #64]	; (80086b0 <prvCheckForValidListAndQueue+0x64>)
 800866e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008670:	4b12      	ldr	r3, [pc, #72]	; (80086bc <prvCheckForValidListAndQueue+0x70>)
 8008672:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <prvCheckForValidListAndQueue+0x68>)
 8008674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008676:	2300      	movs	r3, #0
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <prvCheckForValidListAndQueue+0x74>)
 800867c:	4a11      	ldr	r2, [pc, #68]	; (80086c4 <prvCheckForValidListAndQueue+0x78>)
 800867e:	2110      	movs	r1, #16
 8008680:	200a      	movs	r0, #10
 8008682:	f7fe f98b 	bl	800699c <xQueueGenericCreateStatic>
 8008686:	4602      	mov	r2, r0
 8008688:	4b08      	ldr	r3, [pc, #32]	; (80086ac <prvCheckForValidListAndQueue+0x60>)
 800868a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800868c:	4b07      	ldr	r3, [pc, #28]	; (80086ac <prvCheckForValidListAndQueue+0x60>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008694:	4b05      	ldr	r3, [pc, #20]	; (80086ac <prvCheckForValidListAndQueue+0x60>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	490b      	ldr	r1, [pc, #44]	; (80086c8 <prvCheckForValidListAndQueue+0x7c>)
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fd8e 	bl	80071bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086a0:	f000 f96a 	bl	8008978 <vPortExitCritical>
}
 80086a4:	bf00      	nop
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000e74 	.word	0x20000e74
 80086b0:	20000e44 	.word	0x20000e44
 80086b4:	20000e58 	.word	0x20000e58
 80086b8:	20000e6c 	.word	0x20000e6c
 80086bc:	20000e70 	.word	0x20000e70
 80086c0:	20000f20 	.word	0x20000f20
 80086c4:	20000e80 	.word	0x20000e80
 80086c8:	0800c280 	.word	0x0800c280

080086cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3b04      	subs	r3, #4
 80086dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b04      	subs	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f023 0201 	bic.w	r2, r3, #1
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b04      	subs	r3, #4
 80086fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <pxPortInitialiseStack+0x64>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3b14      	subs	r3, #20
 8008706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3b04      	subs	r3, #4
 8008712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f06f 0202 	mvn.w	r2, #2
 800871a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3b20      	subs	r3, #32
 8008720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008722:	68fb      	ldr	r3, [r7, #12]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	08008735 	.word	0x08008735

08008734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800873e:	4b11      	ldr	r3, [pc, #68]	; (8008784 <prvTaskExitError+0x50>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008746:	d009      	beq.n	800875c <prvTaskExitError+0x28>
 8008748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e7fe      	b.n	800875a <prvTaskExitError+0x26>
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800876e:	bf00      	nop
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0fc      	beq.n	8008770 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008776:	bf00      	nop
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000118 	.word	0x20000118
	...

08008790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <pxCurrentTCBConst2>)
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	6808      	ldr	r0, [r1, #0]
 8008796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	f380 8809 	msr	PSP, r0
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8811 	msr	BASEPRI, r0
 80087aa:	4770      	bx	lr
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst2>:
 80087b0:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087b8:	4808      	ldr	r0, [pc, #32]	; (80087dc <prvPortStartFirstTask+0x24>)
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	6800      	ldr	r0, [r0, #0]
 80087be:	f380 8808 	msr	MSP, r0
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8814 	msr	CONTROL, r0
 80087ca:	b662      	cpsie	i
 80087cc:	b661      	cpsie	f
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	df00      	svc	0
 80087d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087da:	bf00      	nop
 80087dc:	e000ed08 	.word	0xe000ed08

080087e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087e6:	4b44      	ldr	r3, [pc, #272]	; (80088f8 <xPortStartScheduler+0x118>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a44      	ldr	r2, [pc, #272]	; (80088fc <xPortStartScheduler+0x11c>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d109      	bne.n	8008804 <xPortStartScheduler+0x24>
 80087f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	e7fe      	b.n	8008802 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008804:	4b3c      	ldr	r3, [pc, #240]	; (80088f8 <xPortStartScheduler+0x118>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a3d      	ldr	r2, [pc, #244]	; (8008900 <xPortStartScheduler+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d109      	bne.n	8008822 <xPortStartScheduler+0x42>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	e7fe      	b.n	8008820 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008822:	4b38      	ldr	r3, [pc, #224]	; (8008904 <xPortStartScheduler+0x124>)
 8008824:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	22ff      	movs	r2, #255	; 0xff
 8008832:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	b2db      	uxtb	r3, r3
 8008840:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008844:	b2da      	uxtb	r2, r3
 8008846:	4b30      	ldr	r3, [pc, #192]	; (8008908 <xPortStartScheduler+0x128>)
 8008848:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800884a:	4b30      	ldr	r3, [pc, #192]	; (800890c <xPortStartScheduler+0x12c>)
 800884c:	2207      	movs	r2, #7
 800884e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008850:	e009      	b.n	8008866 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008852:	4b2e      	ldr	r3, [pc, #184]	; (800890c <xPortStartScheduler+0x12c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3b01      	subs	r3, #1
 8008858:	4a2c      	ldr	r2, [pc, #176]	; (800890c <xPortStartScheduler+0x12c>)
 800885a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	b2db      	uxtb	r3, r3
 8008864:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800886e:	2b80      	cmp	r3, #128	; 0x80
 8008870:	d0ef      	beq.n	8008852 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008872:	4b26      	ldr	r3, [pc, #152]	; (800890c <xPortStartScheduler+0x12c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f1c3 0307 	rsb	r3, r3, #7
 800887a:	2b04      	cmp	r3, #4
 800887c:	d009      	beq.n	8008892 <xPortStartScheduler+0xb2>
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	e7fe      	b.n	8008890 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <xPortStartScheduler+0x12c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	021b      	lsls	r3, r3, #8
 8008898:	4a1c      	ldr	r2, [pc, #112]	; (800890c <xPortStartScheduler+0x12c>)
 800889a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800889c:	4b1b      	ldr	r3, [pc, #108]	; (800890c <xPortStartScheduler+0x12c>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <xPortStartScheduler+0x12c>)
 80088a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088b0:	4b17      	ldr	r3, [pc, #92]	; (8008910 <xPortStartScheduler+0x130>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a16      	ldr	r2, [pc, #88]	; (8008910 <xPortStartScheduler+0x130>)
 80088b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088bc:	4b14      	ldr	r3, [pc, #80]	; (8008910 <xPortStartScheduler+0x130>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a13      	ldr	r2, [pc, #76]	; (8008910 <xPortStartScheduler+0x130>)
 80088c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088c8:	f000 f8d6 	bl	8008a78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088cc:	4b11      	ldr	r3, [pc, #68]	; (8008914 <xPortStartScheduler+0x134>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088d2:	f000 f8f5 	bl	8008ac0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088d6:	4b10      	ldr	r3, [pc, #64]	; (8008918 <xPortStartScheduler+0x138>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0f      	ldr	r2, [pc, #60]	; (8008918 <xPortStartScheduler+0x138>)
 80088dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088e2:	f7ff ff69 	bl	80087b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088e6:	f7ff f86d 	bl	80079c4 <vTaskSwitchContext>
	prvTaskExitError();
 80088ea:	f7ff ff23 	bl	8008734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed00 	.word	0xe000ed00
 80088fc:	410fc271 	.word	0x410fc271
 8008900:	410fc270 	.word	0x410fc270
 8008904:	e000e400 	.word	0xe000e400
 8008908:	20000f70 	.word	0x20000f70
 800890c:	20000f74 	.word	0x20000f74
 8008910:	e000ed20 	.word	0xe000ed20
 8008914:	20000118 	.word	0x20000118
 8008918:	e000ef34 	.word	0xe000ef34

0800891c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008934:	4b0e      	ldr	r3, [pc, #56]	; (8008970 <vPortEnterCritical+0x54>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3301      	adds	r3, #1
 800893a:	4a0d      	ldr	r2, [pc, #52]	; (8008970 <vPortEnterCritical+0x54>)
 800893c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <vPortEnterCritical+0x54>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d10e      	bne.n	8008964 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008946:	4b0b      	ldr	r3, [pc, #44]	; (8008974 <vPortEnterCritical+0x58>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <vPortEnterCritical+0x48>
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	603b      	str	r3, [r7, #0]
 8008962:	e7fe      	b.n	8008962 <vPortEnterCritical+0x46>
	}
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000118 	.word	0x20000118
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <vPortExitCritical+0x4c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <vPortExitCritical+0x22>
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	e7fe      	b.n	8008998 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800899a:	4b0a      	ldr	r3, [pc, #40]	; (80089c4 <vPortExitCritical+0x4c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3b01      	subs	r3, #1
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <vPortExitCritical+0x4c>)
 80089a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <vPortExitCritical+0x4c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d104      	bne.n	80089b6 <vPortExitCritical+0x3e>
 80089ac:	2300      	movs	r3, #0
 80089ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000118 	.word	0x20000118
	...

080089d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089d0:	f3ef 8009 	mrs	r0, PSP
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <pxCurrentTCBConst>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f01e 0f10 	tst.w	lr, #16
 80089e0:	bf08      	it	eq
 80089e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089f4:	f380 8811 	msr	BASEPRI, r0
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f7fe ffe0 	bl	80079c4 <vTaskSwitchContext>
 8008a04:	f04f 0000 	mov.w	r0, #0
 8008a08:	f380 8811 	msr	BASEPRI, r0
 8008a0c:	bc09      	pop	{r0, r3}
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	f01e 0f10 	tst.w	lr, #16
 8008a1a:	bf08      	it	eq
 8008a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a20:	f380 8809 	msr	PSP, r0
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst>:
 8008a30:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a50:	f7fe ff00 	bl	8007854 <xTaskIncrementTick>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a5a:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <SysTick_Handler+0x3c>)
 8008a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	2300      	movs	r3, #0
 8008a64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	e000ed04 	.word	0xe000ed04

08008a78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <vPortSetupTimerInterrupt+0x34>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <vPortSetupTimerInterrupt+0x38>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <vPortSetupTimerInterrupt+0x3c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <vPortSetupTimerInterrupt+0x40>)
 8008a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a92:	099b      	lsrs	r3, r3, #6
 8008a94:	4a09      	ldr	r2, [pc, #36]	; (8008abc <vPortSetupTimerInterrupt+0x44>)
 8008a96:	3b01      	subs	r3, #1
 8008a98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a9a:	4b04      	ldr	r3, [pc, #16]	; (8008aac <vPortSetupTimerInterrupt+0x34>)
 8008a9c:	2207      	movs	r2, #7
 8008a9e:	601a      	str	r2, [r3, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	e000e010 	.word	0xe000e010
 8008ab0:	e000e018 	.word	0xe000e018
 8008ab4:	20000174 	.word	0x20000174
 8008ab8:	10624dd3 	.word	0x10624dd3
 8008abc:	e000e014 	.word	0xe000e014

08008ac0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ac0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ad0 <vPortEnableVFP+0x10>
 8008ac4:	6801      	ldr	r1, [r0, #0]
 8008ac6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aca:	6001      	str	r1, [r0, #0]
 8008acc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ace:	bf00      	nop
 8008ad0:	e000ed88 	.word	0xe000ed88

08008ad4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ada:	f3ef 8305 	mrs	r3, IPSR
 8008ade:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d913      	bls.n	8008b0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ae6:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <vPortValidateInterruptPriority+0x6c>)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008af0:	4b14      	ldr	r3, [pc, #80]	; (8008b44 <vPortValidateInterruptPriority+0x70>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	7afa      	ldrb	r2, [r7, #11]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d209      	bcs.n	8008b0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	607b      	str	r3, [r7, #4]
 8008b0c:	e7fe      	b.n	8008b0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <vPortValidateInterruptPriority+0x74>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <vPortValidateInterruptPriority+0x78>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d909      	bls.n	8008b32 <vPortValidateInterruptPriority+0x5e>
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	e7fe      	b.n	8008b30 <vPortValidateInterruptPriority+0x5c>
	}
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	e000e3f0 	.word	0xe000e3f0
 8008b44:	20000f70 	.word	0x20000f70
 8008b48:	e000ed0c 	.word	0xe000ed0c
 8008b4c:	20000f74 	.word	0x20000f74

08008b50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	; 0x28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b5c:	f7fe fdc0 	bl	80076e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b60:	4b57      	ldr	r3, [pc, #348]	; (8008cc0 <pvPortMalloc+0x170>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b68:	f000 f90c 	bl	8008d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b6c:	4b55      	ldr	r3, [pc, #340]	; (8008cc4 <pvPortMalloc+0x174>)
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f040 808c 	bne.w	8008c92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01c      	beq.n	8008bba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b80:	2208      	movs	r2, #8
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4413      	add	r3, r2
 8008b86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d013      	beq.n	8008bba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f023 0307 	bic.w	r3, r3, #7
 8008b98:	3308      	adds	r3, #8
 8008b9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d009      	beq.n	8008bba <pvPortMalloc+0x6a>
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e7fe      	b.n	8008bb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d068      	beq.n	8008c92 <pvPortMalloc+0x142>
 8008bc0:	4b41      	ldr	r3, [pc, #260]	; (8008cc8 <pvPortMalloc+0x178>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d863      	bhi.n	8008c92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bca:	4b40      	ldr	r3, [pc, #256]	; (8008ccc <pvPortMalloc+0x17c>)
 8008bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bce:	4b3f      	ldr	r3, [pc, #252]	; (8008ccc <pvPortMalloc+0x17c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bd4:	e004      	b.n	8008be0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d903      	bls.n	8008bf2 <pvPortMalloc+0xa2>
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f1      	bne.n	8008bd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bf2:	4b33      	ldr	r3, [pc, #204]	; (8008cc0 <pvPortMalloc+0x170>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d04a      	beq.n	8008c92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2208      	movs	r2, #8
 8008c02:	4413      	add	r3, r2
 8008c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	2308      	movs	r3, #8
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d91e      	bls.n	8008c5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	f003 0307 	and.w	r3, r3, #7
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d009      	beq.n	8008c44 <pvPortMalloc+0xf4>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	e7fe      	b.n	8008c42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	1ad2      	subs	r2, r2, r3
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c56:	69b8      	ldr	r0, [r7, #24]
 8008c58:	f000 f8f6 	bl	8008e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c5c:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <pvPortMalloc+0x178>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	4a18      	ldr	r2, [pc, #96]	; (8008cc8 <pvPortMalloc+0x178>)
 8008c68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c6a:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <pvPortMalloc+0x178>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <pvPortMalloc+0x180>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d203      	bcs.n	8008c7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <pvPortMalloc+0x178>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <pvPortMalloc+0x180>)
 8008c7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	4b10      	ldr	r3, [pc, #64]	; (8008cc4 <pvPortMalloc+0x174>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c92:	f7fe fd33 	bl	80076fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d009      	beq.n	8008cb4 <pvPortMalloc+0x164>
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	e7fe      	b.n	8008cb2 <pvPortMalloc+0x162>
	return pvReturn;
 8008cb4:	69fb      	ldr	r3, [r7, #28]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3728      	adds	r7, #40	; 0x28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20004b80 	.word	0x20004b80
 8008cc4:	20004b8c 	.word	0x20004b8c
 8008cc8:	20004b84 	.word	0x20004b84
 8008ccc:	20004b78 	.word	0x20004b78
 8008cd0:	20004b88 	.word	0x20004b88

08008cd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d046      	beq.n	8008d74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	425b      	negs	r3, r3
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	4413      	add	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	4b20      	ldr	r3, [pc, #128]	; (8008d7c <vPortFree+0xa8>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <vPortFree+0x42>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e7fe      	b.n	8008d14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <vPortFree+0x5e>
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	60bb      	str	r3, [r7, #8]
 8008d30:	e7fe      	b.n	8008d30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <vPortFree+0xa8>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d019      	beq.n	8008d74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d115      	bne.n	8008d74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <vPortFree+0xa8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	43db      	mvns	r3, r3
 8008d52:	401a      	ands	r2, r3
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d58:	f7fe fcc2 	bl	80076e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <vPortFree+0xac>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4413      	add	r3, r2
 8008d66:	4a06      	ldr	r2, [pc, #24]	; (8008d80 <vPortFree+0xac>)
 8008d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d6a:	6938      	ldr	r0, [r7, #16]
 8008d6c:	f000 f86c 	bl	8008e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d70:	f7fe fcc4 	bl	80076fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d74:	bf00      	nop
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20004b8c 	.word	0x20004b8c
 8008d80:	20004b84 	.word	0x20004b84

08008d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d90:	4b27      	ldr	r3, [pc, #156]	; (8008e30 <prvHeapInit+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3307      	adds	r3, #7
 8008da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	4a1f      	ldr	r2, [pc, #124]	; (8008e30 <prvHeapInit+0xac>)
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <prvHeapInit+0xb0>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <prvHeapInit+0xb0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0307 	bic.w	r3, r3, #7
 8008dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <prvHeapInit+0xb4>)
 8008de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <prvHeapInit+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <prvHeapInit+0xb4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvHeapInit+0xb4>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <prvHeapInit+0xb8>)
 8008e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a09      	ldr	r2, [pc, #36]	; (8008e40 <prvHeapInit+0xbc>)
 8008e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <prvHeapInit+0xc0>)
 8008e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	20000f78 	.word	0x20000f78
 8008e34:	20004b78 	.word	0x20004b78
 8008e38:	20004b80 	.word	0x20004b80
 8008e3c:	20004b88 	.word	0x20004b88
 8008e40:	20004b84 	.word	0x20004b84
 8008e44:	20004b8c 	.word	0x20004b8c

08008e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <prvInsertBlockIntoFreeList+0xac>)
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e002      	b.n	8008e5c <prvInsertBlockIntoFreeList+0x14>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d8f7      	bhi.n	8008e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d108      	bne.n	8008e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d118      	bne.n	8008ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d00d      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e008      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e003      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d002      	beq.n	8008ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20004b78 	.word	0x20004b78
 8008ef8:	20004b80 	.word	0x20004b80

08008efc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8008f04:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008f0a:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008f10:	4b1f      	ldr	r3, [pc, #124]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <WIZCHIP_READ+0x24>
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d114      	bne.n	8008f4a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008f20:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	0c12      	lsrs	r2, r2, #16
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008f2e:	4b18      	ldr	r3, [pc, #96]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	0a12      	lsrs	r2, r2, #8
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008f3c:	4b14      	ldr	r3, [pc, #80]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f3e:	69db      	ldr	r3, [r3, #28]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	e011      	b.n	8008f6e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	0c1b      	lsrs	r3, r3, #16
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	f107 020c 	add.w	r2, r7, #12
 8008f68:	2103      	movs	r1, #3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8008f6e:	4b08      	ldr	r3, [pc, #32]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	4798      	blx	r3
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008f7e:	4b04      	ldr	r3, [pc, #16]	; (8008f90 <WIZCHIP_READ+0x94>)
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	4798      	blx	r3
   return ret;
 8008f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	200001dc 	.word	0x200001dc

08008f94 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8008fa0:	4b22      	ldr	r3, [pc, #136]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008fa6:	4b21      	ldr	r3, [pc, #132]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008fb4:	4b1d      	ldr	r3, [pc, #116]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d119      	bne.n	8008ff0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008fbc:	4b1b      	ldr	r3, [pc, #108]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	0c12      	lsrs	r2, r2, #16
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	0a12      	lsrs	r2, r2, #8
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008fd8:	4b14      	ldr	r3, [pc, #80]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <WIZCHIP_WRITE+0x98>)
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4610      	mov	r0, r2
 8008fec:	4798      	blx	r3
 8008fee:	e013      	b.n	8009018 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	0c1b      	lsrs	r3, r3, #16
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	0a1b      	lsrs	r3, r3, #8
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800900a:	4b08      	ldr	r3, [pc, #32]	; (800902c <WIZCHIP_WRITE+0x98>)
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	f107 020c 	add.w	r2, r7, #12
 8009012:	2104      	movs	r1, #4
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <WIZCHIP_WRITE+0x98>)
 800901a:	695b      	ldr	r3, [r3, #20]
 800901c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800901e:	4b03      	ldr	r3, [pc, #12]	; (800902c <WIZCHIP_WRITE+0x98>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4798      	blx	r3
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	200001dc 	.word	0x200001dc

08009030 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4798      	blx	r3
   WIZCHIP.CS._select();
 8009044:	4b29      	ldr	r3, [pc, #164]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800904a:	4b28      	ldr	r3, [pc, #160]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <WIZCHIP_READ_BUF+0x2a>
 8009052:	4b26      	ldr	r3, [pc, #152]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b00      	cmp	r3, #0
 8009058:	d126      	bne.n	80090a8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	0c12      	lsrs	r2, r2, #16
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8009068:	4b20      	ldr	r3, [pc, #128]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	0a12      	lsrs	r2, r2, #8
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	4610      	mov	r0, r2
 8009074:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8009082:	2300      	movs	r3, #0
 8009084:	82fb      	strh	r3, [r7, #22]
 8009086:	e00a      	b.n	800909e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8009088:	4b18      	ldr	r3, [pc, #96]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	8afa      	ldrh	r2, [r7, #22]
 800908e:	68b9      	ldr	r1, [r7, #8]
 8009090:	188c      	adds	r4, r1, r2
 8009092:	4798      	blx	r3
 8009094:	4603      	mov	r3, r0
 8009096:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8009098:	8afb      	ldrh	r3, [r7, #22]
 800909a:	3301      	adds	r3, #1
 800909c:	82fb      	strh	r3, [r7, #22]
 800909e:	8afa      	ldrh	r2, [r7, #22]
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d3f0      	bcc.n	8009088 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80090a6:	e017      	b.n	80090d8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	0c1b      	lsrs	r3, r3, #16
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	0a1b      	lsrs	r3, r3, #8
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	f107 0210 	add.w	r2, r7, #16
 80090c6:	2103      	movs	r1, #3
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	88fa      	ldrh	r2, [r7, #6]
 80090d2:	4611      	mov	r1, r2
 80090d4:	68b8      	ldr	r0, [r7, #8]
 80090d6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80090d8:	4b04      	ldr	r3, [pc, #16]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <WIZCHIP_READ_BUF+0xbc>)
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	4798      	blx	r3
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd90      	pop	{r4, r7, pc}
 80090ec:	200001dc 	.word	0x200001dc

080090f0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80090fe:	4b2b      	ldr	r3, [pc, #172]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	4798      	blx	r3
   WIZCHIP.CS._select();
 8009104:	4b29      	ldr	r3, [pc, #164]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f043 0304 	orr.w	r3, r3, #4
 8009110:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8009112:	4b26      	ldr	r3, [pc, #152]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	d126      	bne.n	8009168 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800911a:	4b24      	ldr	r3, [pc, #144]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	0c12      	lsrs	r2, r2, #16
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8009128:	4b20      	ldr	r3, [pc, #128]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	0a12      	lsrs	r2, r2, #8
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	4610      	mov	r0, r2
 8009134:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8009136:	4b1d      	ldr	r3, [pc, #116]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	4610      	mov	r0, r2
 8009140:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8009142:	2300      	movs	r3, #0
 8009144:	82fb      	strh	r3, [r7, #22]
 8009146:	e00a      	b.n	800915e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8009148:	4b18      	ldr	r3, [pc, #96]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	8afa      	ldrh	r2, [r7, #22]
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	440a      	add	r2, r1
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8009158:	8afb      	ldrh	r3, [r7, #22]
 800915a:	3301      	adds	r3, #1
 800915c:	82fb      	strh	r3, [r7, #22]
 800915e:	8afa      	ldrh	r2, [r7, #22]
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	429a      	cmp	r2, r3
 8009164:	d3f0      	bcc.n	8009148 <WIZCHIP_WRITE_BUF+0x58>
 8009166:	e017      	b.n	8009198 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	0c1b      	lsrs	r3, r3, #16
 800916c:	b2db      	uxtb	r3, r3
 800916e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	0a1b      	lsrs	r3, r3, #8
 8009174:	b2db      	uxtb	r3, r3
 8009176:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800917e:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	f107 0210 	add.w	r2, r7, #16
 8009186:	2103      	movs	r1, #3
 8009188:	4610      	mov	r0, r2
 800918a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 800918c:	4b07      	ldr	r3, [pc, #28]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	88fa      	ldrh	r2, [r7, #6]
 8009192:	4611      	mov	r1, r2
 8009194:	68b8      	ldr	r0, [r7, #8]
 8009196:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8009198:	4b04      	ldr	r3, [pc, #16]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800919e:	4b03      	ldr	r3, [pc, #12]	; (80091ac <WIZCHIP_WRITE_BUF+0xbc>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	4798      	blx	r3
}
 80091a4:	bf00      	nop
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200001dc 	.word	0x200001dc

080091b0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	81fb      	strh	r3, [r7, #14]
 80091be:	2300      	movs	r3, #0
 80091c0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	3301      	adds	r3, #1
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff fe94 	bl	8008efc <WIZCHIP_READ>
 80091d4:	4603      	mov	r3, r0
 80091d6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80091d8:	89bb      	ldrh	r3, [r7, #12]
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	b29c      	uxth	r4, r3
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	3301      	adds	r3, #1
 80091e4:	00db      	lsls	r3, r3, #3
 80091e6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fe86 	bl	8008efc <WIZCHIP_READ>
 80091f0:	4603      	mov	r3, r0
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4423      	add	r3, r4
 80091f6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80091f8:	89bb      	ldrh	r3, [r7, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01a      	beq.n	8009234 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	3301      	adds	r3, #1
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fe76 	bl	8008efc <WIZCHIP_READ>
 8009210:	4603      	mov	r3, r0
 8009212:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8009214:	89fb      	ldrh	r3, [r7, #14]
 8009216:	021b      	lsls	r3, r3, #8
 8009218:	b29c      	uxth	r4, r3
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	3301      	adds	r3, #1
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff fe68 	bl	8008efc <WIZCHIP_READ>
 800922c:	4603      	mov	r3, r0
 800922e:	b29b      	uxth	r3, r3
 8009230:	4423      	add	r3, r4
 8009232:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8009234:	89fa      	ldrh	r2, [r7, #14]
 8009236:	89bb      	ldrh	r3, [r7, #12]
 8009238:	429a      	cmp	r2, r3
 800923a:	d1c2      	bne.n	80091c2 <getSn_TX_FSR+0x12>
   return val;
 800923c:	89fb      	ldrh	r3, [r7, #14]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	bd90      	pop	{r4, r7, pc}

08009246 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8009246:	b590      	push	{r4, r7, lr}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	4603      	mov	r3, r0
 800924e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8009250:	2300      	movs	r3, #0
 8009252:	81fb      	strh	r3, [r7, #14]
 8009254:	2300      	movs	r3, #0
 8009256:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	3301      	adds	r3, #1
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8009264:	4618      	mov	r0, r3
 8009266:	f7ff fe49 	bl	8008efc <WIZCHIP_READ>
 800926a:	4603      	mov	r3, r0
 800926c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800926e:	89bb      	ldrh	r3, [r7, #12]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	b29c      	uxth	r4, r3
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	3301      	adds	r3, #1
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fe3b 	bl	8008efc <WIZCHIP_READ>
 8009286:	4603      	mov	r3, r0
 8009288:	b29b      	uxth	r3, r3
 800928a:	4423      	add	r3, r4
 800928c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800928e:	89bb      	ldrh	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01a      	beq.n	80092ca <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	3301      	adds	r3, #1
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7ff fe2b 	bl	8008efc <WIZCHIP_READ>
 80092a6:	4603      	mov	r3, r0
 80092a8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80092aa:	89fb      	ldrh	r3, [r7, #14]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	b29c      	uxth	r4, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	3301      	adds	r3, #1
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fe1d 	bl	8008efc <WIZCHIP_READ>
 80092c2:	4603      	mov	r3, r0
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4423      	add	r3, r4
 80092c8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80092ca:	89fa      	ldrh	r2, [r7, #14]
 80092cc:	89bb      	ldrh	r3, [r7, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d1c2      	bne.n	8009258 <getSn_RX_RSR+0x12>
   return val;
 80092d2:	89fb      	ldrh	r3, [r7, #14]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd90      	pop	{r4, r7, pc}

080092dc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80092dc:	b590      	push	{r4, r7, lr}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
 80092e8:	4613      	mov	r3, r2
 80092ea:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80092f4:	88bb      	ldrh	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d048      	beq.n	800938c <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	3301      	adds	r3, #1
 8009300:	00db      	lsls	r3, r3, #3
 8009302:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff fdf8 	bl	8008efc <WIZCHIP_READ>
 800930c:	4603      	mov	r3, r0
 800930e:	b29b      	uxth	r3, r3
 8009310:	021b      	lsls	r3, r3, #8
 8009312:	b29c      	uxth	r4, r3
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	3301      	adds	r3, #1
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fdeb 	bl	8008efc <WIZCHIP_READ>
 8009326:	4603      	mov	r3, r0
 8009328:	b29b      	uxth	r3, r3
 800932a:	4423      	add	r3, r4
 800932c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800932e:	89fb      	ldrh	r3, [r7, #14]
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	79fa      	ldrb	r2, [r7, #7]
 8009334:	0092      	lsls	r2, r2, #2
 8009336:	3202      	adds	r2, #2
 8009338:	00d2      	lsls	r2, r2, #3
 800933a:	4413      	add	r3, r2
 800933c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800933e:	88bb      	ldrh	r3, [r7, #4]
 8009340:	461a      	mov	r2, r3
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	68b8      	ldr	r0, [r7, #8]
 8009346:	f7ff fed3 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800934a:	89fa      	ldrh	r2, [r7, #14]
 800934c:	88bb      	ldrh	r3, [r7, #4]
 800934e:	4413      	add	r3, r2
 8009350:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	3301      	adds	r3, #1
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800935e:	461a      	mov	r2, r3
 8009360:	89fb      	ldrh	r3, [r7, #14]
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b29b      	uxth	r3, r3
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7ff fe12 	bl	8008f94 <WIZCHIP_WRITE>
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3301      	adds	r3, #1
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800937c:	461a      	mov	r2, r3
 800937e:	89fb      	ldrh	r3, [r7, #14]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f7ff fe05 	bl	8008f94 <WIZCHIP_WRITE>
 800938a:	e000      	b.n	800938e <wiz_send_data+0xb2>
   if(len == 0)  return;
 800938c:	bf00      	nop
}
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	bd90      	pop	{r4, r7, pc}

08009394 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80093ac:	88bb      	ldrh	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d048      	beq.n	8009444 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	3301      	adds	r3, #1
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fd9c 	bl	8008efc <WIZCHIP_READ>
 80093c4:	4603      	mov	r3, r0
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	b29c      	uxth	r4, r3
 80093cc:	79fb      	ldrb	r3, [r7, #7]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	3301      	adds	r3, #1
 80093d2:	00db      	lsls	r3, r3, #3
 80093d4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff fd8f 	bl	8008efc <WIZCHIP_READ>
 80093de:	4603      	mov	r3, r0
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	4423      	add	r3, r4
 80093e4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80093e6:	89fb      	ldrh	r3, [r7, #14]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	79fa      	ldrb	r2, [r7, #7]
 80093ec:	0092      	lsls	r2, r2, #2
 80093ee:	3203      	adds	r2, #3
 80093f0:	00d2      	lsls	r2, r2, #3
 80093f2:	4413      	add	r3, r2
 80093f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80093f6:	88bb      	ldrh	r3, [r7, #4]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	68b8      	ldr	r0, [r7, #8]
 80093fe:	f7ff fe17 	bl	8009030 <WIZCHIP_READ_BUF>
   ptr += len;
 8009402:	89fa      	ldrh	r2, [r7, #14]
 8009404:	88bb      	ldrh	r3, [r7, #4]
 8009406:	4413      	add	r3, r2
 8009408:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	3301      	adds	r3, #1
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009416:	461a      	mov	r2, r3
 8009418:	89fb      	ldrh	r3, [r7, #14]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	b29b      	uxth	r3, r3
 800941e:	b2db      	uxtb	r3, r3
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7ff fdb6 	bl	8008f94 <WIZCHIP_WRITE>
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	3301      	adds	r3, #1
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8009434:	461a      	mov	r2, r3
 8009436:	89fb      	ldrh	r3, [r7, #14]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f7ff fda9 	bl	8008f94 <WIZCHIP_WRITE>
 8009442:	e000      	b.n	8009446 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8009444:	bf00      	nop
}
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	bd90      	pop	{r4, r7, pc}

0800944c <W5500_Select>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W5500_Select(void) {
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8009450:	2200      	movs	r2, #0
 8009452:	2110      	movs	r1, #16
 8009454:	4802      	ldr	r0, [pc, #8]	; (8009460 <W5500_Select+0x14>)
 8009456:	f7f7 fb73 	bl	8000b40 <HAL_GPIO_WritePin>
}
 800945a:	bf00      	nop
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	40020000 	.word	0x40020000

08009464 <W5500_Unselect>:

void W5500_Unselect(void) {
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8009468:	2201      	movs	r2, #1
 800946a:	2110      	movs	r1, #16
 800946c:	4802      	ldr	r0, [pc, #8]	; (8009478 <W5500_Unselect+0x14>)
 800946e:	f7f7 fb67 	bl	8000b40 <HAL_GPIO_WritePin>
}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40020000 	.word	0x40020000

0800947c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8009488:	887a      	ldrh	r2, [r7, #2]
 800948a:	f04f 33ff 	mov.w	r3, #4294967295
 800948e:	6879      	ldr	r1, [r7, #4]
 8009490:	4803      	ldr	r0, [pc, #12]	; (80094a0 <W5500_ReadBuff+0x24>)
 8009492:	f7f9 fae3 	bl	8002a5c <HAL_SPI_Receive>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	200051ac 	.word	0x200051ac

080094a4 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	460b      	mov	r3, r1
 80094ae:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 80094b0:	887a      	ldrh	r2, [r7, #2]
 80094b2:	f04f 33ff 	mov.w	r3, #4294967295
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	4803      	ldr	r0, [pc, #12]	; (80094c8 <W5500_WriteBuff+0x24>)
 80094ba:	f7f9 f99b 	bl	80027f4 <HAL_SPI_Transmit>
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200051ac 	.word	0x200051ac

080094cc <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80094d2:	1dfb      	adds	r3, r7, #7
 80094d4:	2101      	movs	r1, #1
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff ffd0 	bl	800947c <W5500_ReadBuff>
    return byte;
 80094dc:	79fb      	ldrb	r3, [r7, #7]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	4603      	mov	r3, r0
 80094ee:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 80094f0:	1dfb      	adds	r3, r7, #7
 80094f2:	2101      	movs	r1, #1
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff ffd5 	bl	80094a4 <W5500_WriteBuff>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <initW5500>:

volatile _Bool ip_assigned = 1;


void initW5500(void) {
 8009504:	b580      	push	{r7, lr}
 8009506:	b08a      	sub	sp, #40	; 0x28
 8009508:	af00      	add	r7, sp, #0

		uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800950a:	4a2a      	ldr	r2, [pc, #168]	; (80095b4 <initW5500+0xb0>)
 800950c:	f107 0320 	add.w	r3, r7, #32
 8009510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009514:	e883 0003 	stmia.w	r3, {r0, r1}


	    wiz_NetInfo net_info = {
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	609a      	str	r2, [r3, #8]
 8009524:	60da      	str	r2, [r3, #12]
 8009526:	611a      	str	r2, [r3, #16]
 8009528:	f8c3 2013 	str.w	r2, [r3, #19]
 800952c:	23ea      	movs	r3, #234	; 0xea
 800952e:	723b      	strb	r3, [r7, #8]
 8009530:	2311      	movs	r3, #17
 8009532:	727b      	strb	r3, [r7, #9]
 8009534:	2322      	movs	r3, #34	; 0x22
 8009536:	72bb      	strb	r3, [r7, #10]
 8009538:	2333      	movs	r3, #51	; 0x33
 800953a:	72fb      	strb	r3, [r7, #11]
 800953c:	2344      	movs	r3, #68	; 0x44
 800953e:	733b      	strb	r3, [r7, #12]
 8009540:	23ea      	movs	r3, #234	; 0xea
 8009542:	737b      	strb	r3, [r7, #13]
 8009544:	23c0      	movs	r3, #192	; 0xc0
 8009546:	73bb      	strb	r3, [r7, #14]
 8009548:	23a8      	movs	r3, #168	; 0xa8
 800954a:	73fb      	strb	r3, [r7, #15]
 800954c:	230a      	movs	r3, #10
 800954e:	747b      	strb	r3, [r7, #17]
 8009550:	23ff      	movs	r3, #255	; 0xff
 8009552:	74bb      	strb	r3, [r7, #18]
 8009554:	23ff      	movs	r3, #255	; 0xff
 8009556:	74fb      	strb	r3, [r7, #19]
 8009558:	23ff      	movs	r3, #255	; 0xff
 800955a:	753b      	strb	r3, [r7, #20]
 800955c:	23c0      	movs	r3, #192	; 0xc0
 800955e:	75bb      	strb	r3, [r7, #22]
 8009560:	23a8      	movs	r3, #168	; 0xa8
 8009562:	75fb      	strb	r3, [r7, #23]
 8009564:	2301      	movs	r3, #1
 8009566:	767b      	strb	r3, [r7, #25]
 8009568:	2301      	movs	r3, #1
 800956a:	77bb      	strb	r3, [r7, #30]
			.gw = { 192, 168, 0, 1 },
			.sn = { 255, 255, 255, 0},
	        .dhcp = NETINFO_STATIC
	    };

	    wiz_NetTimeout s_nettime =
 800956c:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <initW5500+0xb4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	607b      	str	r3, [r7, #4]
	    {
	       	.time_100us = 200,
	    	.retry_cnt = 3
	    };

	    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8009572:	f107 0220 	add.w	r2, r7, #32
 8009576:	f107 0320 	add.w	r3, r7, #32
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f002 f8cb 	bl	800b718 <wizchip_init>

	    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8009582:	490e      	ldr	r1, [pc, #56]	; (80095bc <initW5500+0xb8>)
 8009584:	480e      	ldr	r0, [pc, #56]	; (80095c0 <initW5500+0xbc>)
 8009586:	f001 ffff 	bl	800b588 <reg_wizchip_cs_cbfunc>
	    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800958a:	490e      	ldr	r1, [pc, #56]	; (80095c4 <initW5500+0xc0>)
 800958c:	480e      	ldr	r0, [pc, #56]	; (80095c8 <initW5500+0xc4>)
 800958e:	f002 f81f 	bl	800b5d0 <reg_wizchip_spi_cbfunc>
	    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8009592:	490e      	ldr	r1, [pc, #56]	; (80095cc <initW5500+0xc8>)
 8009594:	480e      	ldr	r0, [pc, #56]	; (80095d0 <initW5500+0xcc>)
 8009596:	f002 f847 	bl	800b628 <reg_wizchip_spiburst_cbfunc>

	    wizchip_setnetinfo(&net_info);
 800959a:	f107 0308 	add.w	r3, r7, #8
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f95c 	bl	800b85c <wizchip_setnetinfo>

	    /* Set the timeout and the maximum number of re-transmit */
	    wizchip_settimeout(&s_nettime);
 80095a4:	1d3b      	adds	r3, r7, #4
 80095a6:	4618      	mov	r0, r3
 80095a8:	f002 f998 	bl	800b8dc <wizchip_settimeout>

}
 80095ac:	bf00      	nop
 80095ae:	3728      	adds	r7, #40	; 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	0800c2ac 	.word	0x0800c2ac
 80095b8:	0800c2b4 	.word	0x0800c2b4
 80095bc:	08009465 	.word	0x08009465
 80095c0:	0800944d 	.word	0x0800944d
 80095c4:	080094e7 	.word	0x080094e7
 80095c8:	080094cd 	.word	0x080094cd
 80095cc:	080094a5 	.word	0x080094a5
 80095d0:	0800947d 	.word	0x0800947d

080095d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	msgINFO = (uint8_t*)"#############################\n\r# STM32F411CEU6 Blackpill   #\n\r#############################\n\r";
 80095d8:	4b24      	ldr	r3, [pc, #144]	; (800966c <main+0x98>)
 80095da:	4a25      	ldr	r2, [pc, #148]	; (8009670 <main+0x9c>)
 80095dc:	601a      	str	r2, [r3, #0]
	msgHELP = (uint8_t*)"For led blinking control type:\n\r blink fast,\n\r blink normal,\n\r blink slow\n\nFor MCU type: info\n\r\n\r";
 80095de:	4b25      	ldr	r3, [pc, #148]	; (8009674 <main+0xa0>)
 80095e0:	4a25      	ldr	r2, [pc, #148]	; (8009678 <main+0xa4>)
 80095e2:	601a      	str	r2, [r3, #0]

	t_blinkingMem = 500;
 80095e4:	4b25      	ldr	r3, [pc, #148]	; (800967c <main+0xa8>)
 80095e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80095ea:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80095ec:	f7f6 ffc8 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80095f0:	f000 f86a 	bl	80096c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80095f4:	f000 f906 	bl	8009804 <MX_GPIO_Init>
  MX_SPI1_Init();
 80095f8:	f000 f8ce 	bl	8009798 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80095fc:	f7fc ff40 	bl	8006480 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(ButtonTask, NULL, &buttonTask_attributes);
 8009600:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <main+0xac>)
 8009602:	2100      	movs	r1, #0
 8009604:	481f      	ldr	r0, [pc, #124]	; (8009684 <main+0xb0>)
 8009606:	f7fc ffa5 	bl	8006554 <osThreadNew>
 800960a:	4602      	mov	r2, r0
 800960c:	4b1e      	ldr	r3, [pc, #120]	; (8009688 <main+0xb4>)
 800960e:	601a      	str	r2, [r3, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(LedTask, NULL, &ledTask_attributes);
 8009610:	4a1e      	ldr	r2, [pc, #120]	; (800968c <main+0xb8>)
 8009612:	2100      	movs	r1, #0
 8009614:	481e      	ldr	r0, [pc, #120]	; (8009690 <main+0xbc>)
 8009616:	f7fc ff9d 	bl	8006554 <osThreadNew>
 800961a:	4602      	mov	r2, r0
 800961c:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <main+0xc0>)
 800961e:	601a      	str	r2, [r3, #0]

  /* creation of usbTask */
  usbTaskHandle = osThreadNew(USBTask, NULL, &usbTask_attributes);
 8009620:	4a1d      	ldr	r2, [pc, #116]	; (8009698 <main+0xc4>)
 8009622:	2100      	movs	r1, #0
 8009624:	481d      	ldr	r0, [pc, #116]	; (800969c <main+0xc8>)
 8009626:	f7fc ff95 	bl	8006554 <osThreadNew>
 800962a:	4602      	mov	r2, r0
 800962c:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <main+0xcc>)
 800962e:	601a      	str	r2, [r3, #0]

  /* creation of spiTask */
  spiTaskHandle = osThreadNew(SpiStartTask, NULL, &spiTask_attributes);
 8009630:	4a1c      	ldr	r2, [pc, #112]	; (80096a4 <main+0xd0>)
 8009632:	2100      	movs	r1, #0
 8009634:	481c      	ldr	r0, [pc, #112]	; (80096a8 <main+0xd4>)
 8009636:	f7fc ff8d 	bl	8006554 <osThreadNew>
 800963a:	4602      	mov	r2, r0
 800963c:	4b1b      	ldr	r3, [pc, #108]	; (80096ac <main+0xd8>)
 800963e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8009640:	f7fc ff52 	bl	80064e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bState = 0;
 8009644:	4b1a      	ldr	r3, [pc, #104]	; (80096b0 <main+0xdc>)
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]
  bStateMem = 0;
 800964a:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <main+0xe0>)
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
  usbBlinkFast = 0;
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <main+0xe4>)
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
  usbBlinkNorm = 0;
 8009656:	4b19      	ldr	r3, [pc, #100]	; (80096bc <main+0xe8>)
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
  usbBlinkSlow = 0;
 800965c:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <main+0xec>)
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
  t_blinking = 500;
 8009662:	4b18      	ldr	r3, [pc, #96]	; (80096c4 <main+0xf0>)
 8009664:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009668:	601a      	str	r2, [r3, #0]

  while (1)
 800966a:	e7fe      	b.n	800966a <main+0x96>
 800966c:	20004c0c 	.word	0x20004c0c
 8009670:	0800c2b8 	.word	0x0800c2b8
 8009674:	20004f1c 	.word	0x20004f1c
 8009678:	0800c318 	.word	0x0800c318
 800967c:	200051a8 	.word	0x200051a8
 8009680:	0800c488 	.word	0x0800c488
 8009684:	08009905 	.word	0x08009905
 8009688:	20005204 	.word	0x20005204
 800968c:	0800c4ac 	.word	0x0800c4ac
 8009690:	08009945 	.word	0x08009945
 8009694:	20004d18 	.word	0x20004d18
 8009698:	0800c4d0 	.word	0x0800c4d0
 800969c:	08009a3d 	.word	0x08009a3d
 80096a0:	20004d10 	.word	0x20004d10
 80096a4:	0800c4f4 	.word	0x0800c4f4
 80096a8:	08009b75 	.word	0x08009b75
 80096ac:	2000540c 	.word	0x2000540c
 80096b0:	20005120 	.word	0x20005120
 80096b4:	20004d15 	.word	0x20004d15
 80096b8:	20005121 	.word	0x20005121
 80096bc:	20004d14 	.word	0x20004d14
 80096c0:	200051a4 	.word	0x200051a4
 80096c4:	20005408 	.word	0x20005408

080096c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b094      	sub	sp, #80	; 0x50
 80096cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096ce:	f107 0320 	add.w	r3, r7, #32
 80096d2:	2230      	movs	r2, #48	; 0x30
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f002 f991 	bl	800b9fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096dc:	f107 030c 	add.w	r3, r7, #12
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	605a      	str	r2, [r3, #4]
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80096ec:	2300      	movs	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <SystemClock_Config+0xc8>)
 80096f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f4:	4a26      	ldr	r2, [pc, #152]	; (8009790 <SystemClock_Config+0xc8>)
 80096f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fa:	6413      	str	r3, [r2, #64]	; 0x40
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <SystemClock_Config+0xc8>)
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009704:	60bb      	str	r3, [r7, #8]
 8009706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009708:	2300      	movs	r3, #0
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	4b21      	ldr	r3, [pc, #132]	; (8009794 <SystemClock_Config+0xcc>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a20      	ldr	r2, [pc, #128]	; (8009794 <SystemClock_Config+0xcc>)
 8009712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	4b1e      	ldr	r3, [pc, #120]	; (8009794 <SystemClock_Config+0xcc>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009720:	607b      	str	r3, [r7, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009724:	2301      	movs	r3, #1
 8009726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800972e:	2302      	movs	r3, #2
 8009730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8009738:	2319      	movs	r3, #25
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800973c:	23c0      	movs	r3, #192	; 0xc0
 800973e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8009740:	2306      	movs	r3, #6
 8009742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009744:	2304      	movs	r3, #4
 8009746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009748:	f107 0320 	add.w	r3, r7, #32
 800974c:	4618      	mov	r0, r3
 800974e:	f7f8 fb93 	bl	8001e78 <HAL_RCC_OscConfig>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8009758:	f000 fb28 	bl	8009dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800975c:	230f      	movs	r3, #15
 800975e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009760:	2302      	movs	r3, #2
 8009762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8009764:	2380      	movs	r3, #128	; 0x80
 8009766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009768:	2300      	movs	r3, #0
 800976a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800976c:	2300      	movs	r3, #0
 800976e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009770:	f107 030c 	add.w	r3, r7, #12
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f7f8 fdee 	bl	8002358 <HAL_RCC_ClockConfig>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8009782:	f000 fb13 	bl	8009dac <Error_Handler>
  }
}
 8009786:	bf00      	nop
 8009788:	3750      	adds	r7, #80	; 0x50
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40023800 	.word	0x40023800
 8009794:	40007000 	.word	0x40007000

08009798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800979c:	4b17      	ldr	r3, [pc, #92]	; (80097fc <MX_SPI1_Init+0x64>)
 800979e:	4a18      	ldr	r2, [pc, #96]	; (8009800 <MX_SPI1_Init+0x68>)
 80097a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80097a2:	4b16      	ldr	r3, [pc, #88]	; (80097fc <MX_SPI1_Init+0x64>)
 80097a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80097a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <MX_SPI1_Init+0x64>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80097b0:	4b12      	ldr	r3, [pc, #72]	; (80097fc <MX_SPI1_Init+0x64>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80097b6:	4b11      	ldr	r3, [pc, #68]	; (80097fc <MX_SPI1_Init+0x64>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <MX_SPI1_Init+0x64>)
 80097be:	2200      	movs	r2, #0
 80097c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80097c2:	4b0e      	ldr	r3, [pc, #56]	; (80097fc <MX_SPI1_Init+0x64>)
 80097c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097ca:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <MX_SPI1_Init+0x64>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <MX_SPI1_Init+0x64>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <MX_SPI1_Init+0x64>)
 80097d8:	2200      	movs	r2, #0
 80097da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097dc:	4b07      	ldr	r3, [pc, #28]	; (80097fc <MX_SPI1_Init+0x64>)
 80097de:	2200      	movs	r2, #0
 80097e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <MX_SPI1_Init+0x64>)
 80097e4:	220a      	movs	r2, #10
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80097e8:	4804      	ldr	r0, [pc, #16]	; (80097fc <MX_SPI1_Init+0x64>)
 80097ea:	f7f8 ff9f 	bl	800272c <HAL_SPI_Init>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80097f4:	f000 fada 	bl	8009dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200051ac 	.word	0x200051ac
 8009800:	40013000 	.word	0x40013000

08009804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800980a:	f107 030c 	add.w	r3, r7, #12
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	605a      	str	r2, [r3, #4]
 8009814:	609a      	str	r2, [r3, #8]
 8009816:	60da      	str	r2, [r3, #12]
 8009818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800981a:	2300      	movs	r3, #0
 800981c:	60bb      	str	r3, [r7, #8]
 800981e:	4b36      	ldr	r3, [pc, #216]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	4a35      	ldr	r2, [pc, #212]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009824:	f043 0304 	orr.w	r3, r3, #4
 8009828:	6313      	str	r3, [r2, #48]	; 0x30
 800982a:	4b33      	ldr	r3, [pc, #204]	; (80098f8 <MX_GPIO_Init+0xf4>)
 800982c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	60bb      	str	r3, [r7, #8]
 8009834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
 800983a:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <MX_GPIO_Init+0xf4>)
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	4a2e      	ldr	r2, [pc, #184]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009844:	6313      	str	r3, [r2, #48]	; 0x30
 8009846:	4b2c      	ldr	r3, [pc, #176]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009852:	2300      	movs	r3, #0
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	4a27      	ldr	r2, [pc, #156]	; (80098f8 <MX_GPIO_Init+0xf4>)
 800985c:	f043 0301 	orr.w	r3, r3, #1
 8009860:	6313      	str	r3, [r2, #48]	; 0x30
 8009862:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <MX_GPIO_Init+0xf4>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800986e:	2200      	movs	r2, #0
 8009870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009874:	4821      	ldr	r0, [pc, #132]	; (80098fc <MX_GPIO_Init+0xf8>)
 8009876:	f7f7 f963 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800987a:	2200      	movs	r2, #0
 800987c:	2110      	movs	r1, #16
 800987e:	4820      	ldr	r0, [pc, #128]	; (8009900 <MX_GPIO_Init+0xfc>)
 8009880:	f7f7 f95e 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800988a:	2301      	movs	r3, #1
 800988c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800988e:	2301      	movs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009892:	2300      	movs	r3, #0
 8009894:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009896:	f107 030c 	add.w	r3, r7, #12
 800989a:	4619      	mov	r1, r3
 800989c:	4817      	ldr	r0, [pc, #92]	; (80098fc <MX_GPIO_Init+0xf8>)
 800989e:	f7f6 ffb5 	bl	800080c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80098a2:	2301      	movs	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098a6:	2300      	movs	r3, #0
 80098a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098ae:	f107 030c 	add.w	r3, r7, #12
 80098b2:	4619      	mov	r1, r3
 80098b4:	4812      	ldr	r0, [pc, #72]	; (8009900 <MX_GPIO_Init+0xfc>)
 80098b6:	f7f6 ffa9 	bl	800080c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80098ba:	2302      	movs	r3, #2
 80098bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098be:	2300      	movs	r3, #0
 80098c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80098c2:	2302      	movs	r3, #2
 80098c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4619      	mov	r1, r3
 80098cc:	480c      	ldr	r0, [pc, #48]	; (8009900 <MX_GPIO_Init+0xfc>)
 80098ce:	f7f6 ff9d 	bl	800080c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80098d2:	2310      	movs	r3, #16
 80098d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098d6:	2301      	movs	r3, #1
 80098d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80098e2:	f107 030c 	add.w	r3, r7, #12
 80098e6:	4619      	mov	r1, r3
 80098e8:	4805      	ldr	r0, [pc, #20]	; (8009900 <MX_GPIO_Init+0xfc>)
 80098ea:	f7f6 ff8f 	bl	800080c <HAL_GPIO_Init>

}
 80098ee:	bf00      	nop
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40023800 	.word	0x40023800
 80098fc:	40020800 	.word	0x40020800
 8009900:	40020000 	.word	0x40020000

08009904 <ButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ButtonTask */
void ButtonTask(void *argument)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800990c:	f001 f8c6 	bl	800aa9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8009910:	2101      	movs	r1, #1
 8009912:	480a      	ldr	r0, [pc, #40]	; (800993c <ButtonTask+0x38>)
 8009914:	f7f7 f8fc 	bl	8000b10 <HAL_GPIO_ReadPin>
 8009918:	4603      	mov	r3, r0
 800991a:	2b01      	cmp	r3, #1
 800991c:	d106      	bne.n	800992c <ButtonTask+0x28>
	  {
		  bState = 1;
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <ButtonTask+0x3c>)
 8009920:	2201      	movs	r2, #1
 8009922:	701a      	strb	r2, [r3, #0]
		  osDelay(30);    // Simple debounce for rising edge
 8009924:	201e      	movs	r0, #30
 8009926:	f7fc febb 	bl	80066a0 <osDelay>
 800992a:	e002      	b.n	8009932 <ButtonTask+0x2e>
	  }
	  else
	  {
		  bState = 0;
 800992c:	4b04      	ldr	r3, [pc, #16]	; (8009940 <ButtonTask+0x3c>)
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(1);
 8009932:	2001      	movs	r0, #1
 8009934:	f7fc feb4 	bl	80066a0 <osDelay>
	  if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8009938:	e7ea      	b.n	8009910 <ButtonTask+0xc>
 800993a:	bf00      	nop
 800993c:	40020000 	.word	0x40020000
 8009940:	20005120 	.word	0x20005120

08009944 <LedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTask */
void LedTask(void *argument)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTask */
  /* Infinite loop */
  for(;;)
  {
	  // Change from Button PA0
	  if(!bState && bStateMem)
 800994c:	4b33      	ldr	r3, [pc, #204]	; (8009a1c <LedTask+0xd8>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10d      	bne.n	8009970 <LedTask+0x2c>
 8009954:	4b32      	ldr	r3, [pc, #200]	; (8009a20 <LedTask+0xdc>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d009      	beq.n	8009970 <LedTask+0x2c>
	  {
		  bStateMem = bState;
 800995c:	4b2f      	ldr	r3, [pc, #188]	; (8009a1c <LedTask+0xd8>)
 800995e:	781a      	ldrb	r2, [r3, #0]
 8009960:	4b2f      	ldr	r3, [pc, #188]	; (8009a20 <LedTask+0xdc>)
 8009962:	701a      	strb	r2, [r3, #0]
		  t_blinking = 20;
 8009964:	4b2f      	ldr	r3, [pc, #188]	; (8009a24 <LedTask+0xe0>)
 8009966:	2214      	movs	r2, #20
 8009968:	601a      	str	r2, [r3, #0]
		  osDelay(30);
 800996a:	201e      	movs	r0, #30
 800996c:	f7fc fe98 	bl	80066a0 <osDelay>
	  }
	  if(bState && !bStateMem)
 8009970:	4b2a      	ldr	r3, [pc, #168]	; (8009a1c <LedTask+0xd8>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00e      	beq.n	8009996 <LedTask+0x52>
 8009978:	4b29      	ldr	r3, [pc, #164]	; (8009a20 <LedTask+0xdc>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10a      	bne.n	8009996 <LedTask+0x52>
	  {
		  bStateMem = bState;
 8009980:	4b26      	ldr	r3, [pc, #152]	; (8009a1c <LedTask+0xd8>)
 8009982:	781a      	ldrb	r2, [r3, #0]
 8009984:	4b26      	ldr	r3, [pc, #152]	; (8009a20 <LedTask+0xdc>)
 8009986:	701a      	strb	r2, [r3, #0]
		  t_blinking = t_blinkingMem;
 8009988:	4b27      	ldr	r3, [pc, #156]	; (8009a28 <LedTask+0xe4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a25      	ldr	r2, [pc, #148]	; (8009a24 <LedTask+0xe0>)
 800998e:	6013      	str	r3, [r2, #0]
		  osDelay(30);
 8009990:	201e      	movs	r0, #30
 8009992:	f7fc fe85 	bl	80066a0 <osDelay>
	  }

	  // Change from USB requests
	  if(usbBlinkFast)
 8009996:	4b25      	ldr	r3, [pc, #148]	; (8009a2c <LedTask+0xe8>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d009      	beq.n	80099b2 <LedTask+0x6e>
	  {
		  usbBlinkFast = 0;
 800999e:	4b23      	ldr	r3, [pc, #140]	; (8009a2c <LedTask+0xe8>)
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
		  t_blinking = 50;
 80099a4:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <LedTask+0xe0>)
 80099a6:	2232      	movs	r2, #50	; 0x32
 80099a8:	601a      	str	r2, [r3, #0]
		  t_blinkingMem = t_blinking;
 80099aa:	4b1e      	ldr	r3, [pc, #120]	; (8009a24 <LedTask+0xe0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1e      	ldr	r2, [pc, #120]	; (8009a28 <LedTask+0xe4>)
 80099b0:	6013      	str	r3, [r2, #0]
	  }
	  if(usbBlinkNorm)
 80099b2:	4b1f      	ldr	r3, [pc, #124]	; (8009a30 <LedTask+0xec>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <LedTask+0x8c>
	  {
		  usbBlinkNorm = 0;
 80099ba:	4b1d      	ldr	r3, [pc, #116]	; (8009a30 <LedTask+0xec>)
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
		  t_blinking = 500;
 80099c0:	4b18      	ldr	r3, [pc, #96]	; (8009a24 <LedTask+0xe0>)
 80099c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80099c6:	601a      	str	r2, [r3, #0]
		  t_blinkingMem = t_blinking;
 80099c8:	4b16      	ldr	r3, [pc, #88]	; (8009a24 <LedTask+0xe0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a16      	ldr	r2, [pc, #88]	; (8009a28 <LedTask+0xe4>)
 80099ce:	6013      	str	r3, [r2, #0]
	  }
	  if(usbBlinkSlow)
 80099d0:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <LedTask+0xf0>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <LedTask+0xaa>
	  {
		  usbBlinkSlow = 0;
 80099d8:	4b16      	ldr	r3, [pc, #88]	; (8009a34 <LedTask+0xf0>)
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
		  t_blinking = 2000;
 80099de:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <LedTask+0xe0>)
 80099e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80099e4:	601a      	str	r2, [r3, #0]
		  t_blinkingMem = t_blinking;
 80099e6:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <LedTask+0xe0>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a0f      	ldr	r2, [pc, #60]	; (8009a28 <LedTask+0xe4>)
 80099ec:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80099ee:	2201      	movs	r2, #1
 80099f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099f4:	4810      	ldr	r0, [pc, #64]	; (8009a38 <LedTask+0xf4>)
 80099f6:	f7f7 f8a3 	bl	8000b40 <HAL_GPIO_WritePin>
	  osDelay(t_blinking);
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <LedTask+0xe0>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fc fe4e 	bl	80066a0 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8009a04:	2200      	movs	r2, #0
 8009a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a0a:	480b      	ldr	r0, [pc, #44]	; (8009a38 <LedTask+0xf4>)
 8009a0c:	f7f7 f898 	bl	8000b40 <HAL_GPIO_WritePin>
	  osDelay(t_blinking);
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <LedTask+0xe0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fc fe43 	bl	80066a0 <osDelay>
	  if(!bState && bStateMem)
 8009a1a:	e797      	b.n	800994c <LedTask+0x8>
 8009a1c:	20005120 	.word	0x20005120
 8009a20:	20004d15 	.word	0x20004d15
 8009a24:	20005408 	.word	0x20005408
 8009a28:	200051a8 	.word	0x200051a8
 8009a2c:	20005121 	.word	0x20005121
 8009a30:	20004d14 	.word	0x20004d14
 8009a34:	200051a4 	.word	0x200051a4
 8009a38:	40020800 	.word	0x40020800

08009a3c <USBTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USBTask */
void USBTask(void *argument)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBTask */
  /* Infinite loop */
  for(;;)
  {
	  // Receive data by USB
	  if(ReceivedDataFlag == 1){
 8009a44:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <USBTask+0xf0>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d16b      	bne.n	8009b24 <USBTask+0xe8>
		uint8_t rcv = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
	  	ReceivedDataFlag = 0;
 8009a50:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <USBTask+0xf0>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	701a      	strb	r2, [r3, #0]
	  	if(strncmp((char*)ReceivedDataBuffer, "help", 4) == 0)
 8009a56:	2204      	movs	r2, #4
 8009a58:	4935      	ldr	r1, [pc, #212]	; (8009b30 <USBTask+0xf4>)
 8009a5a:	4836      	ldr	r0, [pc, #216]	; (8009b34 <USBTask+0xf8>)
 8009a5c:	f002 f8c5 	bl	800bbea <strncmp>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d107      	bne.n	8009a76 <USBTask+0x3a>
	  	{
	  		rcv = 1;
 8009a66:	2301      	movs	r3, #1
 8009a68:	73fb      	strb	r3, [r7, #15]
	  		CDC_Transmit_FS(msgHELP, MSG_HELP_SIZE);
 8009a6a:	4b33      	ldr	r3, [pc, #204]	; (8009b38 <USBTask+0xfc>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2161      	movs	r1, #97	; 0x61
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 f8ed 	bl	800ac50 <CDC_Transmit_FS>
	  	}
	  	if(strncmp((char*)ReceivedDataBuffer, "info", 4) == 0)
 8009a76:	2204      	movs	r2, #4
 8009a78:	4930      	ldr	r1, [pc, #192]	; (8009b3c <USBTask+0x100>)
 8009a7a:	482e      	ldr	r0, [pc, #184]	; (8009b34 <USBTask+0xf8>)
 8009a7c:	f002 f8b5 	bl	800bbea <strncmp>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d107      	bne.n	8009a96 <USBTask+0x5a>
	  	{
	  		rcv = 1;
 8009a86:	2301      	movs	r3, #1
 8009a88:	73fb      	strb	r3, [r7, #15]
	  		CDC_Transmit_FS(msgINFO, MSG_INFO_SIZE);
 8009a8a:	4b2d      	ldr	r3, [pc, #180]	; (8009b40 <USBTask+0x104>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	215d      	movs	r1, #93	; 0x5d
 8009a90:	4618      	mov	r0, r3
 8009a92:	f001 f8dd 	bl	800ac50 <CDC_Transmit_FS>
	    }
	  	if(strncmp((char*)ReceivedDataBuffer, "blink fast", 10) == 0)
 8009a96:	220a      	movs	r2, #10
 8009a98:	492a      	ldr	r1, [pc, #168]	; (8009b44 <USBTask+0x108>)
 8009a9a:	4826      	ldr	r0, [pc, #152]	; (8009b34 <USBTask+0xf8>)
 8009a9c:	f002 f8a5 	bl	800bbea <strncmp>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d108      	bne.n	8009ab8 <USBTask+0x7c>
	    {
	  		rcv = 1;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]
	  		usbBlinkFast = 1;
 8009aaa:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <USBTask+0x10c>)
 8009aac:	2201      	movs	r2, #1
 8009aae:	701a      	strb	r2, [r3, #0]
	  		CDC_Transmit_FS((uint8_t*)"Blinking set to fast speed..\n\r", (uint16_t)30);
 8009ab0:	211e      	movs	r1, #30
 8009ab2:	4826      	ldr	r0, [pc, #152]	; (8009b4c <USBTask+0x110>)
 8009ab4:	f001 f8cc 	bl	800ac50 <CDC_Transmit_FS>
	    }
	  	if(strncmp((char*)ReceivedDataBuffer, "blink normal", 12) == 0)
 8009ab8:	220c      	movs	r2, #12
 8009aba:	4925      	ldr	r1, [pc, #148]	; (8009b50 <USBTask+0x114>)
 8009abc:	481d      	ldr	r0, [pc, #116]	; (8009b34 <USBTask+0xf8>)
 8009abe:	f002 f894 	bl	800bbea <strncmp>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d108      	bne.n	8009ada <USBTask+0x9e>
	  	{
	  		rcv = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
	  		usbBlinkNorm = 1;
 8009acc:	4b21      	ldr	r3, [pc, #132]	; (8009b54 <USBTask+0x118>)
 8009ace:	2201      	movs	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
	  		CDC_Transmit_FS((uint8_t*)"Blinking set to normal speed..\n\r", 32);
 8009ad2:	2120      	movs	r1, #32
 8009ad4:	4820      	ldr	r0, [pc, #128]	; (8009b58 <USBTask+0x11c>)
 8009ad6:	f001 f8bb 	bl	800ac50 <CDC_Transmit_FS>
	    }
	  	if(strncmp((char*)ReceivedDataBuffer, "blink slow", 10) == 0)
 8009ada:	220a      	movs	r2, #10
 8009adc:	491f      	ldr	r1, [pc, #124]	; (8009b5c <USBTask+0x120>)
 8009ade:	4815      	ldr	r0, [pc, #84]	; (8009b34 <USBTask+0xf8>)
 8009ae0:	f002 f883 	bl	800bbea <strncmp>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d108      	bne.n	8009afc <USBTask+0xc0>
	  	{
	  		rcv = 1;
 8009aea:	2301      	movs	r3, #1
 8009aec:	73fb      	strb	r3, [r7, #15]
	  		usbBlinkSlow = 1;
 8009aee:	4b1c      	ldr	r3, [pc, #112]	; (8009b60 <USBTask+0x124>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	701a      	strb	r2, [r3, #0]
	  		CDC_Transmit_FS((uint8_t*)"Blinking set to slow speed..\n\r", 30);
 8009af4:	211e      	movs	r1, #30
 8009af6:	481b      	ldr	r0, [pc, #108]	; (8009b64 <USBTask+0x128>)
 8009af8:	f001 f8aa 	bl	800ac50 <CDC_Transmit_FS>
	    }

	  	if(!rcv)
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d110      	bne.n	8009b24 <USBTask+0xe8>
	  	{
	  		rcv = 1;
 8009b02:	2301      	movs	r3, #1
 8009b04:	73fb      	strb	r3, [r7, #15]
	  		MessageLength = sprintf((char*)DataToSend, "Got other message (type: help): %s\n\r", ReceivedDataBuffer);
 8009b06:	4a0b      	ldr	r2, [pc, #44]	; (8009b34 <USBTask+0xf8>)
 8009b08:	4917      	ldr	r1, [pc, #92]	; (8009b68 <USBTask+0x12c>)
 8009b0a:	4818      	ldr	r0, [pc, #96]	; (8009b6c <USBTask+0x130>)
 8009b0c:	f002 f838 	bl	800bb80 <siprintf>
 8009b10:	4602      	mov	r2, r0
 8009b12:	4b17      	ldr	r3, [pc, #92]	; (8009b70 <USBTask+0x134>)
 8009b14:	601a      	str	r2, [r3, #0]
	  		CDC_Transmit_FS(DataToSend, MessageLength);
 8009b16:	4b16      	ldr	r3, [pc, #88]	; (8009b70 <USBTask+0x134>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4813      	ldr	r0, [pc, #76]	; (8009b6c <USBTask+0x130>)
 8009b20:	f001 f896 	bl	800ac50 <CDC_Transmit_FS>
	  	}
	  }
    osDelay(1);
 8009b24:	2001      	movs	r0, #1
 8009b26:	f7fc fdbb 	bl	80066a0 <osDelay>
	  if(ReceivedDataFlag == 1){
 8009b2a:	e78b      	b.n	8009a44 <USBTask+0x8>
 8009b2c:	20004b94 	.word	0x20004b94
 8009b30:	0800c37c 	.word	0x0800c37c
 8009b34:	20004f20 	.word	0x20004f20
 8009b38:	20004f1c 	.word	0x20004f1c
 8009b3c:	0800c384 	.word	0x0800c384
 8009b40:	20004c0c 	.word	0x20004c0c
 8009b44:	0800c38c 	.word	0x0800c38c
 8009b48:	20005121 	.word	0x20005121
 8009b4c:	0800c398 	.word	0x0800c398
 8009b50:	0800c3b8 	.word	0x0800c3b8
 8009b54:	20004d14 	.word	0x20004d14
 8009b58:	0800c3c8 	.word	0x0800c3c8
 8009b5c:	0800c3ec 	.word	0x0800c3ec
 8009b60:	200051a4 	.word	0x200051a4
 8009b64:	0800c3f8 	.word	0x0800c3f8
 8009b68:	0800c418 	.word	0x0800c418
 8009b6c:	20004d1c 	.word	0x20004d1c
 8009b70:	20004b90 	.word	0x20004b90

08009b74 <SpiStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SpiStartTask */
void SpiStartTask(void *argument)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b096      	sub	sp, #88	; 0x58
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SpiStartTask */
	initW5500();
 8009b7c:	f7ff fcc2 	bl	8009504 <initW5500>
	tcp_sequence = 1;
 8009b80:	4b7d      	ldr	r3, [pc, #500]	; (8009d78 <SpiStartTask+0x204>)
 8009b82:	2201      	movs	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
	// create a socket: TCP
	uint8_t SockNr = TCP1_SOCKET;
 8009b86:	2301      	movs	r3, #1
 8009b88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t sock_buf[64];
	uint16_t sock_len = 64;
 8009b8c:	2340      	movs	r3, #64	; 0x40
 8009b8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint8_t sock_status = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	//Modbus TCP
	uMB_resp_msg_create(&response);
 8009b98:	4878      	ldr	r0, [pc, #480]	; (8009d7c <SpiStartTask+0x208>)
 8009b9a:	f000 fe83 	bl	800a8a4 <uMB_resp_msg_create>

	sock_status = socket(SockNr, Sn_MR_TCP, 502, SF_TCP_NODELAY); //SF_TCP_NODELAY
 8009b9e:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8009ba2:	2320      	movs	r3, #32
 8009ba4:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009ba8:	2101      	movs	r1, #1
 8009baa:	f000 f907 	bl	8009dbc <socket>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(sock_status != SockNr) {
 8009bb4:	e00d      	b.n	8009bd2 <SpiStartTask+0x5e>
			osDelay(10);
 8009bb6:	200a      	movs	r0, #10
 8009bb8:	f7fc fd72 	bl	80066a0 <osDelay>
			sock_status = socket(SockNr, Sn_MR_TCP, 502, SF_TCP_NODELAY);
 8009bbc:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8009bc0:	2320      	movs	r3, #32
 8009bc2:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	f000 f8f8 	bl	8009dbc <socket>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(sock_status != SockNr) {
 8009bd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009bd6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d1eb      	bne.n	8009bb6 <SpiStartTask+0x42>
		}
	tcp_sequence = 2;
 8009bde:	4b66      	ldr	r3, [pc, #408]	; (8009d78 <SpiStartTask+0x204>)
 8009be0:	2202      	movs	r2, #2
 8009be2:	701a      	strb	r2, [r3, #0]
	sock_status = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	sock_status = listen(SockNr);
 8009bea:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fa68 	bl	800a0c4 <listen>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(sock_status != SOCK_OK) osDelay(10);
 8009bfa:	e002      	b.n	8009c02 <SpiStartTask+0x8e>
 8009bfc:	200a      	movs	r0, #10
 8009bfe:	f7fc fd4f 	bl	80066a0 <osDelay>
 8009c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d1f8      	bne.n	8009bfc <SpiStartTask+0x88>
	tcp_sequence = 3;
 8009c0a:	4b5b      	ldr	r3, [pc, #364]	; (8009d78 <SpiStartTask+0x204>)
 8009c0c:	2203      	movs	r2, #3
 8009c0e:	701a      	strb	r2, [r3, #0]
	sock_status = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	int8_t phylink;

  /* Infinite loop */
  for(;;)
  {
	  getSn = getSn_SR(SockNr);
 8009c16:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff f969 	bl	8008efc <WIZCHIP_READ>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  ir = Sn_IR(SockNr);
 8009c30:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009c46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  if(getSn == SOCK_CLOSED || getSn != SOCK_ESTABLISHED || getSn == SOCK_CLOSE_WAIT || ir == Sn_IR_TIMEOUT || sock_status == SOCKERR_TIMEOUT || phylink == PHY_LINK_OFF)
 8009c4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00f      	beq.n	8009c72 <SpiStartTask+0xfe>
 8009c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c56:	2b17      	cmp	r3, #23
 8009c58:	d10b      	bne.n	8009c72 <SpiStartTask+0xfe>
 8009c5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c5e:	2b1c      	cmp	r3, #28
 8009c60:	d007      	beq.n	8009c72 <SpiStartTask+0xfe>
 8009c62:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c66:	2b08      	cmp	r3, #8
 8009c68:	d003      	beq.n	8009c72 <SpiStartTask+0xfe>
 8009c6a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d11c      	bne.n	8009cac <SpiStartTask+0x138>
	  {
		  if(getSn == SOCK_CLOSE_WAIT || ir == Sn_IR_TIMEOUT || sock_status == SOCKERR_TIMEOUT) disconnect(SockNr);
 8009c72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c76:	2b1c      	cmp	r3, #28
 8009c78:	d003      	beq.n	8009c82 <SpiStartTask+0x10e>
 8009c7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d104      	bne.n	8009c8c <SpiStartTask+0x118>
 8009c82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fa76 	bl	800a178 <disconnect>
		  close(SockNr);
 8009c8c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 f9a9 	bl	8009fe8 <close>
		  socket(SockNr, Sn_MR_TCP, 502, SF_TCP_NODELAY);
 8009c96:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8009c9a:	2320      	movs	r3, #32
 8009c9c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	f000 f88b 	bl	8009dbc <socket>
		  tcp_sequence = 6;
 8009ca6:	4b34      	ldr	r3, [pc, #208]	; (8009d78 <SpiStartTask+0x204>)
 8009ca8:	2206      	movs	r2, #6
 8009caa:	701a      	strb	r2, [r3, #0]
	  }

	  getSn = getSn_SR(SockNr);
 8009cac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff f91e 	bl	8008efc <WIZCHIP_READ>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  if(getSn == SOCK_INIT){
 8009cc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009cca:	2b13      	cmp	r3, #19
 8009ccc:	d107      	bne.n	8009cde <SpiStartTask+0x16a>
		  listen(SockNr);
 8009cce:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 f9f6 	bl	800a0c4 <listen>
		  tcp_sequence = 7;
 8009cd8:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <SpiStartTask+0x204>)
 8009cda:	2207      	movs	r2, #7
 8009cdc:	701a      	strb	r2, [r3, #0]
	  }

	  rec_len = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	653b      	str	r3, [r7, #80]	; 0x50
	  if ( (rec_len = getSn_RX_RSR(SockNr) ) > 0){
 8009ce2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff faad 	bl	8009246 <getSn_RX_RSR>
 8009cec:	4603      	mov	r3, r0
 8009cee:	653b      	str	r3, [r7, #80]	; 0x50
 8009cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	dd0c      	ble.n	8009d10 <SpiStartTask+0x19c>
		  rec_len = recv(SockNr, sock_buf, sock_len);
 8009cf6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009cfa:	f107 0108 	add.w	r1, r7, #8
 8009cfe:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fba8 	bl	800a458 <recv>
 8009d08:	6538      	str	r0, [r7, #80]	; 0x50
		  tcp_sequence = 4;
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <SpiStartTask+0x204>)
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	701a      	strb	r2, [r3, #0]
	  }
	  if(rec_len > 0)
 8009d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd26      	ble.n	8009d64 <SpiStartTask+0x1f0>
	  {
		  request.msg = sock_buf;
 8009d16:	4a1a      	ldr	r2, [pc, #104]	; (8009d80 <SpiStartTask+0x20c>)
 8009d18:	f107 0308 	add.w	r3, r7, #8
 8009d1c:	60d3      	str	r3, [r2, #12]
		  if(uMB_check_id(request.msg, &response)){
 8009d1e:	4b18      	ldr	r3, [pc, #96]	; (8009d80 <SpiStartTask+0x20c>)
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	4916      	ldr	r1, [pc, #88]	; (8009d7c <SpiStartTask+0x208>)
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fdf7 	bl	800a918 <uMB_check_id>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d006      	beq.n	8009d3e <SpiStartTask+0x1ca>
		  	    uMB_resp_parse(request.msg, &hregisters[0], &response);
 8009d30:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <SpiStartTask+0x20c>)
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	4a11      	ldr	r2, [pc, #68]	; (8009d7c <SpiStartTask+0x208>)
 8009d36:	4913      	ldr	r1, [pc, #76]	; (8009d84 <SpiStartTask+0x210>)
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fe03 	bl	800a944 <uMB_resp_parse>
		  	    //uMB_resp_msg_print(&response);
		  	  }
		  tcp_sequence = 5;
 8009d3e:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <SpiStartTask+0x204>)
 8009d40:	2205      	movs	r2, #5
 8009d42:	701a      	strb	r2, [r3, #0]
		  sock_status = send(SockNr, response.msg, response.msg_len);
 8009d44:	4b0d      	ldr	r3, [pc, #52]	; (8009d7c <SpiStartTask+0x208>)
 8009d46:	6919      	ldr	r1, [r3, #16]
 8009d48:	4b0c      	ldr	r3, [pc, #48]	; (8009d7c <SpiStartTask+0x208>)
 8009d4a:	7d1b      	ldrb	r3, [r3, #20]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 fa86 	bl	800a264 <send>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		  osDelay(10);
 8009d5e:	200a      	movs	r0, #10
 8009d60:	f7fc fc9e 	bl	80066a0 <osDelay>
	  }

	  phylink = wizphy_getphylink();
 8009d64:	f001 fd64 	bl	800b830 <wizphy_getphylink>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	  osDelay(10);
 8009d6e:	200a      	movs	r0, #10
 8009d70:	f7fc fc96 	bl	80066a0 <osDelay>
	  getSn = getSn_SR(SockNr);
 8009d74:	e74f      	b.n	8009c16 <SpiStartTask+0xa2>
 8009d76:	bf00      	nop
 8009d78:	20004b95 	.word	0x20004b95
 8009d7c:	20000130 	.word	0x20000130
 8009d80:	2000011c 	.word	0x2000011c
 8009d84:	20000148 	.word	0x20000148

08009d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a04      	ldr	r2, [pc, #16]	; (8009da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d101      	bne.n	8009d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009d9a:	f7f6 fc13 	bl	80005c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009d9e:	bf00      	nop
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40010000 	.word	0x40010000

08009dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009db0:	bf00      	nop
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4623      	mov	r3, r4
 8009dcc:	71fb      	strb	r3, [r7, #7]
 8009dce:	4603      	mov	r3, r0
 8009dd0:	71bb      	strb	r3, [r7, #6]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	80bb      	strh	r3, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8009dda:	79fb      	ldrb	r3, [r7, #7]
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d902      	bls.n	8009de6 <socket+0x2a>
 8009de0:	f04f 33ff 	mov.w	r3, #4294967295
 8009de4:	e0f1      	b.n	8009fca <socket+0x20e>
	switch(protocol)
 8009de6:	79bb      	ldrb	r3, [r7, #6]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d004      	beq.n	8009df6 <socket+0x3a>
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	db10      	blt.n	8009e12 <socket+0x56>
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	dc0e      	bgt.n	8009e12 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8009df4:	e010      	b.n	8009e18 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8009df6:	f107 030c 	add.w	r3, r7, #12
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009e02:	f7ff f915 	bl	8009030 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d105      	bne.n	8009e18 <socket+0x5c>
 8009e0c:	f06f 0302 	mvn.w	r3, #2
 8009e10:	e0db      	b.n	8009fca <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8009e12:	f06f 0304 	mvn.w	r3, #4
 8009e16:	e0d8      	b.n	8009fca <socket+0x20e>
         break;
 8009e18:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	f003 0304 	and.w	r3, r3, #4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <socket+0x6e>
 8009e24:	f06f 0305 	mvn.w	r3, #5
 8009e28:	e0cf      	b.n	8009fca <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d025      	beq.n	8009e7c <socket+0xc0>
	{
   	switch(protocol)
 8009e30:	79bb      	ldrb	r3, [r7, #6]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d002      	beq.n	8009e3c <socket+0x80>
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d008      	beq.n	8009e4c <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8009e3a:	e024      	b.n	8009e86 <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d11c      	bne.n	8009e80 <socket+0xc4>
 8009e46:	f06f 0305 	mvn.w	r3, #5
 8009e4a:	e0be      	b.n	8009fca <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d006      	beq.n	8009e64 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8009e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	db02      	blt.n	8009e64 <socket+0xa8>
 8009e5e:	f06f 0305 	mvn.w	r3, #5
 8009e62:	e0b2      	b.n	8009fca <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8009e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	db06      	blt.n	8009e84 <socket+0xc8>
 8009e76:	f06f 0305 	mvn.w	r3, #5
 8009e7a:	e0a6      	b.n	8009fca <socket+0x20e>
   	}
   }
 8009e7c:	bf00      	nop
 8009e7e:	e002      	b.n	8009e86 <socket+0xca>
   	      break;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <socket+0xca>
   	      break;
 8009e84:	bf00      	nop
	close(sn);
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f8ad 	bl	8009fe8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	3301      	adds	r3, #1
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	4618      	mov	r0, r3
 8009e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e9c:	f023 030f 	bic.w	r3, r3, #15
 8009ea0:	b25a      	sxtb	r2, r3
 8009ea2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	b25b      	sxtb	r3, r3
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7ff f871 	bl	8008f94 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8009eb2:	88bb      	ldrh	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d110      	bne.n	8009eda <socket+0x11e>
	{
	   port = sock_any_port++;
 8009eb8:	4b46      	ldr	r3, [pc, #280]	; (8009fd4 <socket+0x218>)
 8009eba:	881b      	ldrh	r3, [r3, #0]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	b291      	uxth	r1, r2
 8009ec0:	4a44      	ldr	r2, [pc, #272]	; (8009fd4 <socket+0x218>)
 8009ec2:	8011      	strh	r1, [r2, #0]
 8009ec4:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8009ec6:	4b43      	ldr	r3, [pc, #268]	; (8009fd4 <socket+0x218>)
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d103      	bne.n	8009eda <socket+0x11e>
 8009ed2:	4b40      	ldr	r3, [pc, #256]	; (8009fd4 <socket+0x218>)
 8009ed4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009ed8:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	3301      	adds	r3, #1
 8009ee0:	00db      	lsls	r3, r3, #3
 8009ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	88bb      	ldrh	r3, [r7, #4]
 8009eea:	0a1b      	lsrs	r3, r3, #8
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7ff f84e 	bl	8008f94 <WIZCHIP_WRITE>
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	3301      	adds	r3, #1
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f04:	461a      	mov	r2, r3
 8009f06:	88bb      	ldrh	r3, [r7, #4]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f7ff f841 	bl	8008f94 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8009f12:	79fb      	ldrb	r3, [r7, #7]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	3301      	adds	r3, #1
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f1e:	2101      	movs	r1, #1
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff f837 	bl	8008f94 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8009f26:	bf00      	nop
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe ffe1 	bl	8008efc <WIZCHIP_READ>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1f3      	bne.n	8009f28 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	2201      	movs	r2, #1
 8009f44:	fa02 f303 	lsl.w	r3, r2, r3
 8009f48:	b21b      	sxth	r3, r3
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	b21a      	sxth	r2, r3
 8009f4e:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <socket+0x21c>)
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	b21b      	sxth	r3, r3
 8009f54:	4013      	ands	r3, r2
 8009f56:	b21b      	sxth	r3, r3
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	4b1f      	ldr	r3, [pc, #124]	; (8009fd8 <socket+0x21c>)
 8009f5c:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	f003 0201 	and.w	r2, r3, #1
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6a:	b21a      	sxth	r2, r3
 8009f6c:	4b1a      	ldr	r3, [pc, #104]	; (8009fd8 <socket+0x21c>)
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	b21b      	sxth	r3, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	b21b      	sxth	r3, r3
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	4b17      	ldr	r3, [pc, #92]	; (8009fd8 <socket+0x21c>)
 8009f7a:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8009f7c:	79fb      	ldrb	r3, [r7, #7]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	fa02 f303 	lsl.w	r3, r2, r3
 8009f84:	b21b      	sxth	r3, r3
 8009f86:	43db      	mvns	r3, r3
 8009f88:	b21a      	sxth	r2, r3
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <socket+0x220>)
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b21b      	sxth	r3, r3
 8009f90:	4013      	ands	r3, r2
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <socket+0x220>)
 8009f98:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	4a10      	ldr	r2, [pc, #64]	; (8009fe0 <socket+0x224>)
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	4a0f      	ldr	r2, [pc, #60]	; (8009fe4 <socket+0x228>)
 8009fa8:	2100      	movs	r1, #0
 8009faa:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8009fac:	bf00      	nop
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	00db      	lsls	r3, r3, #3
 8009fb6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe ff9e 	bl	8008efc <WIZCHIP_READ>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f3      	beq.n	8009fae <socket+0x1f2>
   return (int8_t)sn;
 8009fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd90      	pop	{r4, r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000170 	.word	0x20000170
 8009fd8:	20004b96 	.word	0x20004b96
 8009fdc:	20004b98 	.word	0x20004b98
 8009fe0:	20004b9c 	.word	0x20004b9c
 8009fe4:	20004bac 	.word	0x20004bac

08009fe8 <close>:

int8_t close(uint8_t sn)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	d902      	bls.n	8009ffe <close+0x16>
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	e055      	b.n	800a0aa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8009ffe:	79fb      	ldrb	r3, [r7, #7]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	3301      	adds	r3, #1
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a00a:	2110      	movs	r1, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe ffc1 	bl	8008f94 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800a012:	bf00      	nop
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	3301      	adds	r3, #1
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe ff6b 	bl	8008efc <WIZCHIP_READ>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f3      	bne.n	800a014 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	3301      	adds	r3, #1
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a038:	211f      	movs	r1, #31
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe ffaa 	bl	8008f94 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2201      	movs	r2, #1
 800a044:	fa02 f303 	lsl.w	r3, r2, r3
 800a048:	b21b      	sxth	r3, r3
 800a04a:	43db      	mvns	r3, r3
 800a04c:	b21a      	sxth	r2, r3
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <close+0xcc>)
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b21b      	sxth	r3, r3
 800a054:	4013      	ands	r3, r2
 800a056:	b21b      	sxth	r3, r3
 800a058:	b29a      	uxth	r2, r3
 800a05a:	4b16      	ldr	r3, [pc, #88]	; (800a0b4 <close+0xcc>)
 800a05c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	2201      	movs	r2, #1
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	b21b      	sxth	r3, r3
 800a068:	43db      	mvns	r3, r3
 800a06a:	b21a      	sxth	r2, r3
 800a06c:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <close+0xd0>)
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b21b      	sxth	r3, r3
 800a072:	4013      	ands	r3, r2
 800a074:	b21b      	sxth	r3, r3
 800a076:	b29a      	uxth	r2, r3
 800a078:	4b0f      	ldr	r3, [pc, #60]	; (800a0b8 <close+0xd0>)
 800a07a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	4a0f      	ldr	r2, [pc, #60]	; (800a0bc <close+0xd4>)
 800a080:	2100      	movs	r1, #0
 800a082:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800a086:	79fb      	ldrb	r3, [r7, #7]
 800a088:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <close+0xd8>)
 800a08a:	2100      	movs	r1, #0
 800a08c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800a08e:	bf00      	nop
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	3301      	adds	r3, #1
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe ff2d 	bl	8008efc <WIZCHIP_READ>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1f3      	bne.n	800a090 <close+0xa8>
	return SOCK_OK;
 800a0a8:	2301      	movs	r3, #1
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20004b96 	.word	0x20004b96
 800a0b8:	20004b98 	.word	0x20004b98
 800a0bc:	20004b9c 	.word	0x20004b9c
 800a0c0:	20004bac 	.word	0x20004bac

0800a0c4 <listen>:

int8_t listen(uint8_t sn)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d902      	bls.n	800a0da <listen+0x16>
 800a0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d8:	e049      	b.n	800a16e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	3301      	adds	r3, #1
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe ff0a 	bl	8008efc <WIZCHIP_READ>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d002      	beq.n	800a0f8 <listen+0x34>
 800a0f2:	f06f 0304 	mvn.w	r3, #4
 800a0f6:	e03a      	b.n	800a16e <listen+0xaa>
	CHECK_SOCKINIT();
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe fef9 	bl	8008efc <WIZCHIP_READ>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b13      	cmp	r3, #19
 800a10e:	d002      	beq.n	800a116 <listen+0x52>
 800a110:	f06f 0302 	mvn.w	r3, #2
 800a114:	e02b      	b.n	800a16e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 800a116:	79fb      	ldrb	r3, [r7, #7]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	3301      	adds	r3, #1
 800a11c:	00db      	lsls	r3, r3, #3
 800a11e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a122:	2102      	movs	r1, #2
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe ff35 	bl	8008f94 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 800a12a:	bf00      	nop
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	3301      	adds	r3, #1
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fedf 	bl	8008efc <WIZCHIP_READ>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1f3      	bne.n	800a12c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800a144:	e006      	b.n	800a154 <listen+0x90>
   {
         close(sn);
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff ff4d 	bl	8009fe8 <close>
         return SOCKERR_SOCKCLOSED;
 800a14e:	f06f 0303 	mvn.w	r3, #3
 800a152:	e00c      	b.n	800a16e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 800a154:	79fb      	ldrb	r3, [r7, #7]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	3301      	adds	r3, #1
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe fecb 	bl	8008efc <WIZCHIP_READ>
 800a166:	4603      	mov	r3, r0
 800a168:	2b14      	cmp	r3, #20
 800a16a:	d1ec      	bne.n	800a146 <listen+0x82>
   }
   return SOCK_OK;
 800a16c:	2301      	movs	r3, #1
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	2b08      	cmp	r3, #8
 800a186:	d902      	bls.n	800a18e <disconnect+0x16>
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	e062      	b.n	800a254 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	3301      	adds	r3, #1
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe feb0 	bl	8008efc <WIZCHIP_READ>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d002      	beq.n	800a1ac <disconnect+0x34>
 800a1a6:	f06f 0304 	mvn.w	r3, #4
 800a1aa:	e053      	b.n	800a254 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a1b8:	2108      	movs	r1, #8
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe feea 	bl	8008f94 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800a1c0:	bf00      	nop
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe fe94 	bl	8008efc <WIZCHIP_READ>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f3      	bne.n	800a1c2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	b21b      	sxth	r3, r3
 800a1e4:	43db      	mvns	r3, r3
 800a1e6:	b21a      	sxth	r2, r3
 800a1e8:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <disconnect+0xe4>)
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b21b      	sxth	r3, r3
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	b21b      	sxth	r3, r3
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	4b19      	ldr	r3, [pc, #100]	; (800a25c <disconnect+0xe4>)
 800a1f6:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800a1f8:	4b19      	ldr	r3, [pc, #100]	; (800a260 <disconnect+0xe8>)
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	fa42 f303 	asr.w	r3, r2, r3
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d016      	beq.n	800a23a <disconnect+0xc2>
 800a20c:	2300      	movs	r3, #0
 800a20e:	e021      	b.n	800a254 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	3301      	adds	r3, #1
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fe6d 	bl	8008efc <WIZCHIP_READ>
 800a222:	4603      	mov	r3, r0
 800a224:	f003 0308 	and.w	r3, r3, #8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d006      	beq.n	800a23a <disconnect+0xc2>
	   {
	      close(sn);
 800a22c:	79fb      	ldrb	r3, [r7, #7]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff feda 	bl	8009fe8 <close>
	      return SOCKERR_TIMEOUT;
 800a234:	f06f 030c 	mvn.w	r3, #12
 800a238:	e00c      	b.n	800a254 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	3301      	adds	r3, #1
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fe58 	bl	8008efc <WIZCHIP_READ>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1de      	bne.n	800a210 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 800a252:	2301      	movs	r3, #1
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	20004b98 	.word	0x20004b98
 800a260:	20004b96 	.word	0x20004b96

0800a264 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
 800a270:	4613      	mov	r3, r2
 800a272:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800a278:	2300      	movs	r3, #0
 800a27a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b08      	cmp	r3, #8
 800a280:	d902      	bls.n	800a288 <send+0x24>
 800a282:	f04f 33ff 	mov.w	r3, #4294967295
 800a286:	e0de      	b.n	800a446 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	3301      	adds	r3, #1
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	4618      	mov	r0, r3
 800a292:	f7fe fe33 	bl	8008efc <WIZCHIP_READ>
 800a296:	4603      	mov	r3, r0
 800a298:	f003 030f 	and.w	r3, r3, #15
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d002      	beq.n	800a2a6 <send+0x42>
 800a2a0:	f06f 0304 	mvn.w	r3, #4
 800a2a4:	e0cf      	b.n	800a446 <send+0x1e2>
   CHECK_SOCKDATA();
 800a2a6:	88bb      	ldrh	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d102      	bne.n	800a2b2 <send+0x4e>
 800a2ac:	f06f 030d 	mvn.w	r3, #13
 800a2b0:	e0c9      	b.n	800a446 <send+0x1e2>
   tmp = getSn_SR(sn);
 800a2b2:	79fb      	ldrb	r3, [r7, #7]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	00db      	lsls	r3, r3, #3
 800a2ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fe1c 	bl	8008efc <WIZCHIP_READ>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b17      	cmp	r3, #23
 800a2cc:	d005      	beq.n	800a2da <send+0x76>
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b1c      	cmp	r3, #28
 800a2d2:	d002      	beq.n	800a2da <send+0x76>
 800a2d4:	f06f 0306 	mvn.w	r3, #6
 800a2d8:	e0b5      	b.n	800a446 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 800a2da:	4b5d      	ldr	r3, [pc, #372]	; (800a450 <send+0x1ec>)
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	fa42 f303 	asr.w	r3, r2, r3
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d039      	beq.n	800a362 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800a2ee:	79fb      	ldrb	r3, [r7, #7]
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fe fdfe 	bl	8008efc <WIZCHIP_READ>
 800a300:	4603      	mov	r3, r0
 800a302:	f003 031f 	and.w	r3, r3, #31
 800a306:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	f003 0310 	and.w	r3, r3, #16
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d019      	beq.n	800a346 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800a312:	79fb      	ldrb	r3, [r7, #7]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	3301      	adds	r3, #1
 800a318:	00db      	lsls	r3, r3, #3
 800a31a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a31e:	2110      	movs	r1, #16
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fe37 	bl	8008f94 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	2201      	movs	r2, #1
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	b21b      	sxth	r3, r3
 800a330:	43db      	mvns	r3, r3
 800a332:	b21a      	sxth	r2, r3
 800a334:	4b46      	ldr	r3, [pc, #280]	; (800a450 <send+0x1ec>)
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	b21b      	sxth	r3, r3
 800a33a:	4013      	ands	r3, r2
 800a33c:	b21b      	sxth	r3, r3
 800a33e:	b29a      	uxth	r2, r3
 800a340:	4b43      	ldr	r3, [pc, #268]	; (800a450 <send+0x1ec>)
 800a342:	801a      	strh	r2, [r3, #0]
 800a344:	e00d      	b.n	800a362 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	f003 0308 	and.w	r3, r3, #8
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <send+0xfa>
      {
         close(sn);
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff fe48 	bl	8009fe8 <close>
         return SOCKERR_TIMEOUT;
 800a358:	f06f 030c 	mvn.w	r3, #12
 800a35c:	e073      	b.n	800a446 <send+0x1e2>
      }
      else return SOCK_BUSY;
 800a35e:	2300      	movs	r3, #0
 800a360:	e071      	b.n	800a446 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	3301      	adds	r3, #1
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fe fdc4 	bl	8008efc <WIZCHIP_READ>
 800a374:	4603      	mov	r3, r0
 800a376:	b29b      	uxth	r3, r3
 800a378:	029b      	lsls	r3, r3, #10
 800a37a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800a37c:	88ba      	ldrh	r2, [r7, #4]
 800a37e:	89bb      	ldrh	r3, [r7, #12]
 800a380:	429a      	cmp	r2, r3
 800a382:	d901      	bls.n	800a388 <send+0x124>
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe ff10 	bl	80091b0 <getSn_TX_FSR>
 800a390:	4603      	mov	r3, r0
 800a392:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	3301      	adds	r3, #1
 800a39a:	00db      	lsls	r3, r3, #3
 800a39c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fdab 	bl	8008efc <WIZCHIP_READ>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
 800a3ac:	2b17      	cmp	r3, #23
 800a3ae:	d009      	beq.n	800a3c4 <send+0x160>
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	2b1c      	cmp	r3, #28
 800a3b4:	d006      	beq.n	800a3c4 <send+0x160>
      {
         close(sn);
 800a3b6:	79fb      	ldrb	r3, [r7, #7]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff fe15 	bl	8009fe8 <close>
         return SOCKERR_SOCKSTATUS;
 800a3be:	f06f 0306 	mvn.w	r3, #6
 800a3c2:	e040      	b.n	800a446 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800a3c4:	4b23      	ldr	r3, [pc, #140]	; (800a454 <send+0x1f0>)
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	79fb      	ldrb	r3, [r7, #7]
 800a3cc:	fa42 f303 	asr.w	r3, r2, r3
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <send+0x180>
 800a3d8:	88ba      	ldrh	r2, [r7, #4]
 800a3da:	89bb      	ldrh	r3, [r7, #12]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d901      	bls.n	800a3e4 <send+0x180>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e030      	b.n	800a446 <send+0x1e2>
      if(len <= freesize) break;
 800a3e4:	88ba      	ldrh	r2, [r7, #4]
 800a3e6:	89bb      	ldrh	r3, [r7, #12]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d900      	bls.n	800a3ee <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 800a3ec:	e7cc      	b.n	800a388 <send+0x124>
      if(len <= freesize) break;
 800a3ee:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800a3f0:	88ba      	ldrh	r2, [r7, #4]
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe ff70 	bl	80092dc <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	3301      	adds	r3, #1
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a408:	2120      	movs	r1, #32
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fdc2 	bl	8008f94 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800a410:	bf00      	nop
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	3301      	adds	r3, #1
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fd6c 	bl	8008efc <WIZCHIP_READ>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f3      	bne.n	800a412 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	2201      	movs	r2, #1
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	b21a      	sxth	r2, r3
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <send+0x1ec>)
 800a436:	881b      	ldrh	r3, [r3, #0]
 800a438:	b21b      	sxth	r3, r3
 800a43a:	4313      	orrs	r3, r2
 800a43c:	b21b      	sxth	r3, r3
 800a43e:	b29a      	uxth	r2, r3
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <send+0x1ec>)
 800a442:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800a444:	88bb      	ldrh	r3, [r7, #4]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20004b98 	.word	0x20004b98
 800a454:	20004b96 	.word	0x20004b96

0800a458 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800a458:	b590      	push	{r4, r7, lr}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	6039      	str	r1, [r7, #0]
 800a462:	71fb      	strb	r3, [r7, #7]
 800a464:	4613      	mov	r3, r2
 800a466:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800a468:	2300      	movs	r3, #0
 800a46a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	2b08      	cmp	r3, #8
 800a474:	d902      	bls.n	800a47c <recv+0x24>
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	e09c      	b.n	800a5b6 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	3301      	adds	r3, #1
 800a482:	00db      	lsls	r3, r3, #3
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fd39 	bl	8008efc <WIZCHIP_READ>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	2b01      	cmp	r3, #1
 800a492:	d002      	beq.n	800a49a <recv+0x42>
 800a494:	f06f 0304 	mvn.w	r3, #4
 800a498:	e08d      	b.n	800a5b6 <recv+0x15e>
   CHECK_SOCKDATA();
 800a49a:	88bb      	ldrh	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <recv+0x4e>
 800a4a0:	f06f 030d 	mvn.w	r3, #13
 800a4a4:	e087      	b.n	800a5b6 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	00db      	lsls	r3, r3, #3
 800a4ae:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fd22 	bl	8008efc <WIZCHIP_READ>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	029b      	lsls	r3, r3, #10
 800a4be:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800a4c0:	89ba      	ldrh	r2, [r7, #12]
 800a4c2:	88bb      	ldrh	r3, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d201      	bcs.n	800a4cc <recv+0x74>
 800a4c8:	89bb      	ldrh	r3, [r7, #12]
 800a4ca:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe feb9 	bl	8009246 <getSn_RX_RSR>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	3301      	adds	r3, #1
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe fd09 	bl	8008efc <WIZCHIP_READ>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	2b17      	cmp	r3, #23
 800a4f2:	d026      	beq.n	800a542 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	2b1c      	cmp	r3, #28
 800a4f8:	d11c      	bne.n	800a534 <recv+0xdc>
            {
               if(recvsize != 0) break;
 800a4fa:	89bb      	ldrh	r3, [r7, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d133      	bne.n	800a568 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe fe54 	bl	80091b0 <getSn_TX_FSR>
 800a508:	4603      	mov	r3, r0
 800a50a:	461c      	mov	r4, r3
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	3301      	adds	r3, #1
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fe fcef 	bl	8008efc <WIZCHIP_READ>
 800a51e:	4603      	mov	r3, r0
 800a520:	029b      	lsls	r3, r3, #10
 800a522:	429c      	cmp	r4, r3
 800a524:	d10d      	bne.n	800a542 <recv+0xea>
               {
                  close(sn);
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff fd5d 	bl	8009fe8 <close>
                  return SOCKERR_SOCKSTATUS;
 800a52e:	f06f 0306 	mvn.w	r3, #6
 800a532:	e040      	b.n	800a5b6 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff fd56 	bl	8009fe8 <close>
               return SOCKERR_SOCKSTATUS;
 800a53c:	f06f 0306 	mvn.w	r3, #6
 800a540:	e039      	b.n	800a5b6 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800a542:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <recv+0x168>)
 800a544:	881b      	ldrh	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	fa42 f303 	asr.w	r3, r2, r3
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d004      	beq.n	800a560 <recv+0x108>
 800a556:	89bb      	ldrh	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d101      	bne.n	800a560 <recv+0x108>
 800a55c:	2300      	movs	r3, #0
 800a55e:	e02a      	b.n	800a5b6 <recv+0x15e>
         if(recvsize != 0) break;
 800a560:	89bb      	ldrh	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800a566:	e7b1      	b.n	800a4cc <recv+0x74>
               if(recvsize != 0) break;
 800a568:	bf00      	nop
 800a56a:	e000      	b.n	800a56e <recv+0x116>
         if(recvsize != 0) break;
 800a56c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800a56e:	89ba      	ldrh	r2, [r7, #12]
 800a570:	88bb      	ldrh	r3, [r7, #4]
 800a572:	429a      	cmp	r2, r3
 800a574:	d201      	bcs.n	800a57a <recv+0x122>
 800a576:	89bb      	ldrh	r3, [r7, #12]
 800a578:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800a57a:	88ba      	ldrh	r2, [r7, #4]
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	4618      	mov	r0, r3
 800a582:	f7fe ff07 	bl	8009394 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	3301      	adds	r3, #1
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a592:	2140      	movs	r1, #64	; 0x40
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fcfd 	bl	8008f94 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800a59a:	bf00      	nop
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe fca7 	bl	8008efc <WIZCHIP_READ>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1f3      	bne.n	800a59c <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800a5b4:	88bb      	ldrh	r3, [r7, #4]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd90      	pop	{r4, r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20004b96 	.word	0x20004b96

0800a5c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	607b      	str	r3, [r7, #4]
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <HAL_MspInit+0x54>)
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	4a11      	ldr	r2, [pc, #68]	; (800a618 <HAL_MspInit+0x54>)
 800a5d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5d8:	6453      	str	r3, [r2, #68]	; 0x44
 800a5da:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <HAL_MspInit+0x54>)
 800a5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	603b      	str	r3, [r7, #0]
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <HAL_MspInit+0x54>)
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	4a0a      	ldr	r2, [pc, #40]	; (800a618 <HAL_MspInit+0x54>)
 800a5f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5f4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5f6:	4b08      	ldr	r3, [pc, #32]	; (800a618 <HAL_MspInit+0x54>)
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a602:	2200      	movs	r2, #0
 800a604:	210f      	movs	r1, #15
 800a606:	f06f 0001 	mvn.w	r0, #1
 800a60a:	f7f6 f8d5 	bl	80007b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a60e:	bf00      	nop
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	40023800 	.word	0x40023800

0800a61c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08a      	sub	sp, #40	; 0x28
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a624:	f107 0314 	add.w	r3, r7, #20
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	605a      	str	r2, [r3, #4]
 800a62e:	609a      	str	r2, [r3, #8]
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a19      	ldr	r2, [pc, #100]	; (800a6a0 <HAL_SPI_MspInit+0x84>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d12b      	bne.n	800a696 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a63e:	2300      	movs	r3, #0
 800a640:	613b      	str	r3, [r7, #16]
 800a642:	4b18      	ldr	r3, [pc, #96]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a646:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a64c:	6453      	str	r3, [r2, #68]	; 0x44
 800a64e:	4b15      	ldr	r3, [pc, #84]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	4b11      	ldr	r3, [pc, #68]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	4a10      	ldr	r2, [pc, #64]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a664:	f043 0301 	orr.w	r3, r3, #1
 800a668:	6313      	str	r3, [r2, #48]	; 0x30
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <HAL_SPI_MspInit+0x88>)
 800a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	60fb      	str	r3, [r7, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a676:	23e0      	movs	r3, #224	; 0xe0
 800a678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a67a:	2302      	movs	r3, #2
 800a67c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a682:	2303      	movs	r3, #3
 800a684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a686:	2305      	movs	r3, #5
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a68a:	f107 0314 	add.w	r3, r7, #20
 800a68e:	4619      	mov	r1, r3
 800a690:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <HAL_SPI_MspInit+0x8c>)
 800a692:	f7f6 f8bb 	bl	800080c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a696:	bf00      	nop
 800a698:	3728      	adds	r7, #40	; 0x28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	40013000 	.word	0x40013000
 800a6a4:	40023800 	.word	0x40023800
 800a6a8:	40020000 	.word	0x40020000

0800a6ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08c      	sub	sp, #48	; 0x30
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800a6bc:	2200      	movs	r2, #0
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	2019      	movs	r0, #25
 800a6c2:	f7f6 f879 	bl	80007b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a6c6:	2019      	movs	r0, #25
 800a6c8:	f7f6 f892 	bl	80007f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <HAL_InitTick+0xa0>)
 800a6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d4:	4a1d      	ldr	r2, [pc, #116]	; (800a74c <HAL_InitTick+0xa0>)
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	6453      	str	r3, [r2, #68]	; 0x44
 800a6dc:	4b1b      	ldr	r3, [pc, #108]	; (800a74c <HAL_InitTick+0xa0>)
 800a6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]
 800a6e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a6e8:	f107 0210 	add.w	r2, r7, #16
 800a6ec:	f107 0314 	add.w	r3, r7, #20
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f7 ffe8 	bl	80026c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800a6f8:	f7f7 ffd2 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 800a6fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	4a13      	ldr	r2, [pc, #76]	; (800a750 <HAL_InitTick+0xa4>)
 800a702:	fba2 2303 	umull	r2, r3, r2, r3
 800a706:	0c9b      	lsrs	r3, r3, #18
 800a708:	3b01      	subs	r3, #1
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a70c:	4b11      	ldr	r3, [pc, #68]	; (800a754 <HAL_InitTick+0xa8>)
 800a70e:	4a12      	ldr	r2, [pc, #72]	; (800a758 <HAL_InitTick+0xac>)
 800a710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <HAL_InitTick+0xa8>)
 800a714:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a718:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a71a:	4a0e      	ldr	r2, [pc, #56]	; (800a754 <HAL_InitTick+0xa8>)
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a720:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <HAL_InitTick+0xa8>)
 800a722:	2200      	movs	r2, #0
 800a724:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a726:	4b0b      	ldr	r3, [pc, #44]	; (800a754 <HAL_InitTick+0xa8>)
 800a728:	2200      	movs	r2, #0
 800a72a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a72c:	4809      	ldr	r0, [pc, #36]	; (800a754 <HAL_InitTick+0xa8>)
 800a72e:	f7f8 fd51 	bl	80031d4 <HAL_TIM_Base_Init>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a738:	4806      	ldr	r0, [pc, #24]	; (800a754 <HAL_InitTick+0xa8>)
 800a73a:	f7f8 fd80 	bl	800323e <HAL_TIM_Base_Start_IT>
 800a73e:	4603      	mov	r3, r0
 800a740:	e000      	b.n	800a744 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
}
 800a744:	4618      	mov	r0, r3
 800a746:	3730      	adds	r7, #48	; 0x30
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	40023800 	.word	0x40023800
 800a750:	431bde83 	.word	0x431bde83
 800a754:	20005410 	.word	0x20005410
 800a758:	40010000 	.word	0x40010000

0800a75c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a760:	bf00      	nop
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a76a:	b480      	push	{r7}
 800a76c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  return;
 800a76e:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a778:	b480      	push	{r7}
 800a77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a77c:	e7fe      	b.n	800a77c <MemManage_Handler+0x4>

0800a77e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a77e:	b480      	push	{r7}
 800a780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a782:	e7fe      	b.n	800a782 <BusFault_Handler+0x4>

0800a784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a784:	b480      	push	{r7}
 800a786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a788:	e7fe      	b.n	800a788 <UsageFault_Handler+0x4>

0800a78a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a78a:	b480      	push	{r7}
 800a78c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a78e:	bf00      	nop
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a79c:	4802      	ldr	r0, [pc, #8]	; (800a7a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a79e:	f7f8 fd72 	bl	8003286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a7a2:	bf00      	nop
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20005410 	.word	0x20005410

0800a7ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a7b0:	4802      	ldr	r0, [pc, #8]	; (800a7bc <OTG_FS_IRQHandler+0x10>)
 800a7b2:	f7f6 fb2e 	bl	8000e12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a7b6:	bf00      	nop
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20005b20 	.word	0x20005b20

0800a7c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a7c8:	4b11      	ldr	r3, [pc, #68]	; (800a810 <_sbrk+0x50>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <_sbrk+0x16>
		heap_end = &end;
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <_sbrk+0x50>)
 800a7d2:	4a10      	ldr	r2, [pc, #64]	; (800a814 <_sbrk+0x54>)
 800a7d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a7d6:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <_sbrk+0x50>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a7dc:	4b0c      	ldr	r3, [pc, #48]	; (800a810 <_sbrk+0x50>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	466a      	mov	r2, sp
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d907      	bls.n	800a7fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a7ea:	f001 f8c3 	bl	800b974 <__errno>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	230c      	movs	r3, #12
 800a7f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f8:	e006      	b.n	800a808 <_sbrk+0x48>
	}

	heap_end += incr;
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <_sbrk+0x50>)
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4413      	add	r3, r2
 800a802:	4a03      	ldr	r2, [pc, #12]	; (800a810 <_sbrk+0x50>)
 800a804:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a806:	68fb      	ldr	r3, [r7, #12]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20004bb4 	.word	0x20004bb4
 800a814:	20006130 	.word	0x20006130

0800a818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a81c:	4b08      	ldr	r3, [pc, #32]	; (800a840 <SystemInit+0x28>)
 800a81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a822:	4a07      	ldr	r2, [pc, #28]	; (800a840 <SystemInit+0x28>)
 800a824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a82c:	4b04      	ldr	r3, [pc, #16]	; (800a840 <SystemInit+0x28>)
 800a82e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a832:	609a      	str	r2, [r3, #8]
#endif
}
 800a834:	bf00      	nop
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	e000ed00 	.word	0xe000ed00

0800a844 <word2bytes>:
#include "uMB.h"

void word2bytes(uint16_t word, uint8_t* first, uint8_t* second){
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	4603      	mov	r3, r0
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	81fb      	strh	r3, [r7, #14]
  *first = (uint8_t)((word & 0xFF00) >> 8);
 800a852:	89fb      	ldrh	r3, [r7, #14]
 800a854:	0a1b      	lsrs	r3, r3, #8
 800a856:	b29b      	uxth	r3, r3
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	701a      	strb	r2, [r3, #0]
  *second = (uint8_t)(word & 0x00FF);
 800a85e:	89fb      	ldrh	r3, [r7, #14]
 800a860:	b2da      	uxtb	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	701a      	strb	r2, [r3, #0]
  return;
 800a866:	bf00      	nop
}
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <bytes2word>:

void bytes2word(uint8_t first, uint8_t second, uint16_t* word){
 800a872:	b480      	push	{r7}
 800a874:	b083      	sub	sp, #12
 800a876:	af00      	add	r7, sp, #0
 800a878:	4603      	mov	r3, r0
 800a87a:	603a      	str	r2, [r7, #0]
 800a87c:	71fb      	strb	r3, [r7, #7]
 800a87e:	460b      	mov	r3, r1
 800a880:	71bb      	strb	r3, [r7, #6]
  *word = (uint16_t)(first << 8) + (uint16_t)(second);
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	b29b      	uxth	r3, r3
 800a886:	021b      	lsls	r3, r3, #8
 800a888:	b29a      	uxth	r2, r3
 800a88a:	79bb      	ldrb	r3, [r7, #6]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4413      	add	r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	801a      	strh	r2, [r3, #0]
  return;
 800a896:	bf00      	nop
}
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <uMB_resp_msg_create>:
 *    #######################
 *    RESPONSE IMPLEMENTATION
 *    #######################
 */
 void uMB_resp_msg_create(struct uMB_response* resp)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  resp->msg = message_resp;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a19      	ldr	r2, [pc, #100]	; (800a914 <uMB_resp_msg_create+0x70>)
 800a8b0:	611a      	str	r2, [r3, #16]
  word2bytes(resp->header.tx, &resp->msg[0], &resp->msg[1]);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	8818      	ldrh	r0, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6919      	ldr	r1, [r3, #16]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f7ff ffbf 	bl	800a844 <word2bytes>
  word2bytes(resp->header.prot, &resp->msg[2], &resp->msg[3]);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	8858      	ldrh	r0, [r3, #2]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	1c99      	adds	r1, r3, #2
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	3303      	adds	r3, #3
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f7ff ffb4 	bl	800a844 <word2bytes>
  word2bytes(resp->header.len, &resp->msg[4], &resp->msg[5]);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8898      	ldrh	r0, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	1d19      	adds	r1, r3, #4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	3305      	adds	r3, #5
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	f7ff ffa9 	bl	800a844 <word2bytes>
  resp->msg[6] = resp->unitID;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	3306      	adds	r3, #6
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	7992      	ldrb	r2, [r2, #6]
 800a8fc:	701a      	strb	r2, [r3, #0]
  resp->msg[7] = resp->fcode;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	3307      	adds	r3, #7
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	79d2      	ldrb	r2, [r2, #7]
 800a908:	701a      	strb	r2, [r3, #0]
  return;
 800a90a:	bf00      	nop
}
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20004c10 	.word	0x20004c10

0800a918 <uMB_check_id>:

uint8_t uMB_check_id(uint8_t* msg_in, struct uMB_response* resp){
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint8_t req_id = msg_in[6];
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	799b      	ldrb	r3, [r3, #6]
 800a926:	73fb      	strb	r3, [r7, #15]
  // Response Id should be defined in uMB_response declaration
  if(req_id == resp->unitID)
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	799b      	ldrb	r3, [r3, #6]
 800a92c:	7bfa      	ldrb	r2, [r7, #15]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d101      	bne.n	800a936 <uMB_check_id+0x1e>
      return 1;
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <uMB_check_id+0x20>
  else
      return 0;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <uMB_resp_parse>:

 void uMB_resp_parse(uint8_t* msg_in, uint16_t data[], struct uMB_response* resp)
{ 
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
  uint16_t quantity = 0;
 800a950:	2300      	movs	r3, #0
 800a952:	82bb      	strh	r3, [r7, #20]
  // TX : byte 0, 1:
  bytes2word(msg_in[0], msg_in[1], &resp->header.tx);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	7818      	ldrb	r0, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3301      	adds	r3, #1
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	4619      	mov	r1, r3
 800a962:	f7ff ff86 	bl	800a872 <bytes2word>
  word2bytes(resp->header.tx, &resp->msg[0], &resp->msg[1]);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	8818      	ldrh	r0, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6919      	ldr	r1, [r3, #16]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	3301      	adds	r3, #1
 800a974:	461a      	mov	r2, r3
 800a976:	f7ff ff65 	bl	800a844 <word2bytes>
  // PROT: byte 2, 3:
  bytes2word(msg_in[2], msg_in[3], &resp->header.prot);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3302      	adds	r3, #2
 800a97e:	7818      	ldrb	r0, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3303      	adds	r3, #3
 800a984:	7819      	ldrb	r1, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3302      	adds	r3, #2
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7ff ff71 	bl	800a872 <bytes2word>
  resp->msg[2] = msg_in[2]; resp->msg[3] = msg_in[3];
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	3302      	adds	r3, #2
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	7892      	ldrb	r2, [r2, #2]
 800a99a:	701a      	strb	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	3303      	adds	r3, #3
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	78d2      	ldrb	r2, [r2, #3]
 800a9a6:	701a      	strb	r2, [r3, #0]
  // LEN : byte 4, 5 (calculated in the end for response):
  resp->header.len = 0x0000;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	809a      	strh	r2, [r3, #4]
  // Unit ID : byte 6:
  resp->unitID = msg_in[6];
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	799a      	ldrb	r2, [r3, #6]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	719a      	strb	r2, [r3, #6]
  resp->msg[6] = resp->unitID; 
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	3306      	adds	r3, #6
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	7992      	ldrb	r2, [r2, #6]
 800a9c0:	701a      	strb	r2, [r3, #0]
  // Function nr : byte 7:
  resp->fcode = msg_in[7];
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	79da      	ldrb	r2, [r3, #7]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	71da      	strb	r2, [r3, #7]
  resp->msg[7] = resp->fcode;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	3307      	adds	r3, #7
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	79d2      	ldrb	r2, [r2, #7]
 800a9d4:	701a      	strb	r2, [r3, #0]
  // Address : only request:
  bytes2word(msg_in[8], msg_in[9], &resp->address);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	7818      	ldrb	r0, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3309      	adds	r3, #9
 800a9e0:	7819      	ldrb	r1, [r3, #0]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	330a      	adds	r3, #10
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f7ff ff43 	bl	800a872 <bytes2word>
  // Quantity : byte 8:
  bytes2word(msg_in[10], msg_in[11], &quantity);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	330a      	adds	r3, #10
 800a9f0:	7818      	ldrb	r0, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	330b      	adds	r3, #11
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	f107 0214 	add.w	r2, r7, #20
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f7ff ff38 	bl	800a872 <bytes2word>
  resp->quantity = (uint8_t)(quantity*2);
 800aa02:	8abb      	ldrh	r3, [r7, #20]
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	b2da      	uxtb	r2, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	721a      	strb	r2, [r3, #8]
  resp->msg[8] = resp->quantity;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	3308      	adds	r3, #8
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7a12      	ldrb	r2, [r2, #8]
 800aa18:	701a      	strb	r2, [r3, #0]
  // Register Values : All next bytes:
  resp->msg_len = 9;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2209      	movs	r2, #9
 800aa1e:	751a      	strb	r2, [r3, #20]
  for(uint8_t i = 0; i<quantity; i++){
 800aa20:	2300      	movs	r3, #0
 800aa22:	75fb      	strb	r3, [r7, #23]
 800aa24:	e025      	b.n	800aa72 <uMB_resp_parse+0x12e>
    word2bytes(data[i+resp->address], &resp->msg[9+(i*2)], &resp->msg[10+(i*2)]);
 800aa26:	7dfb      	ldrb	r3, [r7, #23]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	8952      	ldrh	r2, [r2, #10]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	005b      	lsls	r3, r3, #1
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	4413      	add	r3, r2
 800aa34:	8818      	ldrh	r0, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	7dfa      	ldrb	r2, [r7, #23]
 800aa3c:	0052      	lsls	r2, r2, #1
 800aa3e:	3209      	adds	r2, #9
 800aa40:	1899      	adds	r1, r3, r2
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	7dfa      	ldrb	r2, [r7, #23]
 800aa48:	3205      	adds	r2, #5
 800aa4a:	0052      	lsls	r2, r2, #1
 800aa4c:	4413      	add	r3, r2
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f7ff fef8 	bl	800a844 <word2bytes>
    resp->header.len = (uint16_t) 10+i;
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	330a      	adds	r3, #10
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	809a      	strh	r2, [r3, #4]
    resp->msg_len += 2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	7d1b      	ldrb	r3, [r3, #20]
 800aa64:	3302      	adds	r3, #2
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	751a      	strb	r2, [r3, #20]
  for(uint8_t i = 0; i<quantity; i++){
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	8abb      	ldrh	r3, [r7, #20]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d3d4      	bcc.n	800aa26 <uMB_resp_parse+0xe2>
  }
  word2bytes(resp->header.len, &resp->msg[4], &resp->msg[5]);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8898      	ldrh	r0, [r3, #4]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	1d19      	adds	r1, r3, #4
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	3305      	adds	r3, #5
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f7ff fed9 	bl	800a844 <word2bytes>
  return;
 800aa92:	bf00      	nop
}
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4912      	ldr	r1, [pc, #72]	; (800aaec <MX_USB_DEVICE_Init+0x50>)
 800aaa4:	4812      	ldr	r0, [pc, #72]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aaa6:	f7fa fbdf 	bl	8005268 <USBD_Init>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aab0:	f7ff f97c 	bl	8009dac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800aab4:	490f      	ldr	r1, [pc, #60]	; (800aaf4 <MX_USB_DEVICE_Init+0x58>)
 800aab6:	480e      	ldr	r0, [pc, #56]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aab8:	f7fa fc0c 	bl	80052d4 <USBD_RegisterClass>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aac2:	f7ff f973 	bl	8009dac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aac6:	490c      	ldr	r1, [pc, #48]	; (800aaf8 <MX_USB_DEVICE_Init+0x5c>)
 800aac8:	4809      	ldr	r0, [pc, #36]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aaca:	f7fa fb31 	bl	8005130 <USBD_CDC_RegisterInterface>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aad4:	f7ff f96a 	bl	8009dac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <MX_USB_DEVICE_Init+0x54>)
 800aada:	f7fa fc1c 	bl	8005316 <USBD_Start>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d001      	beq.n	800aae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aae4:	f7ff f962 	bl	8009dac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aae8:	bf00      	nop
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	2000018c 	.word	0x2000018c
 800aaf0:	20005450 	.word	0x20005450
 800aaf4:	20000014 	.word	0x20000014
 800aaf8:	20000178 	.word	0x20000178

0800aafc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab00:	2200      	movs	r2, #0
 800ab02:	4905      	ldr	r1, [pc, #20]	; (800ab18 <CDC_Init_FS+0x1c>)
 800ab04:	4805      	ldr	r0, [pc, #20]	; (800ab1c <CDC_Init_FS+0x20>)
 800ab06:	f7fa fb28 	bl	800515a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab0a:	4905      	ldr	r1, [pc, #20]	; (800ab20 <CDC_Init_FS+0x24>)
 800ab0c:	4803      	ldr	r0, [pc, #12]	; (800ab1c <CDC_Init_FS+0x20>)
 800ab0e:	f7fa fb3d 	bl	800518c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20005920 	.word	0x20005920
 800ab1c:	20005450 	.word	0x20005450
 800ab20:	20005720 	.word	0x20005720

0800ab24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	6039      	str	r1, [r7, #0]
 800ab3e:	71fb      	strb	r3, [r7, #7]
 800ab40:	4613      	mov	r3, r2
 800ab42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	2b23      	cmp	r3, #35	; 0x23
 800ab48:	d84a      	bhi.n	800abe0 <CDC_Control_FS+0xac>
 800ab4a:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <CDC_Control_FS+0x1c>)
 800ab4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab50:	0800abe1 	.word	0x0800abe1
 800ab54:	0800abe1 	.word	0x0800abe1
 800ab58:	0800abe1 	.word	0x0800abe1
 800ab5c:	0800abe1 	.word	0x0800abe1
 800ab60:	0800abe1 	.word	0x0800abe1
 800ab64:	0800abe1 	.word	0x0800abe1
 800ab68:	0800abe1 	.word	0x0800abe1
 800ab6c:	0800abe1 	.word	0x0800abe1
 800ab70:	0800abe1 	.word	0x0800abe1
 800ab74:	0800abe1 	.word	0x0800abe1
 800ab78:	0800abe1 	.word	0x0800abe1
 800ab7c:	0800abe1 	.word	0x0800abe1
 800ab80:	0800abe1 	.word	0x0800abe1
 800ab84:	0800abe1 	.word	0x0800abe1
 800ab88:	0800abe1 	.word	0x0800abe1
 800ab8c:	0800abe1 	.word	0x0800abe1
 800ab90:	0800abe1 	.word	0x0800abe1
 800ab94:	0800abe1 	.word	0x0800abe1
 800ab98:	0800abe1 	.word	0x0800abe1
 800ab9c:	0800abe1 	.word	0x0800abe1
 800aba0:	0800abe1 	.word	0x0800abe1
 800aba4:	0800abe1 	.word	0x0800abe1
 800aba8:	0800abe1 	.word	0x0800abe1
 800abac:	0800abe1 	.word	0x0800abe1
 800abb0:	0800abe1 	.word	0x0800abe1
 800abb4:	0800abe1 	.word	0x0800abe1
 800abb8:	0800abe1 	.word	0x0800abe1
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe1 	.word	0x0800abe1
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe1 	.word	0x0800abe1
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abe1 	.word	0x0800abe1
 800abd4:	0800abe1 	.word	0x0800abe1
 800abd8:	0800abe1 	.word	0x0800abe1
 800abdc:	0800abe1 	.word	0x0800abe1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800abe0:	bf00      	nop
  }

  return (USBD_OK);
 800abe2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4811      	ldr	r0, [pc, #68]	; (800ac44 <CDC_Receive_FS+0x54>)
 800abfe:	f7fa fac5 	bl	800518c <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac02:	4810      	ldr	r0, [pc, #64]	; (800ac44 <CDC_Receive_FS+0x54>)
 800ac04:	f7fa fb06 	bl	8005214 <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedDataBuffer[512];    // Received data buffer
    extern uint8_t ReceivedDataFlag;    // Data received flag

    // Clear received buffer at the beginning
    uint16_t iter;
    for(iter = 0; iter<512; ++iter){
 800ac08:	2300      	movs	r3, #0
 800ac0a:	81fb      	strh	r3, [r7, #14]
 800ac0c:	e006      	b.n	800ac1c <CDC_Receive_FS+0x2c>
  	  ReceivedDataBuffer[iter] = 0;
 800ac0e:	89fb      	ldrh	r3, [r7, #14]
 800ac10:	4a0d      	ldr	r2, [pc, #52]	; (800ac48 <CDC_Receive_FS+0x58>)
 800ac12:	2100      	movs	r1, #0
 800ac14:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<512; ++iter){
 800ac16:	89fb      	ldrh	r3, [r7, #14]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	81fb      	strh	r3, [r7, #14]
 800ac1c:	89fb      	ldrh	r3, [r7, #14]
 800ac1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac22:	d3f4      	bcc.n	800ac0e <CDC_Receive_FS+0x1e>
    }

    strlcpy((char*)ReceivedDataBuffer, (const char*)Buf, (*Len) + 1);    // Rewrite data to the main.c buffer
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4806      	ldr	r0, [pc, #24]	; (800ac48 <CDC_Receive_FS+0x58>)
 800ac30:	f000 ffc6 	bl	800bbc0 <strlcpy>
    ReceivedDataFlag = 1;    // Data received set flag
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <CDC_Receive_FS+0x5c>)
 800ac36:	2201      	movs	r2, #1
 800ac38:	701a      	strb	r2, [r3, #0]

    return (USBD_OK);
 800ac3a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20005450 	.word	0x20005450
 800ac48:	20004f20 	.word	0x20004f20
 800ac4c:	20004b94 	.word	0x20004b94

0800ac50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac60:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <CDC_Transmit_FS+0x48>)
 800ac62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d001      	beq.n	800ac76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e00b      	b.n	800ac8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ac76:	887b      	ldrh	r3, [r7, #2]
 800ac78:	461a      	mov	r2, r3
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	4806      	ldr	r0, [pc, #24]	; (800ac98 <CDC_Transmit_FS+0x48>)
 800ac7e:	f7fa fa6c 	bl	800515a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ac82:	4805      	ldr	r0, [pc, #20]	; (800ac98 <CDC_Transmit_FS+0x48>)
 800ac84:	f7fa fa96 	bl	80051b4 <USBD_CDC_TransmitPacket>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20005450 	.word	0x20005450

0800ac9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800acae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
	...

0800acc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	; 0x28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acc8:	f107 0314 	add.w	r3, r7, #20
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	609a      	str	r2, [r3, #8]
 800acd4:	60da      	str	r2, [r3, #12]
 800acd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ace0:	d13a      	bne.n	800ad58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ace2:	2300      	movs	r3, #0
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	4b1e      	ldr	r3, [pc, #120]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ace8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acea:	4a1d      	ldr	r2, [pc, #116]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800acec:	f043 0301 	orr.w	r3, r3, #1
 800acf0:	6313      	str	r3, [r2, #48]	; 0x30
 800acf2:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800acf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad04:	2302      	movs	r3, #2
 800ad06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad10:	230a      	movs	r3, #10
 800ad12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad14:	f107 0314 	add.w	r3, r7, #20
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4812      	ldr	r0, [pc, #72]	; (800ad64 <HAL_PCD_MspInit+0xa4>)
 800ad1c:	f7f5 fd76 	bl	800080c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad20:	4b0f      	ldr	r3, [pc, #60]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ad22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad24:	4a0e      	ldr	r2, [pc, #56]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	6353      	str	r3, [r2, #52]	; 0x34
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ad32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad34:	4a0a      	ldr	r2, [pc, #40]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ad36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad3a:	6453      	str	r3, [r2, #68]	; 0x44
 800ad3c:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <HAL_PCD_MspInit+0xa0>)
 800ad3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad48:	2200      	movs	r2, #0
 800ad4a:	2105      	movs	r1, #5
 800ad4c:	2043      	movs	r0, #67	; 0x43
 800ad4e:	f7f5 fd33 	bl	80007b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad52:	2043      	movs	r0, #67	; 0x43
 800ad54:	f7f5 fd4c 	bl	80007f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad58:	bf00      	nop
 800ad5a:	3728      	adds	r7, #40	; 0x28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	40023800 	.word	0x40023800
 800ad64:	40020000 	.word	0x40020000

0800ad68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7fa fb14 	bl	80053ac <USBD_LL_SetupStage>
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ad9e:	78fa      	ldrb	r2, [r7, #3]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	4619      	mov	r1, r3
 800adb6:	f7fa fb4c 	bl	8005452 <USBD_LL_DataOutStage>
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	460b      	mov	r3, r1
 800adcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	1a9b      	subs	r3, r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	3348      	adds	r3, #72	; 0x48
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	4619      	mov	r1, r3
 800adea:	f7fa fb95 	bl	8005518 <USBD_LL_DataInStage>
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fa fc99 	bl	800573c <USBD_LL_SOF>
}
 800ae0a:	bf00      	nop
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d001      	beq.n	800ae2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ae26:	f7fe ffc1 	bl	8009dac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae30:	7bfa      	ldrb	r2, [r7, #15]
 800ae32:	4611      	mov	r1, r2
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fa fc46 	bl	80056c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fa fbff 	bl	8005644 <USBD_LL_Reset>
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
	...

0800ae50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fa fc41 	bl	80056e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	6812      	ldr	r2, [r2, #0]
 800ae72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae76:	f043 0301 	orr.w	r3, r3, #1
 800ae7a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae84:	4b04      	ldr	r3, [pc, #16]	; (800ae98 <HAL_PCD_SuspendCallback+0x48>)
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	4a03      	ldr	r2, [pc, #12]	; (800ae98 <HAL_PCD_SuspendCallback+0x48>)
 800ae8a:	f043 0306 	orr.w	r3, r3, #6
 800ae8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ae90:	bf00      	nop
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	e000ed00 	.word	0xe000ed00

0800ae9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fa fc30 	bl	8005710 <USBD_LL_Resume>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fa fc5b 	bl	800578a <USBD_LL_IsoOUTIncomplete>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	4611      	mov	r1, r2
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fa fc3c 	bl	8005770 <USBD_LL_IsoINIncomplete>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fa fc48 	bl	80057a4 <USBD_LL_DevConnected>
}
 800af14:	bf00      	nop
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fa fc45 	bl	80057ba <USBD_LL_DevDisconnected>
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d13c      	bne.n	800afc2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af48:	4a20      	ldr	r2, [pc, #128]	; (800afcc <USBD_LL_Init+0x94>)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a1e      	ldr	r2, [pc, #120]	; (800afcc <USBD_LL_Init+0x94>)
 800af54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af58:	4b1c      	ldr	r3, [pc, #112]	; (800afcc <USBD_LL_Init+0x94>)
 800af5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af60:	4b1a      	ldr	r3, [pc, #104]	; (800afcc <USBD_LL_Init+0x94>)
 800af62:	2204      	movs	r2, #4
 800af64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af66:	4b19      	ldr	r3, [pc, #100]	; (800afcc <USBD_LL_Init+0x94>)
 800af68:	2202      	movs	r2, #2
 800af6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af6c:	4b17      	ldr	r3, [pc, #92]	; (800afcc <USBD_LL_Init+0x94>)
 800af6e:	2200      	movs	r2, #0
 800af70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af72:	4b16      	ldr	r3, [pc, #88]	; (800afcc <USBD_LL_Init+0x94>)
 800af74:	2202      	movs	r2, #2
 800af76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af78:	4b14      	ldr	r3, [pc, #80]	; (800afcc <USBD_LL_Init+0x94>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af7e:	4b13      	ldr	r3, [pc, #76]	; (800afcc <USBD_LL_Init+0x94>)
 800af80:	2200      	movs	r2, #0
 800af82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af84:	4b11      	ldr	r3, [pc, #68]	; (800afcc <USBD_LL_Init+0x94>)
 800af86:	2200      	movs	r2, #0
 800af88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af8a:	4b10      	ldr	r3, [pc, #64]	; (800afcc <USBD_LL_Init+0x94>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af90:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <USBD_LL_Init+0x94>)
 800af92:	2200      	movs	r2, #0
 800af94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af96:	480d      	ldr	r0, [pc, #52]	; (800afcc <USBD_LL_Init+0x94>)
 800af98:	f7f5 fdeb 	bl	8000b72 <HAL_PCD_Init>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800afa2:	f7fe ff03 	bl	8009dac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afa6:	2180      	movs	r1, #128	; 0x80
 800afa8:	4808      	ldr	r0, [pc, #32]	; (800afcc <USBD_LL_Init+0x94>)
 800afaa:	f7f6 ff48 	bl	8001e3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afae:	2240      	movs	r2, #64	; 0x40
 800afb0:	2100      	movs	r1, #0
 800afb2:	4806      	ldr	r0, [pc, #24]	; (800afcc <USBD_LL_Init+0x94>)
 800afb4:	f7f6 fefc 	bl	8001db0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afb8:	2280      	movs	r2, #128	; 0x80
 800afba:	2101      	movs	r1, #1
 800afbc:	4803      	ldr	r0, [pc, #12]	; (800afcc <USBD_LL_Init+0x94>)
 800afbe:	f7f6 fef7 	bl	8001db0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	20005b20 	.word	0x20005b20

0800afd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f5 fee0 	bl	8000dac <HAL_PCD_Start>
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 f92a 	bl	800b24c <USBD_Get_USB_Status>
 800aff8:	4603      	mov	r3, r0
 800affa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800affc:	7bbb      	ldrb	r3, [r7, #14]
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	4608      	mov	r0, r1
 800b010:	4611      	mov	r1, r2
 800b012:	461a      	mov	r2, r3
 800b014:	4603      	mov	r3, r0
 800b016:	70fb      	strb	r3, [r7, #3]
 800b018:	460b      	mov	r3, r1
 800b01a:	70bb      	strb	r3, [r7, #2]
 800b01c:	4613      	mov	r3, r2
 800b01e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b02e:	78bb      	ldrb	r3, [r7, #2]
 800b030:	883a      	ldrh	r2, [r7, #0]
 800b032:	78f9      	ldrb	r1, [r7, #3]
 800b034:	f7f6 fac4 	bl	80015c0 <HAL_PCD_EP_Open>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 f904 	bl	800b24c <USBD_Get_USB_Status>
 800b044:	4603      	mov	r3, r0
 800b046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b048:	7bbb      	ldrb	r3, [r7, #14]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b06c:	78fa      	ldrb	r2, [r7, #3]
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f7f6 fb0d 	bl	8001690 <HAL_PCD_EP_Close>
 800b076:	4603      	mov	r3, r0
 800b078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f8e5 	bl	800b24c <USBD_Get_USB_Status>
 800b082:	4603      	mov	r3, r0
 800b084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b086:	7bbb      	ldrb	r3, [r7, #14]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b09c:	2300      	movs	r3, #0
 800b09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0aa:	78fa      	ldrb	r2, [r7, #3]
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7f6 fbe5 	bl	800187e <HAL_PCD_EP_SetStall>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f8c6 	bl	800b24c <USBD_Get_USB_Status>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b0e8:	78fa      	ldrb	r2, [r7, #3]
 800b0ea:	4611      	mov	r1, r2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7f6 fc2a 	bl	8001946 <HAL_PCD_EP_ClrStall>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0f6:	7bfb      	ldrb	r3, [r7, #15]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f8a7 	bl	800b24c <USBD_Get_USB_Status>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b102:	7bbb      	ldrb	r3, [r7, #14]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b11e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da0b      	bge.n	800b140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b12e:	68f9      	ldr	r1, [r7, #12]
 800b130:	4613      	mov	r3, r2
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	333e      	adds	r3, #62	; 0x3e
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	e00b      	b.n	800b158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b146:	68f9      	ldr	r1, [r7, #12]
 800b148:	4613      	mov	r3, r2
 800b14a:	00db      	lsls	r3, r3, #3
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b156:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	4611      	mov	r1, r2
 800b182:	4618      	mov	r0, r3
 800b184:	f7f6 f9f7 	bl	8001576 <HAL_PCD_SetAddress>
 800b188:	4603      	mov	r3, r0
 800b18a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 f85c 	bl	800b24c <USBD_Get_USB_Status>
 800b194:	4603      	mov	r3, r0
 800b196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b198:	7bbb      	ldrb	r3, [r7, #14]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b1c0:	7af9      	ldrb	r1, [r7, #11]
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	f7f6 fb10 	bl	80017ea <HAL_PCD_EP_Transmit>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 f83b 	bl	800b24c <USBD_Get_USB_Status>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1da:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b202:	7af9      	ldrb	r1, [r7, #11]
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	f7f6 fa8c 	bl	8001724 <HAL_PCD_EP_Receive>
 800b20c:	4603      	mov	r3, r0
 800b20e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b210:	7dfb      	ldrb	r3, [r7, #23]
 800b212:	4618      	mov	r0, r3
 800b214:	f000 f81a 	bl	800b24c <USBD_Get_USB_Status>
 800b218:	4603      	mov	r3, r0
 800b21a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b21c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b082      	sub	sp, #8
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	460b      	mov	r3, r1
 800b230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b238:	78fa      	ldrb	r2, [r7, #3]
 800b23a:	4611      	mov	r1, r2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f6 fabc 	bl	80017ba <HAL_PCD_EP_GetRxCount>
 800b242:	4603      	mov	r3, r0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b25a:	79fb      	ldrb	r3, [r7, #7]
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d817      	bhi.n	800b290 <USBD_Get_USB_Status+0x44>
 800b260:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <USBD_Get_USB_Status+0x1c>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b279 	.word	0x0800b279
 800b26c:	0800b27f 	.word	0x0800b27f
 800b270:	0800b285 	.word	0x0800b285
 800b274:	0800b28b 	.word	0x0800b28b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
    break;
 800b27c:	e00b      	b.n	800b296 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b27e:	2303      	movs	r3, #3
 800b280:	73fb      	strb	r3, [r7, #15]
    break;
 800b282:	e008      	b.n	800b296 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b284:	2301      	movs	r3, #1
 800b286:	73fb      	strb	r3, [r7, #15]
    break;
 800b288:	e005      	b.n	800b296 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b28a:	2303      	movs	r3, #3
 800b28c:	73fb      	strb	r3, [r7, #15]
    break;
 800b28e:	e002      	b.n	800b296 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	73fb      	strb	r3, [r7, #15]
    break;
 800b294:	bf00      	nop
  }
  return usb_status;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2212      	movs	r2, #18
 800b2b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2b6:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	200001a8 	.word	0x200001a8

0800b2c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2204      	movs	r2, #4
 800b2d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2da:	4b03      	ldr	r3, [pc, #12]	; (800b2e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	200001bc 	.word	0x200001bc

0800b2ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	6039      	str	r1, [r7, #0]
 800b2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d105      	bne.n	800b30a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	4907      	ldr	r1, [pc, #28]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
 800b302:	4808      	ldr	r0, [pc, #32]	; (800b324 <USBD_FS_ProductStrDescriptor+0x38>)
 800b304:	f7fa ffd5 	bl	80062b2 <USBD_GetString>
 800b308:	e004      	b.n	800b314 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	4904      	ldr	r1, [pc, #16]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <USBD_FS_ProductStrDescriptor+0x38>)
 800b310:	f7fa ffcf 	bl	80062b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	20005f28 	.word	0x20005f28
 800b324:	0800c440 	.word	0x0800c440

0800b328 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	4904      	ldr	r1, [pc, #16]	; (800b348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b338:	4804      	ldr	r0, [pc, #16]	; (800b34c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b33a:	f7fa ffba 	bl	80062b2 <USBD_GetString>
  return USBD_StrDesc;
 800b33e:	4b02      	ldr	r3, [pc, #8]	; (800b348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20005f28 	.word	0x20005f28
 800b34c:	0800c458 	.word	0x0800c458

0800b350 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	221a      	movs	r2, #26
 800b360:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b362:	f000 f843 	bl	800b3ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b366:	4b02      	ldr	r3, [pc, #8]	; (800b370 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	200001c0 	.word	0x200001c0

0800b374 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	4907      	ldr	r1, [pc, #28]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b38a:	4808      	ldr	r0, [pc, #32]	; (800b3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b38c:	f7fa ff91 	bl	80062b2 <USBD_GetString>
 800b390:	e004      	b.n	800b39c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	4904      	ldr	r1, [pc, #16]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b396:	4805      	ldr	r0, [pc, #20]	; (800b3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b398:	f7fa ff8b 	bl	80062b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20005f28 	.word	0x20005f28
 800b3ac:	0800c46c 	.word	0x0800c46c

0800b3b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d105      	bne.n	800b3ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	4907      	ldr	r1, [pc, #28]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3c6:	4808      	ldr	r0, [pc, #32]	; (800b3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3c8:	f7fa ff73 	bl	80062b2 <USBD_GetString>
 800b3cc:	e004      	b.n	800b3d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	4904      	ldr	r1, [pc, #16]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3d2:	4805      	ldr	r0, [pc, #20]	; (800b3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3d4:	f7fa ff6d 	bl	80062b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3d8:	4b02      	ldr	r3, [pc, #8]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20005f28 	.word	0x20005f28
 800b3e8:	0800c478 	.word	0x0800c478

0800b3ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	; (800b430 <Get_SerialNum+0x44>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <Get_SerialNum+0x48>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <Get_SerialNum+0x4c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4413      	add	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b412:	2208      	movs	r2, #8
 800b414:	4909      	ldr	r1, [pc, #36]	; (800b43c <Get_SerialNum+0x50>)
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f814 	bl	800b444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b41c:	2204      	movs	r2, #4
 800b41e:	4908      	ldr	r1, [pc, #32]	; (800b440 <Get_SerialNum+0x54>)
 800b420:	68b8      	ldr	r0, [r7, #8]
 800b422:	f000 f80f 	bl	800b444 <IntToUnicode>
  }
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	1fff7a10 	.word	0x1fff7a10
 800b434:	1fff7a14 	.word	0x1fff7a14
 800b438:	1fff7a18 	.word	0x1fff7a18
 800b43c:	200001c2 	.word	0x200001c2
 800b440:	200001d2 	.word	0x200001d2

0800b444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b456:	2300      	movs	r3, #0
 800b458:	75fb      	strb	r3, [r7, #23]
 800b45a:	e027      	b.n	800b4ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	0f1b      	lsrs	r3, r3, #28
 800b460:	2b09      	cmp	r3, #9
 800b462:	d80b      	bhi.n	800b47c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	0f1b      	lsrs	r3, r3, #28
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4619      	mov	r1, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	440b      	add	r3, r1
 800b474:	3230      	adds	r2, #48	; 0x30
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e00a      	b.n	800b492 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	0f1b      	lsrs	r3, r3, #28
 800b480:	b2da      	uxtb	r2, r3
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	4619      	mov	r1, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	440b      	add	r3, r1
 800b48c:	3237      	adds	r2, #55	; 0x37
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	3301      	adds	r3, #1
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
 800b4ac:	7dfa      	ldrb	r2, [r7, #23]
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d3d3      	bcc.n	800b45c <IntToUnicode+0x18>
  }
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 800b4c0:	b480      	push	{r7}
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	bf00      	nop
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 800b4ce:	b480      	push	{r7}
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	bf00      	nop
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	bf00      	nop
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 800b4ea:	b480      	push	{r7}
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	bf00      	nop
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
 800b51a:	460b      	mov	r3, r1
 800b51c:	70fb      	strb	r3, [r7, #3]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	78fa      	ldrb	r2, [r7, #3]
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
 800b534:	2300      	movs	r3, #0
 800b536:	4618      	mov	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	4603      	mov	r3, r0
 800b548:	71fb      	strb	r3, [r7, #7]
 800b54a:	bf00      	nop
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	807b      	strh	r3, [r7, #2]
 800b562:	bf00      	nop
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	460b      	mov	r3, r1
 800b578:	807b      	strh	r3, [r7, #2]
 800b57a:	bf00      	nop
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
	...

0800b588 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <reg_wizchip_cs_cbfunc+0x16>
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800b59e:	4b09      	ldr	r3, [pc, #36]	; (800b5c4 <reg_wizchip_cs_cbfunc+0x3c>)
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <reg_wizchip_cs_cbfunc+0x40>)
 800b5a2:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 800b5a4:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <reg_wizchip_cs_cbfunc+0x3c>)
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <reg_wizchip_cs_cbfunc+0x44>)
 800b5a8:	615a      	str	r2, [r3, #20]
 800b5aa:	e005      	b.n	800b5b8 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800b5ac:	4a05      	ldr	r2, [pc, #20]	; (800b5c4 <reg_wizchip_cs_cbfunc+0x3c>)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800b5b2:	4a04      	ldr	r2, [pc, #16]	; (800b5c4 <reg_wizchip_cs_cbfunc+0x3c>)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	6153      	str	r3, [r2, #20]
   }
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	200001dc 	.word	0x200001dc
 800b5c8:	0800b4dd 	.word	0x0800b4dd
 800b5cc:	0800b4eb 	.word	0x0800b4eb

0800b5d0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800b5da:	bf00      	nop
 800b5dc:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <reg_wizchip_spi_cbfunc+0x4c>)
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0f9      	beq.n	800b5dc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <reg_wizchip_spi_cbfunc+0x24>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d106      	bne.n	800b602 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800b5f4:	4b09      	ldr	r3, [pc, #36]	; (800b61c <reg_wizchip_spi_cbfunc+0x4c>)
 800b5f6:	4a0a      	ldr	r2, [pc, #40]	; (800b620 <reg_wizchip_spi_cbfunc+0x50>)
 800b5f8:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800b5fa:	4b08      	ldr	r3, [pc, #32]	; (800b61c <reg_wizchip_spi_cbfunc+0x4c>)
 800b5fc:	4a09      	ldr	r2, [pc, #36]	; (800b624 <reg_wizchip_spi_cbfunc+0x54>)
 800b5fe:	61da      	str	r2, [r3, #28]
 800b600:	e005      	b.n	800b60e <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800b602:	4a06      	ldr	r2, [pc, #24]	; (800b61c <reg_wizchip_spi_cbfunc+0x4c>)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800b608:	4a04      	ldr	r2, [pc, #16]	; (800b61c <reg_wizchip_spi_cbfunc+0x4c>)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	61d3      	str	r3, [r2, #28]
   }
}
 800b60e:	bf00      	nop
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	200001dc 	.word	0x200001dc
 800b620:	0800b531 	.word	0x0800b531
 800b624:	0800b541 	.word	0x0800b541

0800b628 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800b632:	bf00      	nop
 800b634:	4b0f      	ldr	r3, [pc, #60]	; (800b674 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0f9      	beq.n	800b634 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d002      	beq.n	800b64c <reg_wizchip_spiburst_cbfunc+0x24>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d106      	bne.n	800b65a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800b64c:	4b09      	ldr	r3, [pc, #36]	; (800b674 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800b64e:	4a0a      	ldr	r2, [pc, #40]	; (800b678 <reg_wizchip_spiburst_cbfunc+0x50>)
 800b650:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800b652:	4b08      	ldr	r3, [pc, #32]	; (800b674 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800b654:	4a09      	ldr	r2, [pc, #36]	; (800b67c <reg_wizchip_spiburst_cbfunc+0x54>)
 800b656:	625a      	str	r2, [r3, #36]	; 0x24
 800b658:	e005      	b.n	800b666 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800b65a:	4a06      	ldr	r2, [pc, #24]	; (800b674 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800b660:	4a04      	ldr	r2, [pc, #16]	; (800b674 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	200001dc 	.word	0x200001dc
 800b678:	0800b557 	.word	0x0800b557
 800b67c:	0800b56f 	.word	0x0800b56f

0800b680 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800b686:	1d3b      	adds	r3, r7, #4
 800b688:	2206      	movs	r2, #6
 800b68a:	4619      	mov	r1, r3
 800b68c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b690:	f7fd fcce 	bl	8009030 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800b694:	f107 0314 	add.w	r3, r7, #20
 800b698:	2204      	movs	r2, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b6a0:	f7fd fcc6 	bl	8009030 <WIZCHIP_READ_BUF>
 800b6a4:	f107 0310 	add.w	r3, r7, #16
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b6b0:	f7fd fcbe 	bl	8009030 <WIZCHIP_READ_BUF>
 800b6b4:	f107 030c 	add.w	r3, r7, #12
 800b6b8:	2204      	movs	r2, #4
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b6c0:	f7fd fcb6 	bl	8009030 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800b6c4:	2180      	movs	r1, #128	; 0x80
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	f7fd fc64 	bl	8008f94 <WIZCHIP_WRITE>
   getMR(); // for delay
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	f7fd fc15 	bl	8008efc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800b6d2:	1d3b      	adds	r3, r7, #4
 800b6d4:	2206      	movs	r2, #6
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b6dc:	f7fd fd08 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800b6e0:	f107 0314 	add.w	r3, r7, #20
 800b6e4:	2204      	movs	r2, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b6ec:	f7fd fd00 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800b6f0:	f107 0310 	add.w	r3, r7, #16
 800b6f4:	2204      	movs	r2, #4
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b6fc:	f7fd fcf8 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800b700:	f107 030c 	add.w	r3, r7, #12
 800b704:	2204      	movs	r2, #4
 800b706:	4619      	mov	r1, r3
 800b708:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b70c:	f7fd fcf0 	bl	80090f0 <WIZCHIP_WRITE_BUF>
}
 800b710:	bf00      	nop
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800b726:	f7ff ffab 	bl	800b680 <wizchip_sw_reset>
   if(txsize)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d03b      	beq.n	800b7a8 <wizchip_init+0x90>
   {
      tmp = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b734:	2300      	movs	r3, #0
 800b736:	73fb      	strb	r3, [r7, #15]
 800b738:	e015      	b.n	800b766 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 800b73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	4413      	add	r3, r2
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	7bbb      	ldrb	r3, [r7, #14]
 800b746:	4413      	add	r3, r2
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800b74c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b750:	2b10      	cmp	r3, #16
 800b752:	dd02      	ble.n	800b75a <wizchip_init+0x42>
 800b754:	f04f 33ff 	mov.w	r3, #4294967295
 800b758:	e066      	b.n	800b828 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	3301      	adds	r3, #1
 800b762:	b2db      	uxtb	r3, r3
 800b764:	73fb      	strb	r3, [r7, #15]
 800b766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76a:	2b07      	cmp	r3, #7
 800b76c:	dde5      	ble.n	800b73a <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
 800b772:	e015      	b.n	800b7a0 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 800b774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	3301      	adds	r3, #1
 800b77c:	00db      	lsls	r3, r3, #3
 800b77e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800b782:	4618      	mov	r0, r3
 800b784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	4413      	add	r3, r2
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	4619      	mov	r1, r3
 800b790:	f7fd fc00 	bl	8008f94 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	3301      	adds	r3, #1
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	73fb      	strb	r3, [r7, #15]
 800b7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7a4:	2b07      	cmp	r3, #7
 800b7a6:	dde5      	ble.n	800b774 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d03b      	beq.n	800b826 <wizchip_init+0x10e>
   {
      tmp = 0;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
 800b7b6:	e015      	b.n	800b7e4 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 800b7b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	4413      	add	r3, r2
 800b7c0:	781a      	ldrb	r2, [r3, #0]
 800b7c2:	7bbb      	ldrb	r3, [r7, #14]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800b7ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7ce:	2b10      	cmp	r3, #16
 800b7d0:	dd02      	ble.n	800b7d8 <wizchip_init+0xc0>
 800b7d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d6:	e027      	b.n	800b828 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	3301      	adds	r3, #1
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	73fb      	strb	r3, [r7, #15]
 800b7e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7e8:	2b07      	cmp	r3, #7
 800b7ea:	dde5      	ble.n	800b7b8 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	73fb      	strb	r3, [r7, #15]
 800b7f0:	e015      	b.n	800b81e <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 800b7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800b800:	4618      	mov	r0, r3
 800b802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b806:	683a      	ldr	r2, [r7, #0]
 800b808:	4413      	add	r3, r2
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7fd fbc1 	bl	8008f94 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800b812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	3301      	adds	r3, #1
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	73fb      	strb	r3, [r7, #15]
 800b81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b822:	2b07      	cmp	r3, #7
 800b824:	dde5      	ble.n	800b7f2 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <wizphy_getphylink>:
  ret = (ret << 8) + imr;
  return (intr_kind)ret;
}

int8_t wizphy_getphylink(void)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800b836:	2300      	movs	r3, #0
 800b838:	71fb      	strb	r3, [r7, #7]
       tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800b83a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800b83e:	f7fd fb5d 	bl	8008efc <WIZCHIP_READ>
 800b842:	4603      	mov	r3, r0
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d001      	beq.n	800b850 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800b84c:	2301      	movs	r3, #1
 800b84e:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800b850:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2206      	movs	r2, #6
 800b868:	4619      	mov	r1, r3
 800b86a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800b86e:	f7fd fc3f 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	330e      	adds	r3, #14
 800b876:	2204      	movs	r2, #4
 800b878:	4619      	mov	r1, r3
 800b87a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b87e:	f7fd fc37 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	330a      	adds	r3, #10
 800b886:	2204      	movs	r2, #4
 800b888:	4619      	mov	r1, r3
 800b88a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800b88e:	f7fd fc2f 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3306      	adds	r3, #6
 800b896:	2204      	movs	r2, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800b89e:	f7fd fc27 	bl	80090f0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	7c9a      	ldrb	r2, [r3, #18]
 800b8a6:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <wizchip_setnetinfo+0x78>)
 800b8a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7cda      	ldrb	r2, [r3, #19]
 800b8ae:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <wizchip_setnetinfo+0x78>)
 800b8b0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	7d1a      	ldrb	r2, [r3, #20]
 800b8b6:	4b07      	ldr	r3, [pc, #28]	; (800b8d4 <wizchip_setnetinfo+0x78>)
 800b8b8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7d5a      	ldrb	r2, [r3, #21]
 800b8be:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <wizchip_setnetinfo+0x78>)
 800b8c0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	7d9a      	ldrb	r2, [r3, #22]
 800b8c6:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <wizchip_setnetinfo+0x7c>)
 800b8c8:	701a      	strb	r2, [r3, #0]
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20004bb8 	.word	0x20004bb8
 800b8d8:	20004bbc 	.word	0x20004bbc

0800b8dc <wizchip_settimeout>:
{
   return (netmode_type) getMR();
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800b8ee:	f7fd fb51 	bl	8008f94 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	885b      	ldrh	r3, [r3, #2]
 800b8f6:	0a1b      	lsrs	r3, r3, #8
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800b902:	f7fd fb47 	bl	8008f94 <WIZCHIP_WRITE>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	885b      	ldrh	r3, [r3, #2]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	4619      	mov	r1, r3
 800b90e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800b912:	f7fd fb3f 	bl	8008f94 <WIZCHIP_WRITE>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b920:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b958 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b924:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b926:	e003      	b.n	800b930 <LoopCopyDataInit>

0800b928 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b92a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b92c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b92e:	3104      	adds	r1, #4

0800b930 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b930:	480b      	ldr	r0, [pc, #44]	; (800b960 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b932:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b934:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b936:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b938:	d3f6      	bcc.n	800b928 <CopyDataInit>
  ldr  r2, =_sbss
 800b93a:	4a0b      	ldr	r2, [pc, #44]	; (800b968 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b93c:	e002      	b.n	800b944 <LoopFillZerobss>

0800b93e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b93e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b940:	f842 3b04 	str.w	r3, [r2], #4

0800b944 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b944:	4b09      	ldr	r3, [pc, #36]	; (800b96c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b946:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b948:	d3f9      	bcc.n	800b93e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b94a:	f7fe ff65 	bl	800a818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b94e:	f000 f817 	bl	800b980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b952:	f7fd fe3f 	bl	80095d4 <main>
  bx  lr    
 800b956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b958:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b95c:	0800c5d4 	.word	0x0800c5d4
  ldr  r0, =_sdata
 800b960:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b964:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 800b968:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 800b96c:	2000612c 	.word	0x2000612c

0800b970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b970:	e7fe      	b.n	800b970 <ADC_IRQHandler>
	...

0800b974 <__errno>:
 800b974:	4b01      	ldr	r3, [pc, #4]	; (800b97c <__errno+0x8>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	20000204 	.word	0x20000204

0800b980 <__libc_init_array>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4e0d      	ldr	r6, [pc, #52]	; (800b9b8 <__libc_init_array+0x38>)
 800b984:	4c0d      	ldr	r4, [pc, #52]	; (800b9bc <__libc_init_array+0x3c>)
 800b986:	1ba4      	subs	r4, r4, r6
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	2500      	movs	r5, #0
 800b98c:	42a5      	cmp	r5, r4
 800b98e:	d109      	bne.n	800b9a4 <__libc_init_array+0x24>
 800b990:	4e0b      	ldr	r6, [pc, #44]	; (800b9c0 <__libc_init_array+0x40>)
 800b992:	4c0c      	ldr	r4, [pc, #48]	; (800b9c4 <__libc_init_array+0x44>)
 800b994:	f000 fc60 	bl	800c258 <_init>
 800b998:	1ba4      	subs	r4, r4, r6
 800b99a:	10a4      	asrs	r4, r4, #2
 800b99c:	2500      	movs	r5, #0
 800b99e:	42a5      	cmp	r5, r4
 800b9a0:	d105      	bne.n	800b9ae <__libc_init_array+0x2e>
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9a8:	4798      	blx	r3
 800b9aa:	3501      	adds	r5, #1
 800b9ac:	e7ee      	b.n	800b98c <__libc_init_array+0xc>
 800b9ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b9b2:	4798      	blx	r3
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	e7f2      	b.n	800b99e <__libc_init_array+0x1e>
 800b9b8:	0800c5cc 	.word	0x0800c5cc
 800b9bc:	0800c5cc 	.word	0x0800c5cc
 800b9c0:	0800c5cc 	.word	0x0800c5cc
 800b9c4:	0800c5d0 	.word	0x0800c5d0

0800b9c8 <malloc>:
 800b9c8:	4b02      	ldr	r3, [pc, #8]	; (800b9d4 <malloc+0xc>)
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	f000 b86d 	b.w	800baac <_malloc_r>
 800b9d2:	bf00      	nop
 800b9d4:	20000204 	.word	0x20000204

0800b9d8 <free>:
 800b9d8:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <free+0xc>)
 800b9da:	4601      	mov	r1, r0
 800b9dc:	6818      	ldr	r0, [r3, #0]
 800b9de:	f000 b817 	b.w	800ba10 <_free_r>
 800b9e2:	bf00      	nop
 800b9e4:	20000204 	.word	0x20000204

0800b9e8 <memcpy>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	1e43      	subs	r3, r0, #1
 800b9ec:	440a      	add	r2, r1
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	d100      	bne.n	800b9f4 <memcpy+0xc>
 800b9f2:	bd10      	pop	{r4, pc}
 800b9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9fc:	e7f7      	b.n	800b9ee <memcpy+0x6>

0800b9fe <memset>:
 800b9fe:	4402      	add	r2, r0
 800ba00:	4603      	mov	r3, r0
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d100      	bne.n	800ba08 <memset+0xa>
 800ba06:	4770      	bx	lr
 800ba08:	f803 1b01 	strb.w	r1, [r3], #1
 800ba0c:	e7f9      	b.n	800ba02 <memset+0x4>
	...

0800ba10 <_free_r>:
 800ba10:	b538      	push	{r3, r4, r5, lr}
 800ba12:	4605      	mov	r5, r0
 800ba14:	2900      	cmp	r1, #0
 800ba16:	d045      	beq.n	800baa4 <_free_r+0x94>
 800ba18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba1c:	1f0c      	subs	r4, r1, #4
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	bfb8      	it	lt
 800ba22:	18e4      	addlt	r4, r4, r3
 800ba24:	f000 f8f3 	bl	800bc0e <__malloc_lock>
 800ba28:	4a1f      	ldr	r2, [pc, #124]	; (800baa8 <_free_r+0x98>)
 800ba2a:	6813      	ldr	r3, [r2, #0]
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	b933      	cbnz	r3, 800ba3e <_free_r+0x2e>
 800ba30:	6063      	str	r3, [r4, #4]
 800ba32:	6014      	str	r4, [r2, #0]
 800ba34:	4628      	mov	r0, r5
 800ba36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3a:	f000 b8e9 	b.w	800bc10 <__malloc_unlock>
 800ba3e:	42a3      	cmp	r3, r4
 800ba40:	d90c      	bls.n	800ba5c <_free_r+0x4c>
 800ba42:	6821      	ldr	r1, [r4, #0]
 800ba44:	1862      	adds	r2, r4, r1
 800ba46:	4293      	cmp	r3, r2
 800ba48:	bf04      	itt	eq
 800ba4a:	681a      	ldreq	r2, [r3, #0]
 800ba4c:	685b      	ldreq	r3, [r3, #4]
 800ba4e:	6063      	str	r3, [r4, #4]
 800ba50:	bf04      	itt	eq
 800ba52:	1852      	addeq	r2, r2, r1
 800ba54:	6022      	streq	r2, [r4, #0]
 800ba56:	6004      	str	r4, [r0, #0]
 800ba58:	e7ec      	b.n	800ba34 <_free_r+0x24>
 800ba5a:	4613      	mov	r3, r2
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	b10a      	cbz	r2, 800ba64 <_free_r+0x54>
 800ba60:	42a2      	cmp	r2, r4
 800ba62:	d9fa      	bls.n	800ba5a <_free_r+0x4a>
 800ba64:	6819      	ldr	r1, [r3, #0]
 800ba66:	1858      	adds	r0, r3, r1
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d10b      	bne.n	800ba84 <_free_r+0x74>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	4401      	add	r1, r0
 800ba70:	1858      	adds	r0, r3, r1
 800ba72:	4282      	cmp	r2, r0
 800ba74:	6019      	str	r1, [r3, #0]
 800ba76:	d1dd      	bne.n	800ba34 <_free_r+0x24>
 800ba78:	6810      	ldr	r0, [r2, #0]
 800ba7a:	6852      	ldr	r2, [r2, #4]
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	4401      	add	r1, r0
 800ba80:	6019      	str	r1, [r3, #0]
 800ba82:	e7d7      	b.n	800ba34 <_free_r+0x24>
 800ba84:	d902      	bls.n	800ba8c <_free_r+0x7c>
 800ba86:	230c      	movs	r3, #12
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	e7d3      	b.n	800ba34 <_free_r+0x24>
 800ba8c:	6820      	ldr	r0, [r4, #0]
 800ba8e:	1821      	adds	r1, r4, r0
 800ba90:	428a      	cmp	r2, r1
 800ba92:	bf04      	itt	eq
 800ba94:	6811      	ldreq	r1, [r2, #0]
 800ba96:	6852      	ldreq	r2, [r2, #4]
 800ba98:	6062      	str	r2, [r4, #4]
 800ba9a:	bf04      	itt	eq
 800ba9c:	1809      	addeq	r1, r1, r0
 800ba9e:	6021      	streq	r1, [r4, #0]
 800baa0:	605c      	str	r4, [r3, #4]
 800baa2:	e7c7      	b.n	800ba34 <_free_r+0x24>
 800baa4:	bd38      	pop	{r3, r4, r5, pc}
 800baa6:	bf00      	nop
 800baa8:	20004bc0 	.word	0x20004bc0

0800baac <_malloc_r>:
 800baac:	b570      	push	{r4, r5, r6, lr}
 800baae:	1ccd      	adds	r5, r1, #3
 800bab0:	f025 0503 	bic.w	r5, r5, #3
 800bab4:	3508      	adds	r5, #8
 800bab6:	2d0c      	cmp	r5, #12
 800bab8:	bf38      	it	cc
 800baba:	250c      	movcc	r5, #12
 800babc:	2d00      	cmp	r5, #0
 800babe:	4606      	mov	r6, r0
 800bac0:	db01      	blt.n	800bac6 <_malloc_r+0x1a>
 800bac2:	42a9      	cmp	r1, r5
 800bac4:	d903      	bls.n	800bace <_malloc_r+0x22>
 800bac6:	230c      	movs	r3, #12
 800bac8:	6033      	str	r3, [r6, #0]
 800baca:	2000      	movs	r0, #0
 800bacc:	bd70      	pop	{r4, r5, r6, pc}
 800bace:	f000 f89e 	bl	800bc0e <__malloc_lock>
 800bad2:	4a21      	ldr	r2, [pc, #132]	; (800bb58 <_malloc_r+0xac>)
 800bad4:	6814      	ldr	r4, [r2, #0]
 800bad6:	4621      	mov	r1, r4
 800bad8:	b991      	cbnz	r1, 800bb00 <_malloc_r+0x54>
 800bada:	4c20      	ldr	r4, [pc, #128]	; (800bb5c <_malloc_r+0xb0>)
 800badc:	6823      	ldr	r3, [r4, #0]
 800bade:	b91b      	cbnz	r3, 800bae8 <_malloc_r+0x3c>
 800bae0:	4630      	mov	r0, r6
 800bae2:	f000 f83d 	bl	800bb60 <_sbrk_r>
 800bae6:	6020      	str	r0, [r4, #0]
 800bae8:	4629      	mov	r1, r5
 800baea:	4630      	mov	r0, r6
 800baec:	f000 f838 	bl	800bb60 <_sbrk_r>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d124      	bne.n	800bb3e <_malloc_r+0x92>
 800baf4:	230c      	movs	r3, #12
 800baf6:	6033      	str	r3, [r6, #0]
 800baf8:	4630      	mov	r0, r6
 800bafa:	f000 f889 	bl	800bc10 <__malloc_unlock>
 800bafe:	e7e4      	b.n	800baca <_malloc_r+0x1e>
 800bb00:	680b      	ldr	r3, [r1, #0]
 800bb02:	1b5b      	subs	r3, r3, r5
 800bb04:	d418      	bmi.n	800bb38 <_malloc_r+0x8c>
 800bb06:	2b0b      	cmp	r3, #11
 800bb08:	d90f      	bls.n	800bb2a <_malloc_r+0x7e>
 800bb0a:	600b      	str	r3, [r1, #0]
 800bb0c:	50cd      	str	r5, [r1, r3]
 800bb0e:	18cc      	adds	r4, r1, r3
 800bb10:	4630      	mov	r0, r6
 800bb12:	f000 f87d 	bl	800bc10 <__malloc_unlock>
 800bb16:	f104 000b 	add.w	r0, r4, #11
 800bb1a:	1d23      	adds	r3, r4, #4
 800bb1c:	f020 0007 	bic.w	r0, r0, #7
 800bb20:	1ac3      	subs	r3, r0, r3
 800bb22:	d0d3      	beq.n	800bacc <_malloc_r+0x20>
 800bb24:	425a      	negs	r2, r3
 800bb26:	50e2      	str	r2, [r4, r3]
 800bb28:	e7d0      	b.n	800bacc <_malloc_r+0x20>
 800bb2a:	428c      	cmp	r4, r1
 800bb2c:	684b      	ldr	r3, [r1, #4]
 800bb2e:	bf16      	itet	ne
 800bb30:	6063      	strne	r3, [r4, #4]
 800bb32:	6013      	streq	r3, [r2, #0]
 800bb34:	460c      	movne	r4, r1
 800bb36:	e7eb      	b.n	800bb10 <_malloc_r+0x64>
 800bb38:	460c      	mov	r4, r1
 800bb3a:	6849      	ldr	r1, [r1, #4]
 800bb3c:	e7cc      	b.n	800bad8 <_malloc_r+0x2c>
 800bb3e:	1cc4      	adds	r4, r0, #3
 800bb40:	f024 0403 	bic.w	r4, r4, #3
 800bb44:	42a0      	cmp	r0, r4
 800bb46:	d005      	beq.n	800bb54 <_malloc_r+0xa8>
 800bb48:	1a21      	subs	r1, r4, r0
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f000 f808 	bl	800bb60 <_sbrk_r>
 800bb50:	3001      	adds	r0, #1
 800bb52:	d0cf      	beq.n	800baf4 <_malloc_r+0x48>
 800bb54:	6025      	str	r5, [r4, #0]
 800bb56:	e7db      	b.n	800bb10 <_malloc_r+0x64>
 800bb58:	20004bc0 	.word	0x20004bc0
 800bb5c:	20004bc4 	.word	0x20004bc4

0800bb60 <_sbrk_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4c06      	ldr	r4, [pc, #24]	; (800bb7c <_sbrk_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4605      	mov	r5, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	6023      	str	r3, [r4, #0]
 800bb6c:	f7fe fe28 	bl	800a7c0 <_sbrk>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_sbrk_r+0x1a>
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_sbrk_r+0x1a>
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20006128 	.word	0x20006128

0800bb80 <siprintf>:
 800bb80:	b40e      	push	{r1, r2, r3}
 800bb82:	b500      	push	{lr}
 800bb84:	b09c      	sub	sp, #112	; 0x70
 800bb86:	ab1d      	add	r3, sp, #116	; 0x74
 800bb88:	9002      	str	r0, [sp, #8]
 800bb8a:	9006      	str	r0, [sp, #24]
 800bb8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb90:	4809      	ldr	r0, [pc, #36]	; (800bbb8 <siprintf+0x38>)
 800bb92:	9107      	str	r1, [sp, #28]
 800bb94:	9104      	str	r1, [sp, #16]
 800bb96:	4909      	ldr	r1, [pc, #36]	; (800bbbc <siprintf+0x3c>)
 800bb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9c:	9105      	str	r1, [sp, #20]
 800bb9e:	6800      	ldr	r0, [r0, #0]
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	a902      	add	r1, sp, #8
 800bba4:	f000 f890 	bl	800bcc8 <_svfiprintf_r>
 800bba8:	9b02      	ldr	r3, [sp, #8]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	b01c      	add	sp, #112	; 0x70
 800bbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbb4:	b003      	add	sp, #12
 800bbb6:	4770      	bx	lr
 800bbb8:	20000204 	.word	0x20000204
 800bbbc:	ffff0208 	.word	0xffff0208

0800bbc0 <strlcpy>:
 800bbc0:	b510      	push	{r4, lr}
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	b162      	cbz	r2, 800bbe0 <strlcpy+0x20>
 800bbc6:	3a01      	subs	r2, #1
 800bbc8:	d008      	beq.n	800bbdc <strlcpy+0x1c>
 800bbca:	f813 4b01 	ldrb.w	r4, [r3], #1
 800bbce:	f800 4b01 	strb.w	r4, [r0], #1
 800bbd2:	2c00      	cmp	r4, #0
 800bbd4:	d1f7      	bne.n	800bbc6 <strlcpy+0x6>
 800bbd6:	1a58      	subs	r0, r3, r1
 800bbd8:	3801      	subs	r0, #1
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	2200      	movs	r2, #0
 800bbde:	7002      	strb	r2, [r0, #0]
 800bbe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe4:	2a00      	cmp	r2, #0
 800bbe6:	d1fb      	bne.n	800bbe0 <strlcpy+0x20>
 800bbe8:	e7f5      	b.n	800bbd6 <strlcpy+0x16>

0800bbea <strncmp>:
 800bbea:	b510      	push	{r4, lr}
 800bbec:	b16a      	cbz	r2, 800bc0a <strncmp+0x20>
 800bbee:	3901      	subs	r1, #1
 800bbf0:	1884      	adds	r4, r0, r2
 800bbf2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d103      	bne.n	800bc06 <strncmp+0x1c>
 800bbfe:	42a0      	cmp	r0, r4
 800bc00:	d001      	beq.n	800bc06 <strncmp+0x1c>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1f5      	bne.n	800bbf2 <strncmp+0x8>
 800bc06:	1a98      	subs	r0, r3, r2
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	e7fc      	b.n	800bc08 <strncmp+0x1e>

0800bc0e <__malloc_lock>:
 800bc0e:	4770      	bx	lr

0800bc10 <__malloc_unlock>:
 800bc10:	4770      	bx	lr

0800bc12 <__ssputs_r>:
 800bc12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc16:	688e      	ldr	r6, [r1, #8]
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	4682      	mov	sl, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	4690      	mov	r8, r2
 800bc20:	4699      	mov	r9, r3
 800bc22:	d837      	bhi.n	800bc94 <__ssputs_r+0x82>
 800bc24:	898a      	ldrh	r2, [r1, #12]
 800bc26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc2a:	d031      	beq.n	800bc90 <__ssputs_r+0x7e>
 800bc2c:	6825      	ldr	r5, [r4, #0]
 800bc2e:	6909      	ldr	r1, [r1, #16]
 800bc30:	1a6f      	subs	r7, r5, r1
 800bc32:	6965      	ldr	r5, [r4, #20]
 800bc34:	2302      	movs	r3, #2
 800bc36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc3a:	fb95 f5f3 	sdiv	r5, r5, r3
 800bc3e:	f109 0301 	add.w	r3, r9, #1
 800bc42:	443b      	add	r3, r7
 800bc44:	429d      	cmp	r5, r3
 800bc46:	bf38      	it	cc
 800bc48:	461d      	movcc	r5, r3
 800bc4a:	0553      	lsls	r3, r2, #21
 800bc4c:	d530      	bpl.n	800bcb0 <__ssputs_r+0x9e>
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7ff ff2c 	bl	800baac <_malloc_r>
 800bc54:	4606      	mov	r6, r0
 800bc56:	b950      	cbnz	r0, 800bc6e <__ssputs_r+0x5c>
 800bc58:	230c      	movs	r3, #12
 800bc5a:	f8ca 3000 	str.w	r3, [sl]
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6e:	463a      	mov	r2, r7
 800bc70:	6921      	ldr	r1, [r4, #16]
 800bc72:	f7ff feb9 	bl	800b9e8 <memcpy>
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	6126      	str	r6, [r4, #16]
 800bc84:	6165      	str	r5, [r4, #20]
 800bc86:	443e      	add	r6, r7
 800bc88:	1bed      	subs	r5, r5, r7
 800bc8a:	6026      	str	r6, [r4, #0]
 800bc8c:	60a5      	str	r5, [r4, #8]
 800bc8e:	464e      	mov	r6, r9
 800bc90:	454e      	cmp	r6, r9
 800bc92:	d900      	bls.n	800bc96 <__ssputs_r+0x84>
 800bc94:	464e      	mov	r6, r9
 800bc96:	4632      	mov	r2, r6
 800bc98:	4641      	mov	r1, r8
 800bc9a:	6820      	ldr	r0, [r4, #0]
 800bc9c:	f000 fa94 	bl	800c1c8 <memmove>
 800bca0:	68a3      	ldr	r3, [r4, #8]
 800bca2:	1b9b      	subs	r3, r3, r6
 800bca4:	60a3      	str	r3, [r4, #8]
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	441e      	add	r6, r3
 800bcaa:	6026      	str	r6, [r4, #0]
 800bcac:	2000      	movs	r0, #0
 800bcae:	e7dc      	b.n	800bc6a <__ssputs_r+0x58>
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	f000 faa2 	bl	800c1fa <_realloc_r>
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d1e2      	bne.n	800bc82 <__ssputs_r+0x70>
 800bcbc:	6921      	ldr	r1, [r4, #16]
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	f7ff fea6 	bl	800ba10 <_free_r>
 800bcc4:	e7c8      	b.n	800bc58 <__ssputs_r+0x46>
	...

0800bcc8 <_svfiprintf_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	461d      	mov	r5, r3
 800bcce:	898b      	ldrh	r3, [r1, #12]
 800bcd0:	061f      	lsls	r7, r3, #24
 800bcd2:	b09d      	sub	sp, #116	; 0x74
 800bcd4:	4680      	mov	r8, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	4616      	mov	r6, r2
 800bcda:	d50f      	bpl.n	800bcfc <_svfiprintf_r+0x34>
 800bcdc:	690b      	ldr	r3, [r1, #16]
 800bcde:	b96b      	cbnz	r3, 800bcfc <_svfiprintf_r+0x34>
 800bce0:	2140      	movs	r1, #64	; 0x40
 800bce2:	f7ff fee3 	bl	800baac <_malloc_r>
 800bce6:	6020      	str	r0, [r4, #0]
 800bce8:	6120      	str	r0, [r4, #16]
 800bcea:	b928      	cbnz	r0, 800bcf8 <_svfiprintf_r+0x30>
 800bcec:	230c      	movs	r3, #12
 800bcee:	f8c8 3000 	str.w	r3, [r8]
 800bcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf6:	e0c8      	b.n	800be8a <_svfiprintf_r+0x1c2>
 800bcf8:	2340      	movs	r3, #64	; 0x40
 800bcfa:	6163      	str	r3, [r4, #20]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	2320      	movs	r3, #32
 800bd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd06:	2330      	movs	r3, #48	; 0x30
 800bd08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0c:	9503      	str	r5, [sp, #12]
 800bd0e:	f04f 0b01 	mov.w	fp, #1
 800bd12:	4637      	mov	r7, r6
 800bd14:	463d      	mov	r5, r7
 800bd16:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd1a:	b10b      	cbz	r3, 800bd20 <_svfiprintf_r+0x58>
 800bd1c:	2b25      	cmp	r3, #37	; 0x25
 800bd1e:	d13e      	bne.n	800bd9e <_svfiprintf_r+0xd6>
 800bd20:	ebb7 0a06 	subs.w	sl, r7, r6
 800bd24:	d00b      	beq.n	800bd3e <_svfiprintf_r+0x76>
 800bd26:	4653      	mov	r3, sl
 800bd28:	4632      	mov	r2, r6
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	f7ff ff70 	bl	800bc12 <__ssputs_r>
 800bd32:	3001      	adds	r0, #1
 800bd34:	f000 80a4 	beq.w	800be80 <_svfiprintf_r+0x1b8>
 800bd38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd3a:	4453      	add	r3, sl
 800bd3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3e:	783b      	ldrb	r3, [r7, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 809d 	beq.w	800be80 <_svfiprintf_r+0x1b8>
 800bd46:	2300      	movs	r3, #0
 800bd48:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	9307      	str	r3, [sp, #28]
 800bd54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd58:	931a      	str	r3, [sp, #104]	; 0x68
 800bd5a:	462f      	mov	r7, r5
 800bd5c:	2205      	movs	r2, #5
 800bd5e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bd62:	4850      	ldr	r0, [pc, #320]	; (800bea4 <_svfiprintf_r+0x1dc>)
 800bd64:	f7f4 fa3c 	bl	80001e0 <memchr>
 800bd68:	9b04      	ldr	r3, [sp, #16]
 800bd6a:	b9d0      	cbnz	r0, 800bda2 <_svfiprintf_r+0xda>
 800bd6c:	06d9      	lsls	r1, r3, #27
 800bd6e:	bf44      	itt	mi
 800bd70:	2220      	movmi	r2, #32
 800bd72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd76:	071a      	lsls	r2, r3, #28
 800bd78:	bf44      	itt	mi
 800bd7a:	222b      	movmi	r2, #43	; 0x2b
 800bd7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd80:	782a      	ldrb	r2, [r5, #0]
 800bd82:	2a2a      	cmp	r2, #42	; 0x2a
 800bd84:	d015      	beq.n	800bdb2 <_svfiprintf_r+0xea>
 800bd86:	9a07      	ldr	r2, [sp, #28]
 800bd88:	462f      	mov	r7, r5
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	250a      	movs	r5, #10
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd94:	3b30      	subs	r3, #48	; 0x30
 800bd96:	2b09      	cmp	r3, #9
 800bd98:	d94d      	bls.n	800be36 <_svfiprintf_r+0x16e>
 800bd9a:	b1b8      	cbz	r0, 800bdcc <_svfiprintf_r+0x104>
 800bd9c:	e00f      	b.n	800bdbe <_svfiprintf_r+0xf6>
 800bd9e:	462f      	mov	r7, r5
 800bda0:	e7b8      	b.n	800bd14 <_svfiprintf_r+0x4c>
 800bda2:	4a40      	ldr	r2, [pc, #256]	; (800bea4 <_svfiprintf_r+0x1dc>)
 800bda4:	1a80      	subs	r0, r0, r2
 800bda6:	fa0b f000 	lsl.w	r0, fp, r0
 800bdaa:	4318      	orrs	r0, r3
 800bdac:	9004      	str	r0, [sp, #16]
 800bdae:	463d      	mov	r5, r7
 800bdb0:	e7d3      	b.n	800bd5a <_svfiprintf_r+0x92>
 800bdb2:	9a03      	ldr	r2, [sp, #12]
 800bdb4:	1d11      	adds	r1, r2, #4
 800bdb6:	6812      	ldr	r2, [r2, #0]
 800bdb8:	9103      	str	r1, [sp, #12]
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	db01      	blt.n	800bdc2 <_svfiprintf_r+0xfa>
 800bdbe:	9207      	str	r2, [sp, #28]
 800bdc0:	e004      	b.n	800bdcc <_svfiprintf_r+0x104>
 800bdc2:	4252      	negs	r2, r2
 800bdc4:	f043 0302 	orr.w	r3, r3, #2
 800bdc8:	9207      	str	r2, [sp, #28]
 800bdca:	9304      	str	r3, [sp, #16]
 800bdcc:	783b      	ldrb	r3, [r7, #0]
 800bdce:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd0:	d10c      	bne.n	800bdec <_svfiprintf_r+0x124>
 800bdd2:	787b      	ldrb	r3, [r7, #1]
 800bdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd6:	d133      	bne.n	800be40 <_svfiprintf_r+0x178>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	1d1a      	adds	r2, r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	9203      	str	r2, [sp, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bfb8      	it	lt
 800bde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bde8:	3702      	adds	r7, #2
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	4d2e      	ldr	r5, [pc, #184]	; (800bea8 <_svfiprintf_r+0x1e0>)
 800bdee:	7839      	ldrb	r1, [r7, #0]
 800bdf0:	2203      	movs	r2, #3
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f7f4 f9f4 	bl	80001e0 <memchr>
 800bdf8:	b138      	cbz	r0, 800be0a <_svfiprintf_r+0x142>
 800bdfa:	2340      	movs	r3, #64	; 0x40
 800bdfc:	1b40      	subs	r0, r0, r5
 800bdfe:	fa03 f000 	lsl.w	r0, r3, r0
 800be02:	9b04      	ldr	r3, [sp, #16]
 800be04:	4303      	orrs	r3, r0
 800be06:	3701      	adds	r7, #1
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	7839      	ldrb	r1, [r7, #0]
 800be0c:	4827      	ldr	r0, [pc, #156]	; (800beac <_svfiprintf_r+0x1e4>)
 800be0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be12:	2206      	movs	r2, #6
 800be14:	1c7e      	adds	r6, r7, #1
 800be16:	f7f4 f9e3 	bl	80001e0 <memchr>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d038      	beq.n	800be90 <_svfiprintf_r+0x1c8>
 800be1e:	4b24      	ldr	r3, [pc, #144]	; (800beb0 <_svfiprintf_r+0x1e8>)
 800be20:	bb13      	cbnz	r3, 800be68 <_svfiprintf_r+0x1a0>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	3307      	adds	r3, #7
 800be26:	f023 0307 	bic.w	r3, r3, #7
 800be2a:	3308      	adds	r3, #8
 800be2c:	9303      	str	r3, [sp, #12]
 800be2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be30:	444b      	add	r3, r9
 800be32:	9309      	str	r3, [sp, #36]	; 0x24
 800be34:	e76d      	b.n	800bd12 <_svfiprintf_r+0x4a>
 800be36:	fb05 3202 	mla	r2, r5, r2, r3
 800be3a:	2001      	movs	r0, #1
 800be3c:	460f      	mov	r7, r1
 800be3e:	e7a6      	b.n	800bd8e <_svfiprintf_r+0xc6>
 800be40:	2300      	movs	r3, #0
 800be42:	3701      	adds	r7, #1
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	4619      	mov	r1, r3
 800be48:	250a      	movs	r5, #10
 800be4a:	4638      	mov	r0, r7
 800be4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be50:	3a30      	subs	r2, #48	; 0x30
 800be52:	2a09      	cmp	r2, #9
 800be54:	d903      	bls.n	800be5e <_svfiprintf_r+0x196>
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0c8      	beq.n	800bdec <_svfiprintf_r+0x124>
 800be5a:	9105      	str	r1, [sp, #20]
 800be5c:	e7c6      	b.n	800bdec <_svfiprintf_r+0x124>
 800be5e:	fb05 2101 	mla	r1, r5, r1, r2
 800be62:	2301      	movs	r3, #1
 800be64:	4607      	mov	r7, r0
 800be66:	e7f0      	b.n	800be4a <_svfiprintf_r+0x182>
 800be68:	ab03      	add	r3, sp, #12
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	4622      	mov	r2, r4
 800be6e:	4b11      	ldr	r3, [pc, #68]	; (800beb4 <_svfiprintf_r+0x1ec>)
 800be70:	a904      	add	r1, sp, #16
 800be72:	4640      	mov	r0, r8
 800be74:	f3af 8000 	nop.w
 800be78:	f1b0 3fff 	cmp.w	r0, #4294967295
 800be7c:	4681      	mov	r9, r0
 800be7e:	d1d6      	bne.n	800be2e <_svfiprintf_r+0x166>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	065b      	lsls	r3, r3, #25
 800be84:	f53f af35 	bmi.w	800bcf2 <_svfiprintf_r+0x2a>
 800be88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be8a:	b01d      	add	sp, #116	; 0x74
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	ab03      	add	r3, sp, #12
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	4622      	mov	r2, r4
 800be96:	4b07      	ldr	r3, [pc, #28]	; (800beb4 <_svfiprintf_r+0x1ec>)
 800be98:	a904      	add	r1, sp, #16
 800be9a:	4640      	mov	r0, r8
 800be9c:	f000 f882 	bl	800bfa4 <_printf_i>
 800bea0:	e7ea      	b.n	800be78 <_svfiprintf_r+0x1b0>
 800bea2:	bf00      	nop
 800bea4:	0800c590 	.word	0x0800c590
 800bea8:	0800c596 	.word	0x0800c596
 800beac:	0800c59a 	.word	0x0800c59a
 800beb0:	00000000 	.word	0x00000000
 800beb4:	0800bc13 	.word	0x0800bc13

0800beb8 <_printf_common>:
 800beb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	4691      	mov	r9, r2
 800bebe:	461f      	mov	r7, r3
 800bec0:	688a      	ldr	r2, [r1, #8]
 800bec2:	690b      	ldr	r3, [r1, #16]
 800bec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec8:	4293      	cmp	r3, r2
 800beca:	bfb8      	it	lt
 800becc:	4613      	movlt	r3, r2
 800bece:	f8c9 3000 	str.w	r3, [r9]
 800bed2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bed6:	4606      	mov	r6, r0
 800bed8:	460c      	mov	r4, r1
 800beda:	b112      	cbz	r2, 800bee2 <_printf_common+0x2a>
 800bedc:	3301      	adds	r3, #1
 800bede:	f8c9 3000 	str.w	r3, [r9]
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	0699      	lsls	r1, r3, #26
 800bee6:	bf42      	ittt	mi
 800bee8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800beec:	3302      	addmi	r3, #2
 800beee:	f8c9 3000 	strmi.w	r3, [r9]
 800bef2:	6825      	ldr	r5, [r4, #0]
 800bef4:	f015 0506 	ands.w	r5, r5, #6
 800bef8:	d107      	bne.n	800bf0a <_printf_common+0x52>
 800befa:	f104 0a19 	add.w	sl, r4, #25
 800befe:	68e3      	ldr	r3, [r4, #12]
 800bf00:	f8d9 2000 	ldr.w	r2, [r9]
 800bf04:	1a9b      	subs	r3, r3, r2
 800bf06:	42ab      	cmp	r3, r5
 800bf08:	dc28      	bgt.n	800bf5c <_printf_common+0xa4>
 800bf0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf0e:	6822      	ldr	r2, [r4, #0]
 800bf10:	3300      	adds	r3, #0
 800bf12:	bf18      	it	ne
 800bf14:	2301      	movne	r3, #1
 800bf16:	0692      	lsls	r2, r2, #26
 800bf18:	d42d      	bmi.n	800bf76 <_printf_common+0xbe>
 800bf1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf1e:	4639      	mov	r1, r7
 800bf20:	4630      	mov	r0, r6
 800bf22:	47c0      	blx	r8
 800bf24:	3001      	adds	r0, #1
 800bf26:	d020      	beq.n	800bf6a <_printf_common+0xb2>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	68e5      	ldr	r5, [r4, #12]
 800bf2c:	f8d9 2000 	ldr.w	r2, [r9]
 800bf30:	f003 0306 	and.w	r3, r3, #6
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	bf08      	it	eq
 800bf38:	1aad      	subeq	r5, r5, r2
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	bf0c      	ite	eq
 800bf40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf44:	2500      	movne	r5, #0
 800bf46:	4293      	cmp	r3, r2
 800bf48:	bfc4      	itt	gt
 800bf4a:	1a9b      	subgt	r3, r3, r2
 800bf4c:	18ed      	addgt	r5, r5, r3
 800bf4e:	f04f 0900 	mov.w	r9, #0
 800bf52:	341a      	adds	r4, #26
 800bf54:	454d      	cmp	r5, r9
 800bf56:	d11a      	bne.n	800bf8e <_printf_common+0xd6>
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e008      	b.n	800bf6e <_printf_common+0xb6>
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	4652      	mov	r2, sl
 800bf60:	4639      	mov	r1, r7
 800bf62:	4630      	mov	r0, r6
 800bf64:	47c0      	blx	r8
 800bf66:	3001      	adds	r0, #1
 800bf68:	d103      	bne.n	800bf72 <_printf_common+0xba>
 800bf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	3501      	adds	r5, #1
 800bf74:	e7c3      	b.n	800befe <_printf_common+0x46>
 800bf76:	18e1      	adds	r1, r4, r3
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	2030      	movs	r0, #48	; 0x30
 800bf7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf80:	4422      	add	r2, r4
 800bf82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	e7c5      	b.n	800bf1a <_printf_common+0x62>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	4622      	mov	r2, r4
 800bf92:	4639      	mov	r1, r7
 800bf94:	4630      	mov	r0, r6
 800bf96:	47c0      	blx	r8
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d0e6      	beq.n	800bf6a <_printf_common+0xb2>
 800bf9c:	f109 0901 	add.w	r9, r9, #1
 800bfa0:	e7d8      	b.n	800bf54 <_printf_common+0x9c>
	...

0800bfa4 <_printf_i>:
 800bfa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfac:	460c      	mov	r4, r1
 800bfae:	7e09      	ldrb	r1, [r1, #24]
 800bfb0:	b085      	sub	sp, #20
 800bfb2:	296e      	cmp	r1, #110	; 0x6e
 800bfb4:	4617      	mov	r7, r2
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	4698      	mov	r8, r3
 800bfba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfbc:	f000 80b3 	beq.w	800c126 <_printf_i+0x182>
 800bfc0:	d822      	bhi.n	800c008 <_printf_i+0x64>
 800bfc2:	2963      	cmp	r1, #99	; 0x63
 800bfc4:	d036      	beq.n	800c034 <_printf_i+0x90>
 800bfc6:	d80a      	bhi.n	800bfde <_printf_i+0x3a>
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	f000 80b9 	beq.w	800c140 <_printf_i+0x19c>
 800bfce:	2958      	cmp	r1, #88	; 0x58
 800bfd0:	f000 8083 	beq.w	800c0da <_printf_i+0x136>
 800bfd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bfdc:	e032      	b.n	800c044 <_printf_i+0xa0>
 800bfde:	2964      	cmp	r1, #100	; 0x64
 800bfe0:	d001      	beq.n	800bfe6 <_printf_i+0x42>
 800bfe2:	2969      	cmp	r1, #105	; 0x69
 800bfe4:	d1f6      	bne.n	800bfd4 <_printf_i+0x30>
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	6813      	ldr	r3, [r2, #0]
 800bfea:	0605      	lsls	r5, r0, #24
 800bfec:	f103 0104 	add.w	r1, r3, #4
 800bff0:	d52a      	bpl.n	800c048 <_printf_i+0xa4>
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6011      	str	r1, [r2, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	da03      	bge.n	800c002 <_printf_i+0x5e>
 800bffa:	222d      	movs	r2, #45	; 0x2d
 800bffc:	425b      	negs	r3, r3
 800bffe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c002:	486f      	ldr	r0, [pc, #444]	; (800c1c0 <_printf_i+0x21c>)
 800c004:	220a      	movs	r2, #10
 800c006:	e039      	b.n	800c07c <_printf_i+0xd8>
 800c008:	2973      	cmp	r1, #115	; 0x73
 800c00a:	f000 809d 	beq.w	800c148 <_printf_i+0x1a4>
 800c00e:	d808      	bhi.n	800c022 <_printf_i+0x7e>
 800c010:	296f      	cmp	r1, #111	; 0x6f
 800c012:	d020      	beq.n	800c056 <_printf_i+0xb2>
 800c014:	2970      	cmp	r1, #112	; 0x70
 800c016:	d1dd      	bne.n	800bfd4 <_printf_i+0x30>
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	f043 0320 	orr.w	r3, r3, #32
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	e003      	b.n	800c02a <_printf_i+0x86>
 800c022:	2975      	cmp	r1, #117	; 0x75
 800c024:	d017      	beq.n	800c056 <_printf_i+0xb2>
 800c026:	2978      	cmp	r1, #120	; 0x78
 800c028:	d1d4      	bne.n	800bfd4 <_printf_i+0x30>
 800c02a:	2378      	movs	r3, #120	; 0x78
 800c02c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c030:	4864      	ldr	r0, [pc, #400]	; (800c1c4 <_printf_i+0x220>)
 800c032:	e055      	b.n	800c0e0 <_printf_i+0x13c>
 800c034:	6813      	ldr	r3, [r2, #0]
 800c036:	1d19      	adds	r1, r3, #4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6011      	str	r1, [r2, #0]
 800c03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c044:	2301      	movs	r3, #1
 800c046:	e08c      	b.n	800c162 <_printf_i+0x1be>
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	6011      	str	r1, [r2, #0]
 800c04c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c050:	bf18      	it	ne
 800c052:	b21b      	sxthne	r3, r3
 800c054:	e7cf      	b.n	800bff6 <_printf_i+0x52>
 800c056:	6813      	ldr	r3, [r2, #0]
 800c058:	6825      	ldr	r5, [r4, #0]
 800c05a:	1d18      	adds	r0, r3, #4
 800c05c:	6010      	str	r0, [r2, #0]
 800c05e:	0628      	lsls	r0, r5, #24
 800c060:	d501      	bpl.n	800c066 <_printf_i+0xc2>
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	e002      	b.n	800c06c <_printf_i+0xc8>
 800c066:	0668      	lsls	r0, r5, #25
 800c068:	d5fb      	bpl.n	800c062 <_printf_i+0xbe>
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	4854      	ldr	r0, [pc, #336]	; (800c1c0 <_printf_i+0x21c>)
 800c06e:	296f      	cmp	r1, #111	; 0x6f
 800c070:	bf14      	ite	ne
 800c072:	220a      	movne	r2, #10
 800c074:	2208      	moveq	r2, #8
 800c076:	2100      	movs	r1, #0
 800c078:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c07c:	6865      	ldr	r5, [r4, #4]
 800c07e:	60a5      	str	r5, [r4, #8]
 800c080:	2d00      	cmp	r5, #0
 800c082:	f2c0 8095 	blt.w	800c1b0 <_printf_i+0x20c>
 800c086:	6821      	ldr	r1, [r4, #0]
 800c088:	f021 0104 	bic.w	r1, r1, #4
 800c08c:	6021      	str	r1, [r4, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d13d      	bne.n	800c10e <_printf_i+0x16a>
 800c092:	2d00      	cmp	r5, #0
 800c094:	f040 808e 	bne.w	800c1b4 <_printf_i+0x210>
 800c098:	4665      	mov	r5, ip
 800c09a:	2a08      	cmp	r2, #8
 800c09c:	d10b      	bne.n	800c0b6 <_printf_i+0x112>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	07db      	lsls	r3, r3, #31
 800c0a2:	d508      	bpl.n	800c0b6 <_printf_i+0x112>
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	6862      	ldr	r2, [r4, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	bfde      	ittt	le
 800c0ac:	2330      	movle	r3, #48	; 0x30
 800c0ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0b6:	ebac 0305 	sub.w	r3, ip, r5
 800c0ba:	6123      	str	r3, [r4, #16]
 800c0bc:	f8cd 8000 	str.w	r8, [sp]
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	aa03      	add	r2, sp, #12
 800c0c4:	4621      	mov	r1, r4
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7ff fef6 	bl	800beb8 <_printf_common>
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d14d      	bne.n	800c16c <_printf_i+0x1c8>
 800c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d4:	b005      	add	sp, #20
 800c0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0da:	4839      	ldr	r0, [pc, #228]	; (800c1c0 <_printf_i+0x21c>)
 800c0dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c0e0:	6813      	ldr	r3, [r2, #0]
 800c0e2:	6821      	ldr	r1, [r4, #0]
 800c0e4:	1d1d      	adds	r5, r3, #4
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6015      	str	r5, [r2, #0]
 800c0ea:	060a      	lsls	r2, r1, #24
 800c0ec:	d50b      	bpl.n	800c106 <_printf_i+0x162>
 800c0ee:	07ca      	lsls	r2, r1, #31
 800c0f0:	bf44      	itt	mi
 800c0f2:	f041 0120 	orrmi.w	r1, r1, #32
 800c0f6:	6021      	strmi	r1, [r4, #0]
 800c0f8:	b91b      	cbnz	r3, 800c102 <_printf_i+0x15e>
 800c0fa:	6822      	ldr	r2, [r4, #0]
 800c0fc:	f022 0220 	bic.w	r2, r2, #32
 800c100:	6022      	str	r2, [r4, #0]
 800c102:	2210      	movs	r2, #16
 800c104:	e7b7      	b.n	800c076 <_printf_i+0xd2>
 800c106:	064d      	lsls	r5, r1, #25
 800c108:	bf48      	it	mi
 800c10a:	b29b      	uxthmi	r3, r3
 800c10c:	e7ef      	b.n	800c0ee <_printf_i+0x14a>
 800c10e:	4665      	mov	r5, ip
 800c110:	fbb3 f1f2 	udiv	r1, r3, r2
 800c114:	fb02 3311 	mls	r3, r2, r1, r3
 800c118:	5cc3      	ldrb	r3, [r0, r3]
 800c11a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c11e:	460b      	mov	r3, r1
 800c120:	2900      	cmp	r1, #0
 800c122:	d1f5      	bne.n	800c110 <_printf_i+0x16c>
 800c124:	e7b9      	b.n	800c09a <_printf_i+0xf6>
 800c126:	6813      	ldr	r3, [r2, #0]
 800c128:	6825      	ldr	r5, [r4, #0]
 800c12a:	6961      	ldr	r1, [r4, #20]
 800c12c:	1d18      	adds	r0, r3, #4
 800c12e:	6010      	str	r0, [r2, #0]
 800c130:	0628      	lsls	r0, r5, #24
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	d501      	bpl.n	800c13a <_printf_i+0x196>
 800c136:	6019      	str	r1, [r3, #0]
 800c138:	e002      	b.n	800c140 <_printf_i+0x19c>
 800c13a:	066a      	lsls	r2, r5, #25
 800c13c:	d5fb      	bpl.n	800c136 <_printf_i+0x192>
 800c13e:	8019      	strh	r1, [r3, #0]
 800c140:	2300      	movs	r3, #0
 800c142:	6123      	str	r3, [r4, #16]
 800c144:	4665      	mov	r5, ip
 800c146:	e7b9      	b.n	800c0bc <_printf_i+0x118>
 800c148:	6813      	ldr	r3, [r2, #0]
 800c14a:	1d19      	adds	r1, r3, #4
 800c14c:	6011      	str	r1, [r2, #0]
 800c14e:	681d      	ldr	r5, [r3, #0]
 800c150:	6862      	ldr	r2, [r4, #4]
 800c152:	2100      	movs	r1, #0
 800c154:	4628      	mov	r0, r5
 800c156:	f7f4 f843 	bl	80001e0 <memchr>
 800c15a:	b108      	cbz	r0, 800c160 <_printf_i+0x1bc>
 800c15c:	1b40      	subs	r0, r0, r5
 800c15e:	6060      	str	r0, [r4, #4]
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	2300      	movs	r3, #0
 800c166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c16a:	e7a7      	b.n	800c0bc <_printf_i+0x118>
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	462a      	mov	r2, r5
 800c170:	4639      	mov	r1, r7
 800c172:	4630      	mov	r0, r6
 800c174:	47c0      	blx	r8
 800c176:	3001      	adds	r0, #1
 800c178:	d0aa      	beq.n	800c0d0 <_printf_i+0x12c>
 800c17a:	6823      	ldr	r3, [r4, #0]
 800c17c:	079b      	lsls	r3, r3, #30
 800c17e:	d413      	bmi.n	800c1a8 <_printf_i+0x204>
 800c180:	68e0      	ldr	r0, [r4, #12]
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	4298      	cmp	r0, r3
 800c186:	bfb8      	it	lt
 800c188:	4618      	movlt	r0, r3
 800c18a:	e7a3      	b.n	800c0d4 <_printf_i+0x130>
 800c18c:	2301      	movs	r3, #1
 800c18e:	464a      	mov	r2, r9
 800c190:	4639      	mov	r1, r7
 800c192:	4630      	mov	r0, r6
 800c194:	47c0      	blx	r8
 800c196:	3001      	adds	r0, #1
 800c198:	d09a      	beq.n	800c0d0 <_printf_i+0x12c>
 800c19a:	3501      	adds	r5, #1
 800c19c:	68e3      	ldr	r3, [r4, #12]
 800c19e:	9a03      	ldr	r2, [sp, #12]
 800c1a0:	1a9b      	subs	r3, r3, r2
 800c1a2:	42ab      	cmp	r3, r5
 800c1a4:	dcf2      	bgt.n	800c18c <_printf_i+0x1e8>
 800c1a6:	e7eb      	b.n	800c180 <_printf_i+0x1dc>
 800c1a8:	2500      	movs	r5, #0
 800c1aa:	f104 0919 	add.w	r9, r4, #25
 800c1ae:	e7f5      	b.n	800c19c <_printf_i+0x1f8>
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1ac      	bne.n	800c10e <_printf_i+0x16a>
 800c1b4:	7803      	ldrb	r3, [r0, #0]
 800c1b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1be:	e76c      	b.n	800c09a <_printf_i+0xf6>
 800c1c0:	0800c5a1 	.word	0x0800c5a1
 800c1c4:	0800c5b2 	.word	0x0800c5b2

0800c1c8 <memmove>:
 800c1c8:	4288      	cmp	r0, r1
 800c1ca:	b510      	push	{r4, lr}
 800c1cc:	eb01 0302 	add.w	r3, r1, r2
 800c1d0:	d807      	bhi.n	800c1e2 <memmove+0x1a>
 800c1d2:	1e42      	subs	r2, r0, #1
 800c1d4:	4299      	cmp	r1, r3
 800c1d6:	d00a      	beq.n	800c1ee <memmove+0x26>
 800c1d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c1e0:	e7f8      	b.n	800c1d4 <memmove+0xc>
 800c1e2:	4283      	cmp	r3, r0
 800c1e4:	d9f5      	bls.n	800c1d2 <memmove+0xa>
 800c1e6:	1881      	adds	r1, r0, r2
 800c1e8:	1ad2      	subs	r2, r2, r3
 800c1ea:	42d3      	cmn	r3, r2
 800c1ec:	d100      	bne.n	800c1f0 <memmove+0x28>
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c1f8:	e7f7      	b.n	800c1ea <memmove+0x22>

0800c1fa <_realloc_r>:
 800c1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fc:	4607      	mov	r7, r0
 800c1fe:	4614      	mov	r4, r2
 800c200:	460e      	mov	r6, r1
 800c202:	b921      	cbnz	r1, 800c20e <_realloc_r+0x14>
 800c204:	4611      	mov	r1, r2
 800c206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c20a:	f7ff bc4f 	b.w	800baac <_malloc_r>
 800c20e:	b922      	cbnz	r2, 800c21a <_realloc_r+0x20>
 800c210:	f7ff fbfe 	bl	800ba10 <_free_r>
 800c214:	4625      	mov	r5, r4
 800c216:	4628      	mov	r0, r5
 800c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c21a:	f000 f814 	bl	800c246 <_malloc_usable_size_r>
 800c21e:	42a0      	cmp	r0, r4
 800c220:	d20f      	bcs.n	800c242 <_realloc_r+0x48>
 800c222:	4621      	mov	r1, r4
 800c224:	4638      	mov	r0, r7
 800c226:	f7ff fc41 	bl	800baac <_malloc_r>
 800c22a:	4605      	mov	r5, r0
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d0f2      	beq.n	800c216 <_realloc_r+0x1c>
 800c230:	4631      	mov	r1, r6
 800c232:	4622      	mov	r2, r4
 800c234:	f7ff fbd8 	bl	800b9e8 <memcpy>
 800c238:	4631      	mov	r1, r6
 800c23a:	4638      	mov	r0, r7
 800c23c:	f7ff fbe8 	bl	800ba10 <_free_r>
 800c240:	e7e9      	b.n	800c216 <_realloc_r+0x1c>
 800c242:	4635      	mov	r5, r6
 800c244:	e7e7      	b.n	800c216 <_realloc_r+0x1c>

0800c246 <_malloc_usable_size_r>:
 800c246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24a:	1f18      	subs	r0, r3, #4
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	bfbc      	itt	lt
 800c250:	580b      	ldrlt	r3, [r1, r0]
 800c252:	18c0      	addlt	r0, r0, r3
 800c254:	4770      	bx	lr
	...

0800c258 <_init>:
 800c258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25a:	bf00      	nop
 800c25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c25e:	bc08      	pop	{r3}
 800c260:	469e      	mov	lr, r3
 800c262:	4770      	bx	lr

0800c264 <_fini>:
 800c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c266:	bf00      	nop
 800c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26a:	bc08      	pop	{r3}
 800c26c:	469e      	mov	lr, r3
 800c26e:	4770      	bx	lr
